<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DOS命令</title>
    <url>/posts/ba611fe6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>DOS是<strong>Disk Operating System</strong>(磁盘操作系统)的缩写，常见的DOS有两种：IBM公司的<a href="https://baike.baidu.com/item/PC-DOS">PC-DOS</a>和微软公司的<a href="https://baike.baidu.com/item/MS-DOS">MS-DOS</a></p>
<p><strong>MS-DOS</strong> 它是由美国微软公司发展的操作系统，运行在<strong>Intel x86</strong>个人电脑上。自微软图形界面操作系统<a href="https://baike.baidu.com/item/Windows%20NT">Windows NT</a>问世以来，DOS就作为一个后台程序的形式出现，我们可以通过键盘快捷键<kbd>Win</kbd> + <kbd>R</kbd> 打开运行窗口-在里面输入 <code>cmd</code> 回车即可进入DOS界面。</p>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/images/image/20220728132900" alt="cmd"></p>
<blockquote>
<p><em>DOS命令，计算机术语，是指DOS操作系统(单任务的操作系统)的命令，是一种面向磁盘的操作命令，主要包括目录操作类命令、磁盘操作类命令、文件操作类命令和其它命令。</em></p>
</blockquote>
<h2 id="内部命令与外部命令"><a href="#内部命令与外部命令" class="headerlink" title="内部命令与外部命令"></a>内部命令与外部命令</h2><p>内部命令，是指在DOS启动之后，自动通过<code>command.com</code>文件导入内存的命令。在执行这些命令的时候，直接从内存进行调用。<code>command.com</code>文件是DOS的核心程序，也就是说内部命令是由DOS自身提供。而外部命令是一条单独的<strong>可执行文件</strong>。</p>
<p>外部命令需要保证程序的可执行文件(.exe或.com)在当前的目录中，或在环境变量<code>PATH</code>中。</p>
<p>DOS的外部命令就是一些应用程序，这些外部命令都是以文件的形式存在。</p>
<p>内部命令相比于外部命令其特点就是执行速度快且无需额外安装在任何时候都可以使用。</p>
<h2 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">calc</td><td align="center">启动计算器</td><td align="center">diskmgmt.msc</td><td align="center">磁盘管理实用程序</td></tr><tr><td align="center">certmgr.msc</td><td align="center">证书管理实用程序</td><td align="center">dvdplay</td><td align="center">DVD播放器</td></tr><tr><td align="center">charmap</td><td align="center">启动字符映射表</td><td align="center">dxdiag</td><td align="center">检查DirectX信息</td></tr><tr><td align="center">chkdsk.exe</td><td align="center">Chkdsk磁盘检查</td><td align="center">eudcedit</td><td align="center">造字程序</td></tr><tr><td align="center">cmd.exe</td><td align="center">CMD命令提示符</td><td align="center">eventvwr</td><td align="center">事件查看器</td></tr><tr><td align="center">compmgmt.msc</td><td align="center">打开计算机管理</td><td align="center">explorer</td><td align="center">打开资源管理器</td></tr><tr><td align="center">cliconfg</td><td align="center">SQL SERVER 客户端网络实用程序</td><td align="center">fsmgmt.msc</td><td align="center">共享文件夹管理器</td></tr><tr><td align="center">dcomcnfg</td><td align="center">打开系统组件服务</td><td align="center">gpedit.msc</td><td align="center">组策略</td></tr><tr><td align="center">devmgmt.msc</td><td align="center">设备管理器</td><td align="center">netplwiz</td><td align="center">用户账户</td></tr><tr><td align="center">logoff</td><td align="center">注销命令</td><td align="center">ntmsmgr.msc</td><td align="center">移动存储管理器</td></tr><tr><td align="center">lusrmgr.msc</td><td align="center">本机用户和组</td><td align="center">ntmsoprq.msc</td><td align="center">移动存储管理员操作请求</td></tr><tr><td align="center">magnify</td><td align="center">放大镜实用程序</td><td align="center">odbcad32</td><td align="center">ODBC数据源管理器</td></tr><tr><td align="center">mmc</td><td align="center">打开控制台</td><td align="center">osk</td><td align="center">打开屏幕键盘</td></tr><tr><td align="center">mobsync</td><td align="center">同步命令</td><td align="center">perfmon.msc</td><td align="center">计算机性能监测程序</td></tr><tr><td align="center">Msconfig.exe</td><td align="center">系统配置实用程序</td><td align="center">regedit.exe</td><td align="center">注册表</td></tr><tr><td align="center">mspaint</td><td align="center">画图板</td><td align="center">regedt32</td><td align="center">注册表编辑器</td></tr><tr><td align="center">mstsc</td><td align="center">远程桌面连接</td><td align="center">rononce -p</td><td align="center">15秒关机</td></tr><tr><td align="center">narrator</td><td align="center">屏幕“讲述人”</td><td align="center">regsvr32 /u zipfldr.dll</td><td align="center">取消ZIP支持</td></tr><tr><td align="center">netstat -an</td><td align="center">(TC)命令检查接口</td><td align="center">regsvr32 /u *.dll</td><td align="center">停止dll文件运行</td></tr><tr><td align="center">notepad</td><td align="center">打开记事本</td><td align="center">rsop.msc</td><td align="center">组策略结果集</td></tr><tr><td align="center">Nslookup</td><td align="center">IP地址侦测器</td><td align="center">secpol.msc</td><td align="center">本地安全策略</td></tr><tr><td align="center">ntbackup</td><td align="center">系统备份和还原</td><td align="center">services.msc</td><td align="center">本地服务设置</td></tr><tr><td align="center">sfc /scannow</td><td align="center">windows文件保护</td><td align="center">taskmgr</td><td align="center">任务管理器</td></tr><tr><td align="center">sysdm.cpl</td><td align="center">系统属性</td><td align="center">msinfo32</td><td align="center">系统信息</td></tr><tr><td align="center">sfc.exe</td><td align="center">系统文件检查器</td><td align="center">tsshutdn</td><td align="center">60秒倒计时关机命令</td></tr><tr><td align="center">shrpubw</td><td align="center">创建共享文件夹</td><td align="center">utilman</td><td align="center">辅助工具管理器</td></tr><tr><td align="center">sigverif</td><td align="center">文件签名验证程序</td><td align="center">wiaacmgr</td><td align="center">扫描仪和照相机向导</td></tr>
    <tr><td align="center">winver</td><td align="center">检查Windows版本</td><td align="center">wmimgmt.msc</td><td align="center">打开windows管理体系结构(WMI)</td></tr><tr><td align="center">write</td><td align="center">写字板</td><td align="center">wscript</td><td align="center">windows脚本宿主设置</td></tr></tbody></table>

<h2 id="内部命令"><a href="#内部命令" class="headerlink" title="内部命令"></a>内部命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">assoc</td><td align="center">显示或修改文件扩展名关联。</td><td align="center">attrib</td><td align="center">显示或更改文件属性。</td></tr><tr><td align="center">break</td><td align="center">设置或清除扩展式CTRL+C检查。</td><td align="center">bootcfg</td><td align="center">设置boot.ini文件的属性以便控制启动加载。</td></tr><tr><td align="center">cacls</td><td align="center">显示或修改文件的访问控制列表(ACL)。</td><td align="center">call</td><td align="center">从另一个批处理程序调用这一个。</td></tr><tr><td align="center">cd</td><td align="center">显示当前目录的名称或将其更改。</td><td align="center">chcp</td><td align="center">显示或设置活动代码页数。</td></tr><tr><td align="center">chdir</td><td align="center">显示当前目录的名称或将其更改。</td><td align="center">color</td><td align="center">设置默认控制台前景和背景颜色。</td></tr><tr><td align="center">chkdsk</td><td align="center">检查磁盘并显示状态报告。</td><td align="center">comp</td><td align="center">比较两个或两套文件的内容。</td></tr><tr><td align="center">chkntfs</td><td align="center">显示或修改启动时间磁盘检查。</td><td align="center">compact</td><td align="center">显示或更改NTFS分区上文件的压缩。</td></tr><tr><td align="center">cls</td><td align="center">清除屏幕。</td><td align="center">convert</td><td align="center">将FAT卷转换成NTFS。您不能转换当前驱动器。</td></tr><tr><td align="center">cmd</td><td align="center">打开另一个Windows命令解释程序窗口。</td><td align="center">copy</td><td align="center">将至少一个文件复制到另一个位置。</td></tr><tr><td align="center">date</td><td align="center">显示或设置日期。</td><td align="center">MOVE</td><td align="center">将一个或多个文件从一个目录移动到另一个目录。</td></tr><tr><td align="center">del</td><td align="center">删除至少一个文件。</td><td align="center">OPENFILES</td><td align="center">显示远程用户为了文件共享而打开的文件。</td></tr><tr><td align="center">dir</td><td align="center">显示一个目录中的文件和子目录。</td><td align="center">PAGEFILECONFIG</td><td align="center">显示或配置页面文件的属性。</td></tr><tr><td align="center">DISKCOMP</td><td align="center">比较两个软盘的内容。</td><td align="center">path</td><td align="center">为可执行文件显示或设置搜索路径。</td></tr><tr><td align="center">DISKCOPY</td><td align="center">将一个软盘的内容复制到另一个软盘。</td><td align="center">pause</td><td align="center">停止批处理文件的处理并显示信息。</td></tr><tr><td align="center">DISKPART</td><td align="center">显示或配置磁盘分区属性。</td><td align="center">POPD</td><td align="center">还原由PUSHD保存的当前目录上一次的值。</td></tr><tr><td align="center">DOSKEY</td><td align="center">编辑命令行、调用Windows命令并创建宏。</td><td align="center">PRINT</td><td align="center">打印一个文本文件。</td></tr><tr><td align="center">DRIVERQUERY</td><td align="center">显示当前设备驱动程序状态和属性。</td><td align="center">PROMPT</td><td align="center">改变Windows命令提示。</td></tr><tr><td align="center">echo</td><td align="center">显示消息，或将命令回显打开或关上。</td><td align="center">PUSHD</td><td align="center">保存当前目录，然后对其进行更改。</td></tr><tr><td align="center">ENDLOCAL</td><td align="center">结束批文件中环境更改的本地化。</td><td align="center">rd</td><td align="center">删除目录。</td></tr><tr><td align="center">ERASE</td><td align="center">删除一个或多个文件。</td><td align="center">RECOVER</td><td align="center">从损坏的磁盘中恢复可读取的信息。</td></tr><tr><td align="center">EVENTQUERY</td><td align="center">显示指定准则的事件日志项目。</td><td align="center">rem</td><td align="center">记录批处理文件或CONFIG.SYS中的注释。</td></tr><tr><td align="center">exit</td><td align="center">退出CMD.EXE程序(命令解释程序)。</td><td align="center">ren</td><td align="center">重新命名文件。</td></tr><tr><td align="center">fc</td><td align="center">比较两个文件或两个文件集并显示它们之间的不同。</td><td align="center">rename</td><td align="center">重新命名文件。</td></tr><tr><td align="center">find</td><td align="center">在一个或多个文件中搜索一个文字字符串。</td><td align="center">REPLACE</td><td align="center">替换文件。</td></tr><tr><td align="center">FINDSTR</td><td align="center">在多个文件中搜索字符串。</td><td align="center">rmdir</td><td align="center">删除目录。</td></tr><tr><td align="center">for</td><td align="center">为一套文件中的每个文件运行一个指定的命令。</td><td align="center">set</td><td align="center">显示、设置或删除Windows环境变量。</td></tr><tr><td align="center">FORMAT</td><td align="center">格式化磁盘，以便跟Windows使用。</td><td align="center">SETLOCAL</td><td align="center">开始用批文件改变环境的本地化。</td></tr><tr><td align="center">FSUTIL</td><td align="center">显示或配置文件系统的属性。</td><td align="center">sc</td><td align="center">显示或配置服务(后台处理)。</td></tr><tr><td align="center">ftype</td><td align="center">显示或修改用在文件扩展名关联的文件类型。</td><td align="center">SCHTASKS</td><td align="center">安排命令和程序在一部计算机上按计划运行。</td></tr><tr><td align="center">goto</td><td align="center">将Windows命令解释程序指向批处理程序</td><td align="center">SHIFT</td><td align="center">调整批处理文件中可替换参数的位置。</td></tr><tr><td align="center">GPRESULT</td><td align="center">显示机器或用户的组策略信息。</td><td align="center">SHUTDOWN</td><td align="center">让机器在本地或远程正确关闭。</td></tr><tr><td align="center">GRAFTABL</td><td align="center">启用Windows在图形模式显示扩展字符集。</td><td align="center">sort</td><td align="center">将输入排序。</td></tr><tr><td align="center">help</td><td align="center">提供Windows命令的帮助信息。</td><td align="center">start</td><td align="center">打开单独视窗运行指定程序或命令。</td></tr><tr><td align="center">if</td><td align="center">在批处理程序中执行有条件的处理过程。</td><td align="center">subst</td><td align="center">将驱动器号与路径关联。</td></tr><tr><td align="center">label</td><td align="center">创建、更改或删除磁盘的卷标。</td><td align="center">SYSTEMINFO</td><td align="center">显示机器的具体的属性和配置。</td></tr><tr><td align="center">md</td><td align="center">创建一个目录。</td><td align="center">tasklist</td><td align="center">显示包括服务的所有当前运行的任务。</td></tr><tr><td align="center">mkdir</td><td align="center">创建一个目录。</td><td align="center">taskkill</td><td align="center">终止正在运行的进程或应用程序。</td></tr><tr><td align="center">mode</td><td align="center">配置系统设备。</td><td align="center">time</td><td align="center">显示或设置系统时间。</td></tr><tr><td align="center">more</td><td align="center">逐屏显示输出。</td><td align="center">title</td><td align="center">设置CMD.EXE会话的窗口标题。</td></tr><tr><td align="center">wmic</td><td align="center">在交互命令外壳里显示WMI信息。</td><td align="center">verify</td><td align="center">告诉Windows验证文件是否正确写入磁盘。</td></tr><tr><td align="center">xcopy</td><td align="center">复制文件和目录树。</td><td align="center">ver</td><td align="center">显示Windows的版本。</td></tr><tr><td align="center">vol</td><td align="center">显示磁盘卷标和序列号。</td><td align="center">type</td><td align="center">显示文本文件的内容。</td></tr><tr><td align="center">tree</td><td align="center">以图形显示启动器或路径的目录结构。</td><td align="center">ping</td><td align="center">网络命令</td></tr></tbody></table>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Ajax 教程</title>
    <url>/posts/c7ff2d25.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Ajax 全称 Asynchronous JavaScript and XML( 异步 JavaScript 和 XML )，早在 2005 年就被提出，它被描述为一种使用现有技术集合的‘新’方法，包括的技术有：HTML、CSS、JavaScript、DOM、XML 以及最重要的 XMLHttpRequest，它可以在不重新加载整个页面的情况下与服务器交换数据并更新部分网页内容</p>
<p>Ajax 的核心是异步数据交换，通过 Ajax 我们可以向服务器发送 HTTP 请求( 如 GET、POST 等 )，并处理<strong>响应</strong>( 包括 JSON、XML、HTML等 )</p>
<h2 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a><code>XMLHttpRequest</code> 对象</h2><p>XMLHttpRequest 对象是对 Ajax 异步数据交换的实现</p>
<p><strong>基本用法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 XMLHttpRequest 类型对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个请求，设置请求方法和目标 URL</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册事件监听器，处理响应</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;  <span class="comment">// 请求完成</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;  <span class="comment">// 请求成功，xhr.status 获取响应状态码</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功响应:&#x27;</span>, xhr.<span class="property">responseText</span>); <span class="comment">// xhr.responseText 获取响应的文本数据</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败，状态码: &#x27;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p><strong>XMLHttpRequest 的常用方法：</strong></p>
<ol>
<li><code>xhr.open(method, url)</code>：<ul>
<li><code>method</code>：请求方法（如 <code>GET</code> 或 <code>POST</code>）</li>
<li><code>url</code>：请求的目标 URL</li>
</ul>
</li>
<li><code>xhr.send(data)</code>：发送请求，如果是 <code>GET</code> 请求，<code>data</code> 通常为 <code>null</code>；如果是 <code>POST</code> 请求，可以在这里发送请求体数据</li>
<li><code>xhr.setRequestHeader(header, value)</code>：设置 HTTP 请求头，例如设置 <code>Content-Type</code> 为 <code>application/json</code></li>
<li><code>xhr.getResponseHeader(name)</code>：获取 HTTP 响应头</li>
<li><code>xhr.abort()</code>：取消当前的请求</li>
<li><code>xhr.responseType</code>：响应体的类型，默认 text 类型<ul>
<li><code>arraybuffer</code>：response 是一个包含二进制数据的 js ArrayBuffer</li>
<li><code>blob</code>：response 是一个包含二进制数据的 Blob 对象 </li>
<li><code>document</code>：response 是一个 Document 对象( 如：HTML Document、XMLDocument )</li>
<li><code>json</code>：response 是一个 js 对象</li>
<li><code>text</code>：response 是一个普通文本( 字符串 )</li>
</ul>
</li>
<li><code>xhr.response</code>：获取响应体</li>
<li><code>xhr.responseText</code>：获取响应体，只有当 <code>responseType</code> 为 <code>text</code> 或 <code>&quot;&quot;</code> 时，<code>xhr</code> 对象上才有此属性</li>
<li><code>xhr.responseXML</code>：获取响应体只，有当 <code>responseType</code> 为 <code>text</code>、<code>&quot;&quot;</code>、<code>document</code> 时，<code>xhr</code> 对象上才有此属性</li>
</ol>
<p><strong>readystatechange 事件：</strong></p>
<p><code>readystatechange</code> 事件在 <strong><code>readyState</code> 属性每次变化时</strong> 都会触发，因此它可以处理整个请求的生命周期</p>
<p><code>readyState</code> 具有 5 种状态：</p>
<ol>
<li><code>0</code>: 请求尚未初始化，<code>open()</code> 方法还未被调用</li>
<li><code>1</code>: 服务器连接已建立，此时可以可以开始发送请求了</li>
<li><code>2</code>: 请求已接收，响应头和响应状态已经返回</li>
<li><code>3</code>: 请求处理中（正在接收响应数据），此时 <code>xhr.response</code> 中可能已经有了响应数据</li>
<li><code>4</code>: 请求已完成，传输结束</li>
</ol>
<p><strong>load 事件：</strong></p>
<p><code>load</code> 事件在 <strong>请求完成且成功接收到服务器响应后</strong> 触发。换句话说，当请求的 <code>readyState</code> 达到 <code>4</code>（完成）并且状态码为 <code>200</code> 代表成功时，<code>onload</code> 会被调用</p>
<h3 id="发送-POST-请求"><a href="#发送-POST-请求" class="headerlink" title="发送 POST 请求"></a>发送 POST 请求</h3><p>例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 发送 form-urlencoded 类型数据 */</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个请求，并设置请求方法为 POST</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求头，Content-Type 请求体类型, 如果发送 JSON, 则设置 application/json</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求（包含请求体）</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=1&amp;b=2&amp;c=3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h3><p>可以通过 <code>timeout</code> 事件来处理请求超时，当请求在设定的时间内未能完成，触发 <code>timeout</code> 事件</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置请求超时时间，单位是毫秒</span></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">5000</span>; <span class="comment">// 5秒超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 ontimeout 事件</span></span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;The request for https://api.example.com/data timed out.&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 onerror 事件处理程序, 当网络请求发送错误时触发</span></span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;An error occurred during the transaction&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p><strong><code>error</code> 事件：</strong></p>
<p><code>error</code> 事件会在请求失败时被调用。它处理的是与请求本身相关的网络问题，比如服务器未响应、断网等</p>
<h3 id="发送文件"><a href="#发送文件" class="headerlink" title="发送文件"></a>发送文件</h3><p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;uploadForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFile()&quot;</span>&gt;</span>Upload File<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取文件输入元素</span></span><br><span class="line">  <span class="keyword">const</span> fileInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;fileInput&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取选择的文件</span></span><br><span class="line">  <span class="keyword">const</span> file = fileInput.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个 FormData 对象</span></span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将文件追加到 FormData 对象中</span></span><br><span class="line">  formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 XMLHttpRequest 对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始化 POST 请求，目标为上传文件的服务器 API</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;/upload&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 onload 事件处理器，当上传成功时执行</span></span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File uploaded successfully!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error uploading file&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理错误和超时的情况</span></span><br><span class="line">  xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request failed&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Request timed out&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发送 FormData 对象，其中包含要上传的文件</span></span><br><span class="line">  xhr.<span class="title function_">send</span>(formData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进度监听"><a href="#进度监听" class="headerlink" title="进度监听"></a>进度监听</h3><p><code>XMLHttpRequest</code> 支持追踪上传和下载的进度，可以通过 <code>progress</code> 事件来监听进度</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.example.com/file&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 progress 进度监听事件，如果要监听上传的进度，可以使用 xhr.upload.onprogress</span></span><br><span class="line">xhr.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  	<span class="comment">// event.lengthComputable：表示下载的数据长度是否是可计算的（即是否知道数据的总大小）。如果为 true，表示服务器已发送的响应中包含了数据的总大小，能够计算出下载的进度</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">      	<span class="comment">// event.loaded：表示当前已经下载的字节数</span></span><br><span class="line">      	<span class="comment">// event.total：表示数据的总大小（以字节为单位）。这个值只有在 lengthComputable 为 true 时才有效</span></span><br><span class="line">        <span class="keyword">let</span> percentComplete = (event.<span class="property">loaded</span> / event.<span class="property">total</span>) * <span class="number">100</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`下载进度: <span class="subst">$&#123;percentComplete&#125;</span>%`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>

<p><code>xhr.upload.onprogress</code> 事件会在上传阶段( 即<code>xhr.send()</code>之后，<code>xhr.readystate=2</code>之前 )触发，每50ms触发一次；<code>xhr.onprogress</code> 事件会在下载阶段( 即<code>xhr.readystate=3</code>时 )触发，每<code>50ms</code>触发一次</p>
<h2 id="XMLHttpRequest-其它事件"><a href="#XMLHttpRequest-其它事件" class="headerlink" title="XMLHttpRequest 其它事件"></a>XMLHttpRequest 其它事件</h2><ul>
<li><code>onloadstart</code>：获取开始，调用<code>xhr.send()</code>方法后立即触发，若<code>xhr.send()</code>未被调用则不会触发此事件</li>
<li><code>onabort</code>：获取操作终止，当调用<code>xhr.abort()</code>后触发</li>
<li><code>onloadend</code>：获取完成，当请求结束（包括请求成功和请求失败）时触发</li>
</ul>
<h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>Axios 是一个基于 Promise 的 HTTP 网络请求库，可在 Node.js 和 浏览器环境中使用，在浏览器环境中则是基于 <code>XMLHttpRequest</code> 对象实现</p>
<h3 id="使用-Axios"><a href="#使用-Axios" class="headerlink" title="使用 Axios"></a>使用 Axios</h3><p>首先，我们要引入 Axios。可以通过 CDN 链接引入，或者使用 npm 安装：</p>
<p><strong>通过 <code>&lt;script src=&quot;CDN_LINK&quot;&gt;&lt;/script&gt;</code> 引入：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>通过 npm 安装：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><strong>发送 GET 请求：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发送 GET 请求</span></span><br><span class="line"><span class="comment">@param URL &#123;String&#125; 请求的url地址</span></span><br><span class="line"><span class="comment">@param options &#123;Object&#125; 请求配置项</span></span><br><span class="line"><span class="comment">@return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.example.com/posts&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 设置 URL 参数, axios 会把 params 中的键值对用 ? 和 &amp; 拼接成 urlencode 格式的字符串, 然后传入 URL 中发送给服务器</span></span><br><span class="line">	<span class="attr">params</span>: &#123;</span><br><span class="line">		<span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">	<span class="comment">// 请求成功处理</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">	<span class="comment">// 请求失败处理</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 async/await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.example.com/posts&#x27;</span>, &#123;</span><br><span class="line">			<span class="attr">params</span>: &#123;</span><br><span class="line">				<span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure>

<p><strong>发送 POST 请求：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发送 POST 请求</span></span><br><span class="line"><span class="comment">@param URL &#123;String&#125; 请求的url地址</span></span><br><span class="line"><span class="comment">@param body &#123;String|Object&#125; 请求体</span></span><br><span class="line"><span class="comment">@return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;https://api.example.com/posts&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">title</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">	<span class="attr">body</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">	<span class="attr">userId</span>: <span class="number">1</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios 会自动将 Object 转换为 JSON 格式, 并自动将 Content-Type 头设置为 application/json, 然后发送给服务器</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(一) 发展与使用</title>
    <url>/posts/72fcc0e1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JavaScript 是一种具有<strong>函数优先</strong>特性的轻量级、<strong>解释型</strong>( 无需手动编译，运行时边解释边执行 )的编程语言，它是运行在 Web浏览器中的一种脚本语言，当然，也还可被运行在一些非浏览器环境中，如：Node.js</p>
<p>进一步说，JavaScript 是一种基于原型、多范式、单线程的<strong>动态类型语言</strong>( 无需指定类型，运行时确定类型 )，并且支持面向对象、命令式和声明式( 如函数式编程 )风格</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><blockquote>
<ul>
<li>JavaScript 最初由 Netscape( 网景公司 )的一位工程师，名叫( <a href="https://baike.baidu.com/item/Brendan%20Eich/561441">Brendan Eich</a> )设计的，起初命名为 LiveScript，后来由于 Netscape公司在与 Sun公司合作之后将其改名为 JavaScript</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>JavaScript 最初受 Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自 Java。但 JavaScript 的主要设计原则源自 Self 和 Scheme。JavaScript 与 Java名称上的近似，是当时 Netscape 为了营销考虑与 Sun微系统达成协议的结果。为了取得技术优势，微软推出了 JScript 来迎战 JavaScript 的脚本语言</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/public/image/20221206161239" alt="三大公司"></p>
<blockquote>
<ul>
<li>后来，为了互用性，Netscape 公司将 JavaScript 提交给欧洲计算机制造商协会( ECMA )，制定了 ECMA-262标准（ECMAScript）</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>发展初期，JavaScript 的标准并未确定，同期有 Netscape 的 JavaScript，微软的 JScript 和 CEnvi 的 ScriptEase 三足鼎立。1997年，在ECMA（欧洲计算机制造商协会）的协调下，由 Netscape、Sun、微软、Borland 组成的工作组确定统一标准：ECMA-262</li>
</ul>
</blockquote>
<h3 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h3><table>
<thead>
<tr>
<th>年份</th>
<th>事件</th>
</tr>
</thead>
<tbody><tr>
<td>1995</td>
<td>网景公司开发了 JavaScript 语言</td>
</tr>
<tr>
<td>1996</td>
<td>微软发布了和 JavaScript 兼容的 JScript</td>
</tr>
<tr>
<td>1997</td>
<td>ECMAScript 1.0 版（ECMA-262）发布</td>
</tr>
<tr>
<td>1998</td>
<td>ECMAScript 2.0 版 发布</td>
</tr>
<tr>
<td>1998</td>
<td>DOM Level1 的制定</td>
</tr>
<tr>
<td>1998</td>
<td>新技术 DHTML 登场</td>
</tr>
<tr>
<td>1999</td>
<td>ECMAScript 3.0 版 发布</td>
</tr>
<tr>
<td>2000</td>
<td>DOM Level2 的制定</td>
</tr>
<tr>
<td>2002</td>
<td>ISO/IEC 16262:2002 的确立</td>
</tr>
<tr>
<td>2004</td>
<td>DOM Level3 的制定</td>
</tr>
<tr>
<td>2005</td>
<td>新技术 AJAX 登场</td>
</tr>
<tr>
<td>2009</td>
<td>ECMAScript 5.0 版 发布</td>
</tr>
<tr>
<td>2009</td>
<td>新技术 HTML5 登场</td>
</tr>
<tr>
<td>2011</td>
<td>ISO/IEC 16262:2011 的确立</td>
</tr>
<tr>
<td>2013</td>
<td>ECMAScript 6.0 版 发布</td>
</tr>
</tbody></table>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><blockquote>
<p>ECMAScript 是一个标准而这个标准需要由各个浏览器厂商去实现</p>
<p>不同浏览器厂商对该标准有不同的实现</p>
</blockquote>
<table>
<thead>
<tr>
<th>浏览器</th>
<th>JavaScript 引擎( 实现 )</th>
</tr>
</thead>
<tbody><tr>
<td>FireFox</td>
<td>SpiderMonkey</td>
</tr>
<tr>
<td>Internet Explorer</td>
<td>JScript/Chakra</td>
</tr>
<tr>
<td>Safari</td>
<td>JavaScriptCore</td>
</tr>
<tr>
<td>Chrome</td>
<td>V8</td>
</tr>
<tr>
<td>Opera</td>
<td>Carakan</td>
</tr>
</tbody></table>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>ECMAScript 是 JavaScript的标准，所以一般情况下这两个词我们认为是一个意思，但实际上 JavaScript 的含义却要更大一些。一个完整的浏览器 JavaScript 实现由以下三部分组成：</p>
<ul>
<li>ECMAScript（描述了该语言的语法和基本对象）</li>
<li>文档对象模型（DOM）描述处理网页内容的方法和接口</li>
<li>浏览器对象模型（BOM）描述与浏览器进行交互的方法和接口</li>
</ul>
<h2 id="代码编写位置"><a href="#代码编写位置" class="headerlink" title="代码编写位置"></a>代码编写位置</h2><h3 id="1、内部JS代码"><a href="#1、内部JS代码" class="headerlink" title="1、内部JS代码"></a>1、内部JS代码</h3><p>直接将 js 代码写在<code>&lt;script&gt;&lt;/script&gt;</code>标签内，浏览器检索到<code>&lt;script&gt;</code>标签时会自动调用 <strong>JavaScript引擎</strong> 来执行 js 代码</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  	<span class="comment">//第一个Js程序</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>属性：</strong></p>
<ul>
<li><code>type</code>：默认值<code>text/javascript</code>可省略，默认还是这个值</li>
</ul>
<h3 id="2、外部JS代码"><a href="#2、外部JS代码" class="headerlink" title="2、外部JS代码"></a>2、外部JS代码</h3><p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hello.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过&lt;script&gt;标签的src属性来引入外部js文件 --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> hello.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="comment">//在外部js文件编写js代码</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><code>//..</code> 行注释</li>
<li><code>/* ..注释内容.. */</code> 块注释</li>
<li>注释的内容则会被 <strong>js引擎</strong> 忽略不执行</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 异步编程—Promise 与 async、await</title>
    <url>/posts/83b1668c.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>异步</strong> 允许一个任务启动后，程序继续执行其他任务，而无需等待这个任务完成，它与同步是相对的概念</p>
<p>异步编程的特点：</p>
<ul>
<li>任务可以并发执行，程序不会因为等待某个任务而被阻塞，这样可以避免页面冻结或卡顿</li>
<li>当异步任务完成时，可以通过回调函数、Promise 或 <code>async/await</code> 的方式来处理结果</li>
<li>异步编程更适合处理 I/O 操作，如 网络请求、文件或数据库操作等耗时任务…</li>
</ul>
<h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2><p>Promise 是一种用于处理异步操作的对象，它表示一个<strong>尚未完成</strong>但将在将来可能会完成的操作，它可以在异步操作完成后传递结果（成功或失败），从而让开发者能够避免“回调地狱”并使异步代码更易于管理和阅读</p>
<p><strong>回调函数( <em>callback</em> )：</strong></p>
<p><em>回调函数</em>是一个被作为另一个函数参数传递的函数，它是异步编程的一种方式，在异步操作完成时会调用这个回调函数</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="comment">// 异步任务</span></span><br><span class="line">  	<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="string">&#x27;数据&#x27;</span>;</span><br><span class="line">        <span class="title function_">callback</span>(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 &#x27;数据&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;keydown&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>回调地狱( <em>callback hell</em> )：</strong></p>
<p>回调地狱是指在异步编程中，嵌套过多的回调函数导致代码结构复杂、难以阅读和维护的情况。它通常出现在 js 中使用回调函数处理异步操作时，由于需要嵌套多个异步操作，每个操作的结果可能依赖于上一个操作，代码逐渐向右缩进，形成像“金字塔”一样的结构</p>
<p>在 Web 开发中最常见的异步操作就是发起网络请求。当你发起网络请求时，你可以传递一个回调函数，当请求响应时，这个回调函数会被调用</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设我们有几个异步网络请求操作需要按顺序执行，比如：获取用户数据、获取用户的订单、获取订单的详细信息。使用纯回调的写法大致如下</span></span><br><span class="line"><span class="title function_">getUser</span>(userId, <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户数据:&#x27;</span>, user);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getOrders</span>(user.<span class="property">id</span>, <span class="function">(<span class="params">orders</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户订单:&#x27;</span>, orders);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">getOrderDetails</span>(orders[<span class="number">0</span>].<span class="property">id</span>, <span class="function">(<span class="params">orderDetails</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;订单详情:&#x27;</span>, orderDetails);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 继续嵌套其他异步操作...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设 getUser, getOrders, getOrderDetails 都返回 Promise</span></span><br><span class="line"><span class="comment">// 使用 Promise 改写大致如下</span></span><br><span class="line"><span class="title function_">getUser</span>(userId)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户数据:&#x27;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getOrders</span>(user.<span class="property">id</span>);  <span class="comment">// 返回一个 Promise</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">orders</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户订单:&#x27;</span>, orders);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">getOrderDetails</span>(orders[<span class="number">0</span>].<span class="property">id</span>);  <span class="comment">// 返回一个 Promise</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">orderDetails</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;订单详情:&#x27;</span>, orderDetails);</span><br><span class="line">        <span class="comment">// 如果有其他异步操作，可以继续链式调用</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发生错误:&#x27;</span>, error);  <span class="comment">// 集中处理错误</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Promise-基本概念"><a href="#Promise-基本概念" class="headerlink" title="Promise 基本概念"></a>Promise 基本概念</h3><p>Promise 有三种状态：</p>
<ul>
<li><p><strong>Pending（待定）</strong>：初始状态，表示异步操作既没有完成也没有失败</p>
</li>
<li><p><strong>Fulfilled（已完成）</strong>：表示异步操作完成，并返回了一个结果( value / result )</p>
</li>
<li><p><strong>Rejected（已拒绝）</strong>：表示异步操作失败，并返回了一个原因或错误( reson / error )</p>
</li>
</ul>
<p>Promise 的状态一旦变为 <strong>fulfilled</strong> 或 <strong>rejected</strong>，就不会再改变</p>
<h3 id="创建-Promise"><a href="#创建-Promise" class="headerlink" title="创建 Promise"></a>创建 Promise</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">executor 执行器函数，它是创建 Promise 类型对象时执行的函数，用于封装异步操作</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Promise 类型对象</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 模拟一个异步操作(假设)</span></span><br><span class="line">  <span class="keyword">const</span> success = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value), <span class="comment">// promise 状态为 Fulfilled 时执行，value 为操作成功的结果</span></span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error) <span class="comment">// promise 状态为 Rejected 时执行，error 为操作失败的结果</span></span><br><span class="line">) <span class="comment">// 操作成功</span></span><br></pre></td></tr></table></figure>

<p><img src="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/promises.png" alt="promises.png"></p>
<p><strong><code>resolve()</code>：</strong></p>
<p><code>resolve</code> 函数代表异步操作成功时会调用的函数，我们可以将异步操作成功的结果，作为参数传递出去</p>
<p><code>resolve</code> 函数在调用时，会将 promise 的状态从 Pending 修改为 Fulfilled，此时 promise 的状态和结果就会固定，其它任何操作都无法再次修改 promise 的状态</p>
<p><strong><code>reject()</code>：</strong></p>
<p><code>reject</code> 函数代表异步操作失败时( 比如 抛出错误 )会调用的函数，我们可以将异步操作错误的结果，作为参数传递出去</p>
<p><code>resolve</code> 函数在调用时，会将 promise 的状态从 Pending 修改为 Rejected，此时 promise 的状态和结果就会固定，其它任何操作都无法再次修改 promise 的状态</p>
<p><strong><code>promise.then()</code>：</strong></p>
<p><code>then</code> 方法的参数中包含两个函数，第一个是 promise 状态为 Fulfilled 时执行的函数，第二个是 promise 状态为 Rejected 时执行的函数，它们都可以接受参数来获取成功和失败的结果</p>
<h3 id="Promise-静态方法"><a href="#Promise-静态方法" class="headerlink" title="Promise 静态方法"></a>Promise 静态方法</h3><p><strong><code>Promise.resolve(value)</code>：</strong></p>
<p>用于直接返回一个状态为 Fulfilled 的 Promise 类型对象</p>
<p><strong><code>Promise.reject(error)</code>：</strong></p>
<p>用于直接返回一个状态为 Rejected 的 Promise 类型对象</p>
<p><strong><code>Promise.all()</code>：</strong></p>
<p><code>Promise.all()</code> 用于处理多个 <code>Promise</code> 类型对象。<code>Promise.all()</code> 可以接收多个 Promise 类型对象作为输入，当所有输入的 Promise 类型对象的状态都为 Fulfilled 时，则返回一个状态为 Fulfilled 并且包含多个结果的 Promise 类型对象</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2, promise3]) <span class="comment">// 全部成功，状态 Fulfilled</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">    &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2, promise3, promise4]) <span class="comment">// 有一个失败，状态 Rejected</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span><br><span class="line">    &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// 4</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p><strong><code>Promise.race()</code>：</strong></p>
<p><code>Promise.race()</code> 用于处理多个 <code>Promise</code> 类型对象，并返回第一个完成( 成功或失败 )的 <code>Promise</code> 类型对象</p>
<p>即那个异步操作最先完成( 成功或失败 )就处理那个，其它没有完成的就不等了</p>
<h3 id="Promise-链式调用"><a href="#Promise-链式调用" class="headerlink" title="Promise 链式调用"></a>Promise 链式调用</h3><p>Promise 链式调用是指多个 Promise 类型对象通过 <code>.then()</code> 方法串联在一起的操作方式，从而避免了回调地狱的问题</p>
<p>每个 <code>.then()</code> 方法都会返回一个新的 Promise 类型对象，从而可以继续链式调用</p>
<p>你也可以手动返回一个 Promise 类型对象，如果手动返回的是一个非 Promise 类型对象，则也会将其包装为 Promise 类型对象返回</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟一个异步操作(假设)</span></span><br><span class="line">    <span class="keyword">const</span> success = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 操作成功</span></span><br><span class="line">        <span class="comment">// 这里默认返回 undefined, 会将其包装为 Promise 类型对象返回</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// undefined</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;OK&#x27;</span> <span class="comment">// 包装为 Promise 类型对象返回</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// OK</span></span><br><span class="line">        <span class="comment">// 显示的返回 Promise 类型对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Fail&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 集中处理错误</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error) <span class="comment">// &#x27;Fail&#x27;</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>



<h2 id="用-js-手写-Promise"><a href="#用-js-手写-Promise" class="headerlink" title="用 js 手写 Promise"></a>用 js 手写 Promise</h2><ul>
<li><strong>错误处理</strong>：Promise 提供了链式的 <code>.catch()</code> 方法，可以集中处理错误，避免在每个回调中重复处理错误</li>
</ul>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(七) 面向对象</title>
    <url>/posts/23b66728.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JavaScript 支持面向对象的编程范式，面向对象是一种对现实世界理解和抽象的方法</p>
<p>所谓对象通常是指客观世界中的真实存在的事物，实物，实象。例如：一支笔、一本书、一只鸟</p>
<p><strong>面向对象编程的三大特征：</strong></p>
<ul>
<li><p><strong>封装</strong>：只关心入口和出口，而不关心过程</p>
</li>
<li><p><strong>继承</strong>：指类与类之间的关系。如果两个类都有相同的属性或方法，那么可以让一个类继承于另类，这样就不需要在前者再次定义同样的属性或方法</p>
</li>
<li><p><strong>多态</strong>：不同的对象可以定义具有相同名称的方法，方法是作用于所在的对象中。这种不同对象通过相同方法的调用实现各自行为的能力，被称之为多态</p>
</li>
</ul>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数又可称为对象模版或类型对象，通过构造函数我们可以创建特定<strong>类型</strong>的对象( 实例 )</p>
<p>构造函数和普通函数的定义方式是一样的，通常为了区分，构造函数的名称首字母要求大写</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 名称([形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N])&#123;</span><br><span class="line">	<span class="comment">//constructor body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = <span class="keyword">new</span> 构造函数([实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N])</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">//方法需要添加到原型中以节省资源</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建实例 */</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaomei = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小美&quot;</span>, <span class="number">16</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">/* 输出实例 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming, xiaomei) <span class="comment">//输出：Person&#123;name: &#x27;小明&#x27;, ...&#125; Person&#123;name: &#x27;小美&#x27;, ...&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类是<strong>封装</strong>对象的属性和方法的<strong>载体</strong>。类定义了对象的特征，例如一辆汽车( 对象 )的名称、车型、重量、颜色等等都是这辆车的属性，而汽车的启动和停止则是这辆车的行为(方法)</p>
<p>类是面向对象编程中的一个基本的概念。实际上在 Js 中并没有类的概念❕，但 Js 通过构造函数和原型可以实现对类的支持</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><em>类是对象的抽象，而对象是类的具体实例</em></p>
<p>通过类所创建的对象称为该类的实例，例如上面案例中的对象<code>xiaoming</code>和<code>xiaomei</code>都是<code>Person</code>类的实例</p>
<h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>this是Js引擎在执行时自动定义的变量，其值会指向一个对象</p>
<ul>
<li><p>在全局作用域中访问this时，其值指向全局对象<code>window</code>(默认值)</p>
</li>
<li><p>在函数作用域中访问this时，根据 <strong>函数调用方式</strong> 的不同，this会指向不同的对象</p>
</li>
</ul>
<ol>
<li><p>以方法调用时，this会指向该方法所在的对象</p>
</li>
<li><p>以构造函数调用( <code>new 构造函数</code> )时，this会指向其所创建的实例对象</p>
</li>
</ol>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">xiaoming.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;myName is &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">xiaoming.<span class="title function_">sayName</span>(); <span class="comment">//执行结果：myName is 小明</span></span><br></pre></td></tr></table></figure>

<h3 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h3><p>使用new运算符来进行<strong>对象实例化</strong>（根据类创建对象的过程）</p>
<p>实例化的过程：</p>
<ol>
<li>创建一个空对象（即<code>&#123;&#125;</code>）</li>
<li>执行构造函数，执行前会先</li>
</ol>
<ul>
<li>将变量<code>this</code>的值指向步骤1中所创建的那个对象</li>
<li>并向对象中添加属性<code>__proto__</code>，将该属性的值指向构造函数的<strong>原型对象</strong>（<code>prototype</code>）</li>
</ul>
<ol start="3">
<li>构造函数执行完后，返回<strong>实例对象</strong>( 没有手动返回了一个对象的情况下，为步骤1中所创建的那个对象 )</li>
</ol>
</blockquote>
<h2 id="call、apply、bind-方法"><a href="#call、apply、bind-方法" class="headerlink" title="call、apply、bind 方法"></a>call、apply、bind 方法</h2><p><code>call</code>、<code>apply</code>、<code>bind</code> 是 <strong>Function类型对象</strong>( 函数 )中的方法，通过 <code>call()</code>、<code>apply()</code>、<code>bind()</code> 方法可以改变函数作用域中变量 this 的值</p>
<p><code>call()</code>的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">函数.<span class="title function_">call</span>(<span class="variable language_">this</span>的值, 实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N)</span><br></pre></td></tr></table></figure>

<p><code>apply()</code>的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">函数.<span class="title function_">apply</span>(<span class="variable language_">this</span>的值, [实参列表])</span><br></pre></td></tr></table></figure>

<p><code>bind()</code>的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">函数.<span class="title function_">bind</span>(<span class="variable language_">this</span>的值, 实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N)</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">number</span> = <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s1 = &#123;<span class="attr">number</span>: <span class="string">&#x27;tow&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">number</span>);</span><br><span class="line">&#125;</span><br><span class="line">change.<span class="title function_">apply</span>();         <span class="comment">//执行结果：one</span></span><br><span class="line">change.<span class="title function_">apply</span>(<span class="variable language_">window</span>);   <span class="comment">//执行结果：one</span></span><br><span class="line">change.<span class="title function_">apply</span>(<span class="variable language_">this</span>);     <span class="comment">//执行结果：one</span></span><br><span class="line">change.<span class="title function_">apply</span>(s1);       <span class="comment">//执行结果：tow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reply = <span class="variable language_">this</span>.<span class="property">animal</span> + <span class="string">&#x27;通常只睡&#x27;</span> + <span class="variable language_">this</span>.<span class="property">sleepDuration</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reply);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">animal</span>: <span class="string">&#x27;猫&#x27;</span>,</span><br><span class="line">  <span class="attr">sleepDuration</span>: <span class="string">&#x27;12～16个小时&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">greet.<span class="title function_">call</span>(obj);</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="call、apply、bind-的区别"><a href="#call、apply、bind-的区别" class="headerlink" title="call、apply、bind 的区别"></a>call、apply、bind 的区别</h3><p><code>call</code>、<code>apply</code>、<code>bind</code> 方法都包含一个<strong>对象</strong>( 严格模式下除外 )作为该方法的第1个参数，其后的参数会作为函数的实参。但在传参时，<code>apply()</code> 方法需要将实参以数组的形式传递至函数</p>
<p><code>call</code> 和 <code>apply</code> 方法会以指定的 this 的值调用一次该函数，而 <code>bind()</code> 方法会将其所在函数返回，不会自动调用</p>
<p>如果以上传入的第一个参数为 null 或 undefined 则不会改变函数作用域中 this 的值( 严格模式除外 )</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">c, d</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span> + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add.<span class="title function_">call</span>(s, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">//输出：10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add.<span class="title function_">apply</span>(s, [<span class="number">5</span>, <span class="number">6</span>])); <span class="comment">//输出：14</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>函数是一个包含属性和方法的 <strong>Function 类型</strong>的对象。而原型( <code>prototype</code> )就是 Function 类型对象的一个属性</p>
<p>js 中所有函数在定义时，js 引擎都会自动向函数中添加<code>prototype</code>属性，其值是一个 Object 类型的对象( <code>new Object()</code> )，称为原型对象( prototype对象 )，该对象有一个 constructor 属性指向该构造函数</p>
<p>当通过构造函数创建实例时，实例对象中会有一个隐藏的内部属性( <code>__proto__</code> )指向其构造函数的原型对象</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="原型链-Prototype-Chain"><a href="#原型链-Prototype-Chain" class="headerlink" title="原型链( Prototype Chain )"></a>原型链( Prototype Chain )</h3><p>每个实例对象都有一个私有属性（称之为<code>__proto__</code>）指向它的构造函数的原型对象（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的<code>__proto__</code>属性值为<code>null</code>为止。这种沿着<code>__proto__</code>属性的链式结构就称为原型链</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="comment">//this.xxx = xxx;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">a</span>, fun.<span class="property">b</span>); <span class="comment">//输出：123 undefined</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/k34869/public/image/20221112104157" alt="prototype"></p>
<p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象</p>
<p>当从对象中访问一个属性时会先在自身对象中查找</p>
<ul>
<li>如果没找到，则沿着<code>__proto__</code>这条链向上查找</li>
<li>如果依然没找到，则返回 undefined</li>
</ul>
<h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p>描述：获取指定对象的原型</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(对象)</span><br></pre></td></tr></table></figure>

<h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p>描述：设置指定对象的原型</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(对象, 原型)</span><br></pre></td></tr></table></figure>

<h3 id="obj-hasOwnProperty"><a href="#obj-hasOwnProperty" class="headerlink" title="obj.hasOwnProperty()"></a>obj.hasOwnProperty()</h3><p>描述：检测对象中的属性是否存在( 不包括原型中的属性，检测原型中的属性可以用 in 运算符 )，存在则返回 true，反之则为 false</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象.<span class="title function_">hasOwnProperty</span>(属性名) <span class="comment">//属性名为一个字符串</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>JavaScript 是基于原型实现的继承，和其它传统的基于类的语言( 如 Java 或 C++ )相比，Js 显得比较独特</p>
<h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>核心：将父类实例作为子类原型</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;My is a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ca</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">b</span> = <span class="string">&#x27;My is b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>(); <span class="comment">//子类的prototype指向父类的实例对象</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = B; <span class="comment">//修正构造函数指向</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：原型链虽然很强大，用它可以实现 JavaScript 中的继承，但同时也存在着一些问题。原型链继承实际上是在多个构造函数或对象之间共享属性和方法，这种方法在创建子类的对象时，不能向父类的构造函数传递任何参数</p>
</blockquote>
<h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><p>核心：借用父类构造函数来增强子类实例，等于复制父类实例的属性给子类</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ca</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">b</span>)&#123;</span><br><span class="line">    A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment">//调用父类构造函数，并绑定 this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：借用构造函数继承就是通过 <code>apply()</code> 或 <code>call()</code> 方法在子类构造函数中调用父类的构造函数，并将父类和子类的 this 绑定在一起，这种方式可以向父类传递参数，但不能实现方法的复用</p>
</blockquote>
<h3 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h3><p>核心：通过调用父类构造函数来实现向父类构造函数传递参数，然后通过将父类实例作为子类原型来实现方法复用</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cs</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">b</span>)&#123;</span><br><span class="line">    A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment">//调用父类构造函数，并绑定 this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> A; <span class="comment">//子类的prototype指向父类的实例对象</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = B; <span class="comment">//修正构造函数指向</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：组合继承是将原型链继承和借用构造函数的技术组合在一起，发挥二者长处的一种继承方式，这样，既通过在原型上定义方法实现了方法的复用，又可以保证每个对象都有自己的专有属性，但这种方法，会调用2次父类的构造函数，因此会存在一份多余的实例属性</p>
</blockquote>
<h3 id="组合寄生式继承"><a href="#组合寄生式继承" class="headerlink" title="组合寄生式继承"></a>组合寄生式继承</h3><p>核心：通过调用父类构造函数来实现向父类构造函数传递参数，然后通过将父类原型作为新对象的原型，并将新对象赋值给子类原型来实现方法复用，并且避免了多余的实例属性</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cs</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">b</span>)&#123;</span><br><span class="line">    A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment">//调用父类构造函数，并绑定 this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(A.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//将父类原型作为新对象的原型，并将新对象赋值给子类原型</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="父类和子类"><a href="#父类和子类" class="headerlink" title="父类和子类"></a><span title="基类">父类</span>和子类</h3><p>继承的类称为子类，被继承的类称为父类，子类具有父类的全部属性和方法，但父类不能拥有子类的属性和方法</p>
<h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否在某个实例对象的原型链上，如果在，则返回 true，反之返回 false</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 构造函数</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">D</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">o <span class="keyword">instanceof</span> C; <span class="comment">//返回true</span></span><br><span class="line">o <span class="keyword">instanceof</span> D; <span class="comment">//返回false</span></span><br><span class="line">C.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">//返回true</span></span><br><span class="line">D.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">C</span>(); <span class="comment">//继承</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title function_">D</span>();</span><br><span class="line">o2 <span class="keyword">instanceof</span> D; <span class="comment">//返回true</span></span><br><span class="line">o2 <span class="keyword">instanceof</span> C; <span class="comment">//返回true</span></span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6教程（上）</title>
    <url>/posts/1f1de31d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ES6 是 ECMAScript 的第 6 个版本。它与 2015 年 6 月正式发布，正式名称为 ECMAScript 2015，通常 ES6 泛指 ECMAScript 2015 及其后续的版本</p>
<blockquote>
<p>ECMAScript 是一种由 ECMA 国际（前身为欧洲计算机制造商协会，英文：European Computer ManufacturersAssociation）通过 <a href="https://tc39.es/ecma262/">ECMA-262</a> 标准化的脚本程序设计语言，它定义了该脚本语言的各种元素、结构、语法、运算符等等。而 JavaScript 则是该标准的具体实现</p>
</blockquote>
<h2 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h2><p><strong><code>let</code></strong> 允许你声明一个作用域被限制在<strong>块</strong>( <code>&#123;&#125;</code> )中的变量。与 <code>var</code> 关键字不同的是，<code>let</code> 声明的变量不会在作用域中被提升</p>
<p>let 声明与 var 声明的区别：</p>
<table>
<thead>
<tr>
<th>特点</th>
<th><code>var</code> 声明</th>
<th><code>let</code> 声明</th>
</tr>
</thead>
<tbody><tr>
<td>变量提升</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>作用域</td>
<td>函数级作用域</td>
<td>块级作用域</td>
</tr>
<tr>
<td>重复声明</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>全局对象</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody></table>
<p><strong>变量提升：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 无变量提升 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//报错：ReferenceError: age is not defined</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">38</span>;</span><br></pre></td></tr></table></figure>

<p><strong>作用域：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 块级作用域 */</span></span><br><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">let</span> a = <span class="number">666</span>; <span class="comment">// 我是局部变量a</span></span><br><span class="line">	&#123;</span><br><span class="line">    	<span class="keyword">let</span> b = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 666</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 报错：ReferenceError: b is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>()</span><br></pre></td></tr></table></figure>

<p><strong>重复声明：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 同一个变量不可重复声明(同一作用域内) */</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">//报错：SyntaxError: Identifier &#x27;num&#x27; has already been declared</span></span><br></pre></td></tr></table></figure>

<p><strong>全局对象：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 不会在全局对象中创建属性或方法 */</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>, a) <span class="comment">//输出：undefined 666</span></span><br></pre></td></tr></table></figure>

<h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p><code>const</code> 关键字用于声明一个常量，其特点和 <code>let</code> 声明一样（存在块作用域），但常量的值是无法（通过重新赋值）改变的</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fav = <span class="number">7</span>;</span><br><span class="line">fav = <span class="number">20</span>; <span class="comment">//报错：TypeError: Assignment to constant variable</span></span><br><span class="line"><span class="comment">//如果重新声明也会报错</span></span><br><span class="line"><span class="keyword">const</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//SyntaxError: Identifier &#x27;fav&#x27; has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>; <span class="comment">//可以读写对象或数组中的属性</span></span><br><span class="line">obj = &#123;&#125;; <span class="comment">//改变obj的值(原始值 or 引用值)还是会报错</span></span><br></pre></td></tr></table></figure>

<h2 id="模版字符串（Template-strings）"><a href="#模版字符串（Template-strings）" class="headerlink" title="模版字符串（Template strings）"></a>模版字符串（<em>Template strings</em>）</h2><p>模板字符串 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mutLineStr = <span class="string">`string line1</span></span><br><span class="line"><span class="string">string line2`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mutLineStr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">string line1</span></span><br><span class="line"><span class="comment">string line2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> author = <span class="string">&quot;李白&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> mustache = <span class="string">`</span></span><br><span class="line"><span class="string">静夜思</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;author&#125;</span></span></span><br><span class="line"><span class="string">xxx</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mustache)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静夜思</span></span><br><span class="line"><span class="comment">    李白</span></span><br><span class="line"><span class="comment">xxx</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="对象字面量增强"><a href="#对象字面量增强" class="headerlink" title="对象字面量增强"></a>对象字面量增强</h2><p>相对于 ES5，ES6 的对象字面量得到了很大程度的增强。这些改进使 JavaScript 代码更加简洁同时更易于理解</p>
<h3 id="对象属性简写"><a href="#对象属性简写" class="headerlink" title="对象属性简写"></a>对象属性简写</h3><p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  <span class="attr">type</span>: type,</span><br><span class="line">  <span class="attr">heat</span>: heat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music);  <span class="comment">// Object &#123;type: &quot;rock&quot;, heat: &quot;50%&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6改写 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  type,</span><br><span class="line">  heat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music);  <span class="comment">// Object &#123;type: &quot;rock&quot;, heat: &quot;50%&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="对象方法简写"><a href="#对象方法简写" class="headerlink" title="对象方法简写"></a>对象方法简写</h3><p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  <span class="attr">type</span>: type,</span><br><span class="line">  <span class="attr">heat</span>: heat,</span><br><span class="line">  <span class="attr">description</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;当前音乐风格为&#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27;,&#x27;</span> + <span class="variable language_">this</span>.<span class="property">heat</span> + <span class="string">&#x27;都喜欢&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music.<span class="title function_">description</span>()); <span class="comment">// 当前音乐风格为rock,50%都喜欢</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6改写 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  type,</span><br><span class="line">  heat,</span><br><span class="line">  <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`当前音乐风格为<span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.heat&#125;</span>都喜欢`</span>; <span class="comment">//使用模板字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music.<span class="title function_">description</span>()); <span class="comment">// 当前音乐风格为rock,50%都喜欢</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：使用 ES6 简写的方法不能作为构造函数来调用( <code>new</code> )，否则将会报错</p>
</blockquote>
<h3 id="展开语法（Spread-syntax）"><a href="#展开语法（Spread-syntax）" class="headerlink" title="展开语法（Spread syntax）"></a>展开语法（<em>Spread syntax</em>）</h3><p>展开语法 可以在创建<strong>字面量</strong>对象/数组时，将对象/数组在语法层面展开</p>
<p><strong>1.对象展开：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> chinese = &#123;</span><br><span class="line">    <span class="attr">skin</span>: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    <span class="attr">hair</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you ok?&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">CXK</span> = &#123;</span><br><span class="line">    <span class="attr">slill</span>: <span class="string">&quot;jump sing rap and play basketball&quot;</span>,</span><br><span class="line">    <span class="attr">song</span>: <span class="string">&quot;啊哈哈哈&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> linge = &#123;</span><br><span class="line">    ...chinese,</span><br><span class="line">    ...<span class="variable constant_">CXK</span>,</span><br><span class="line">    <span class="comment">// 展开语法 等同于下面写法</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    	skin: &quot;yellow&quot;,</span></span><br><span class="line"><span class="comment">    	hair: &quot;black&quot;,</span></span><br><span class="line"><span class="comment">    	sayHi() &#123;</span></span><br><span class="line"><span class="comment">    	  console.log(&quot;Are you eat?&quot;);</span></span><br><span class="line"><span class="comment">    	&#125;,</span></span><br><span class="line"><span class="comment">    	slill: &quot;jump sing rap and play basketball&quot;,</span></span><br><span class="line"><span class="comment">    	song: &quot;啊哈哈哈&quot;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(linge);</span><br></pre></td></tr></table></figure>

<p><strong>2.数组展开：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2, <span class="number">70</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// [10, 20, 30, 40, 50, 60, 70]</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">23</span>, <span class="number">54</span>, <span class="number">446</span>, <span class="number">56</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 446</span></span><br></pre></td></tr></table></figure>

<h3 id="解构赋值（Destructuring）"><a href="#解构赋值（Destructuring）" class="headerlink" title="解构赋值（Destructuring）"></a>解构赋值（<em>Destructuring</em>）</h3><p><strong>解构赋值</strong> 可以将属性/值从对象/数组中取出，并赋值给其它变量</p>
<p><strong>1.数组的解构赋值：</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//a, b, c是从右边数组中按照 位置(,逗号分隔) 提取并赋值的3个变量(位置匹配)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">//输出：1 2 3</span></span><br><span class="line"><span class="keyword">let</span> [ , y, z] = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z) <span class="comment">// undefined (z在右边数组中没有元素对应，则会将 undefined 赋值给变量z)</span></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]; <span class="comment">//等号(=)两边的结构要保持一致，才能取到嵌套的数组中的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, d) <span class="comment">// 1 2 4</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x]; <span class="comment">//交换变量的值</span></span><br><span class="line"><span class="comment">/* 例3 */</span></span><br><span class="line"><span class="keyword">let</span> [a=<span class="number">5</span>, b=<span class="number">7</span>] = [<span class="number">1</span>]; <span class="comment">//a=5, b=7为变量a, b的默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 7 (b在右边数组中没有元素对应，所以使用默认值 7 赋值给变量b，而不是undefined)</span></span><br><span class="line"><span class="comment">/* 例4 */</span></span><br><span class="line"><span class="keyword">let</span> [v, m, n] = <span class="string">&quot;大前端&quot;</span>;</span><br><span class="line"><span class="comment">//如果等号右边的是一个字符串，则字符串会作为一个 类数组对象(String类型对象) 进行解构赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v, m, n); <span class="comment">// 大 前 端</span></span><br></pre></td></tr></table></figure>

<p><strong>2.对象的解构赋值：</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> &#123;x, y, z = <span class="number">100</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">//x, y, z是从右边对象中按照 名称 提取并赋值的3个变量(名称匹配)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z) <span class="comment">// 100 (z在右边对象中没有属性对应，则会使用默认值 100 赋值给变量z)</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="comment">//在上一个例子中变量必须与属性同名，才能取到正确的值，如果要单独指定变量名，可以使用下面的语法</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">a</span>: num1 = <span class="number">10</span>, <span class="attr">b</span>: num2 = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;; <span class="comment">//指定变量名并提供默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">/* 例3 */</span></span><br><span class="line"><span class="comment">//对于嵌套结构的对象，可以使用下面的语法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">p</span>: [</span><br><span class="line">    <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// &quot;World&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p) <span class="comment">// [&quot;Hello&quot;, &#123;y: &quot;World&quot;&#125;]</span></span><br><span class="line"><span class="comment">/* 例4 */</span></span><br><span class="line"><span class="comment">//如果等号右边的是一个数值或布尔值，则会将其先转成对象，再进行解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>; <span class="comment">//Number类型对象</span></span><br><span class="line">s === <span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>; <span class="comment">//Boolean类型对象</span></span><br><span class="line">s === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><strong>4.函数参数的解构赋值：</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">&#123; name, age, gender, height = <span class="number">180</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, gender, height);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;波波&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">test2</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;波波&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">160</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>PS：解构赋值语法实际上是一种 模式匹配 + 变量赋值 的混合，只要等号两边的模式相同，左边的变量就会被赋予对应的值</p>
<p>如：<code>p: [x, &#123; y &#125;]</code> 模式中 p 是模式匹配，但不是变量赋值，而 x 和 y 是模式匹配 + 变量赋值</p>
<h2 id="箭头函数（Arrow-function）"><a href="#箭头函数（Arrow-function）" class="headerlink" title="箭头函数（Arrow function）"></a>箭头函数（<em>Arrow function</em>）</h2><p>箭头函数 是对函数表达式( 匿名函数 )的一种简写形式</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 函数名 = <span class="function">(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span> ... 形参N</span>) =&gt;</span> &#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">简写规则：</span></span><br><span class="line"><span class="comment">  1. function 关键字改成 =&gt;</span></span><br><span class="line"><span class="comment">  2. 如果只有一个形参，那就可以省略形参小括号 ()</span></span><br><span class="line"><span class="comment">  3. 如果不只一个形参( 0 个或多个 )，那就不能省略形参小括号</span></span><br><span class="line"><span class="comment">  4. 如果函数体只有一句话，那就可以省略函数体的大括号 &#123;&#125;</span></span><br><span class="line"><span class="comment">  5. 如果函数体只有一句话，并且这一句话是 return 语句，那 return 关键字也可以省略</span></span><br><span class="line"><span class="comment">  6. 如果函数体不是一句话，那就不能省略这个大括号</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> name + <span class="string">&quot;你好吗?&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = name =&gt; name + <span class="string">&quot;你好吗?&quot;</span>;</span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">let</span> fn5 = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> age + <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn5</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> age + <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>函数形参可以指定一个初始值，当该形参没有传递实参时则该参数的值就是初始值( 默认值 )</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b = <span class="number">10</span></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">10</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<h3 id="剩余参数（Rest-Parameters）"><a href="#剩余参数（Rest-Parameters）" class="headerlink" title="剩余参数（Rest Parameters）"></a>剩余参数（<em>Rest Parameters</em>）</h3><p>如果函数的最后一个形参以<code>...</code>为前缀，则它将成为一个由剩余参数组成的数组</p>
<p>在箭头函数中不能通过 <code>arguments</code> 来获取实参</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params">...theArgs</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(theArgs.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">multiplier, ...theArgs</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> theArgs.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> multiplier * element;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h3><p>箭头函数中的 <code>this</code> 变量由上下文环境决定，而不是由 <code>new</code> 关键字来决定，因此箭头函数不能做为构造函数( new )来调用</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Fn</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="string">&#x27;超哥&#x27;</span>, <span class="number">20</span>) <span class="comment">// TypeError: Fn is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">persons</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;波波&#x27;</span>,</span><br><span class="line">        <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是1：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">            <span class="comment">// 上文环境</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是2：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是3：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">                &#125;, <span class="number">1000</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">            <span class="comment">// 下文环境</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure>

<h2 id="class-关键字"><a href="#class-关键字" class="headerlink" title="class 关键字"></a>class 关键字</h2><p>ES6 提供了 class 关键字，用来定义一个类</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用class声明语句来定义一个类 */</span></span><br><span class="line"><span class="keyword">class</span> 名称 [<span class="keyword">extends</span>] &#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用class表达式来定义一个类 */</span></span><br><span class="line"><span class="keyword">const</span> 名称 = <span class="keyword">class</span> [名称] [<span class="keyword">extends</span>] &#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class 声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle2</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>); <span class="comment">// Rectangle2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class 表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Rectangle</span> = <span class="keyword">class</span> &#123; <span class="comment">// 匿名类必须赋值到变量，变量名将成为匿名类的名称</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>); <span class="comment">// Rectangle</span></span><br></pre></td></tr></table></figure>

<h3 id="类-class"><a href="#类-class" class="headerlink" title="类( class )"></a>类( class )</h3><p>JavaScript 语言中，创建实例对象的传统方法是通过构造函数，如果要实现继承则需要借助原型</p>
<p>而 ES6 中的 class 依然是建立在原型上的，因此 ES6 中的 class 可以看作是一个语法糖，它使 JavaScript 在语法上更像面向对象</p>
<p>Js 中使用 class 声明的类，实质上是一种特殊的函数，它只能使用 <code>new</code> 关键字来调用，并且 class 声明不会有提升</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Point</span>); <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span> === <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面的案例可以看出Point类指向该类的构造函数</span></span><br><span class="line"><span class="comment">并且typeof检查Point类时也返回 function</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>PS：class 中的代码都执行在严格模式( strict mode )下。比如，构造函数，静态方法，原型方法，getter 和 setter 都在严格模式下执行</p>
<h3 id="构造方法-constructor"><a href="#构造方法-constructor" class="headerlink" title="构造方法( constructor )"></a>构造方法( constructor )</h3><p>constructor 是类中的一个特殊的方法，该方法用于创建和初始化一个由<code>class</code>创建的对象</p>
<p>一个类中只能有一个名为 “constructor” 的特殊方法。类中出现多个构造函数( constructor )方法将会抛出一个 SyntaxError 错误</p>
<p>如果没有指定构造函数( constructor )方法，则会使用一个默认的构造函数( constructor )来初始化实例</p>
<h3 id="实例属性-原型方法"><a href="#实例属性-原型方法" class="headerlink" title="实例属性 / 原型方法"></a>实例属性 / 原型方法</h3><p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  bar = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 实例属性bar</span></span><br><span class="line">  baz = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 实例属性baz</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123; <span class="comment">// 原型方法，该方法会添加在原型prototype中</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.bar&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.baz&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>).<span class="title function_">print</span>(); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>

<p>在 ES5 中要给实例对象添加属性需要在构造函数或方法内使用 this 来添加，如果要添加方法则会将方法添加构造函数的原型prototype上。而上面的写法相比 ES5 的写法更加简洁，一眼就能看出，<code>Foo</code>类有两个实例属性和一个原型方法</p>
<h3 id="getter-amp-setter-存取值方法"><a href="#getter-amp-setter-存取值方法" class="headerlink" title="getter &amp; setter ( 存取值方法 )"></a>getter &amp; setter ( 存取值方法 )</h3><p>在“类”的内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line">inst.<span class="property">prop</span> = <span class="number">123</span>; <span class="comment">// setter: 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inst.<span class="property">prop</span>) <span class="comment">// &#x27;getter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">  v = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">getV</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">v</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">setV</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">getV</span>); <span class="comment">// 100</span></span><br><span class="line">obj.<span class="property">setV</span> = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">getV</span>); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure>

<h3 id="静态属性-静态方法"><a href="#静态属性-静态方法" class="headerlink" title="静态属性 / 静态方法"></a>静态属性 / 静态方法</h3><p>如果在一个属性或方法前，加上<code>static</code>关键字，则该属性或方法将不会被添加到实例上，它是直接通过类来访问或调用</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">prop</span> = <span class="number">1</span> <span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">classMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property">prop</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> prop = <span class="number">1</span>; <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123; <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">prop</span>) <span class="comment">// 静态方法中的 this 指向该类</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">foo.<span class="title function_">classMethod</span>() <span class="comment">// 报错：实例上找不到该方法</span></span><br></pre></td></tr></table></figure>

<h2 id="extends-关键字"><a href="#extends-关键字" class="headerlink" title="extends 关键字"></a>extends 关键字</h2><p>extends 关键字 用于创建一个类作为另一个类的一个子类</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;&#125; <span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123; <span class="comment">// 子类继承父类</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">// 调用父类的构造函数constructor，用来初始化子类</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>class 可以通过<code>extends</code>关键字实现继承，让子类继承父类的属性和方法</p>
<p>当子类继承某个父类时，子类必须先在<code>constructor</code>方法中使用<code>super()</code>来调用父类构造函数，否则就会报错</p>
<p>这是因为<code>extends</code>关键字在继承时，子类的实例需要通过父类得到。在调用<code>super()</code>方法时，会先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，因此如果不调用<code>super()</code>方法，子类就得不到自己的<code>this</code>对象</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> s = <span class="string">&#x27;static&#x27;</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="variable language_">super</span>(x, y);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color; <span class="comment">// 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ColorPoint</span>.<span class="property">s</span>, <span class="title class_">ColorPoint</span>.<span class="property">__proto__</span> === <span class="title class_">Point</span>) <span class="comment">// static true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6教程（下）</title>
    <url>/posts/1b0ecf0b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ES6新增方法"><a href="#ES6新增方法" class="headerlink" title="ES6新增方法"></a>ES6新增方法</h2><p>数组新增方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>原数组</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_foreach.asp">.forEach()</a></td>
<td>按顺序为数组中的每个元素调用一次指定的函数（遍历数组）</td>
<td>不改变</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h2><p>Symbol 是 ES6 新增的一种基本数据类型，它表示独一无二的值( Symbol 值 )，Symbol 类型的值可以作为对象的属性名，它保证每个属性的名字都是独一无二的，不会出现因属性重名而冲突的问题，这也是该数据类型仅有的目的</p>
<p>Symbol 值通过<code>Symbol()</code>函数得到，一个<code>Symbol()</code>函数返回一个 Symbol 值</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s); <span class="comment">// &#x27;symbol&#x27;</span></span><br></pre></td></tr></table></figure>

<p><code>Symbol()</code> 函数不能通过<code>new Symbol()</code>来调用，这是因为 Symbol 类型是一个基本数据类型，而非对象，因此无需使用 new 来调用，不过 Js 引擎会将 Symbol 值包装成 Symbol 类型对象( 临时对象 )来使用</p>
<p><code>Symbol()</code>函数可以接受一个字符串作为参数，表示对 Symbol 值的描述，这样在输出 Symbol 值时，比较容易区分</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1, s1.<span class="title function_">toString</span>()); <span class="comment">// Symbol(foo) &#x27;Symbol(foo)&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2, s2.<span class="title function_">toString</span>()); <span class="comment">// Symbol(bar) &#x27;Symbol(bar)&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>属性：</p>
<ul>
<li><p><code>description</code></p>
<p>描述：获取 Symbol 值的描述</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym.<span class="property">description</span>); <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>Symbol 值可以作为对象的属性名，这样就能保证不会出现同名的属性</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[symbol] = <span class="string">&#x27;Hello!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [symbol]: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, symbol, &#123; <span class="attr">value</span>: <span class="string">&#x27;Hello!&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[symbol]); <span class="comment">// &quot;Hello!&quot;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	注意：使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中使用</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>Symbol值作为属性名时，需要注意两点：</p>
<ol>
<li>使用 Symbol 值定义属性时，Symbol 值必须放在方括号( <code>[]</code> )之中使用</li>
<li>遍历对象的时候，Symbol 属性名不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回</li>
</ol>
<p>如果要想从对象中获取 Symbol 属性名，可以使用<code>Object.getOwnPropertySymbols()</code>方法，该方法会返回对象中所有 Symbol 属性名</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">Symbol</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">obj[a] = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">obj[b] = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj); <span class="comment">// 返回一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols); <span class="comment">// [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure>

<h2 id="Iterator-迭代器"><a href="#Iterator-迭代器" class="headerlink" title="Iterator 迭代器"></a>Iterator 迭代器</h2><p>迭代器是一个符合<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">迭代器协议</a>的对象，它提供了顺序遍历的机制。允许你依次访问一个容器( 例如：数组、字符串、Set、Map 等 )中的每一个元素，而无需了解容器的内部结构</p>
<p>迭代器对象需要具有一个 <code>next()</code> 方法，该方法返回一个对象，需包含两个属性：</p>
<ul>
<li><code>value</code>：当前迭代的值</li>
<li><code>done</code>：一个布尔值，表示迭代是否结束。<code>done</code> 为 <code>true</code> 表示迭代结束</li>
</ul>
<h3 id="Iterrable-可迭代对象"><a href="#Iterrable-可迭代对象" class="headerlink" title="Iterrable 可迭代对象"></a>Iterrable 可迭代对象</h3><p>可迭代对象是实现了 <code>@@iterator</code> 方法的对象。一个对象如果具有 <code>Symbol.iterator</code> 属性（即具有一个默认的迭代器方法），它就是可迭代的。常见的可迭代对象包括：数组、字符串、<code>Set</code>、<code>Map</code>、<code>arguments</code> 对象等</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = array[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在这个例子中，数组 array 是可迭代的对象。通过调用 array[Symbol.iterator]()，我们得到一个迭代器对象。每次调用 iterator.next()，它返回集合中的下一个值和 done 状态</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h3><p><code>for...of</code> 循环是一种简化的方式来遍历可迭代对象，内部使用了 <code>Iterator</code>。它自动处理 <code>next()</code> 的调用，直到 <code>done</code> 为 <code>true</code> 为止</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 依次输出 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a><code>Symbol.iterator</code></h3><p><code>Symbol.iterator</code> 是一个特殊的符号，定义了对象的默认迭代器方法。实现了 <code>Symbol.iterator</code> 的对象被认为是可迭代的，可以用 <code>for...of</code> 来遍历，JavaScript 中的内置类型，如数组、字符串、<code>Map</code>、<code>Set</code> 等，默认具有迭代器方法，如果没有我们可以手动创建迭代器方法( <code>Symbol.iterator</code> )</p>
<p><strong>手动创建对象的迭代器方法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> customIterable = &#123;</span><br><span class="line">  <span class="attr">values</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> values = <span class="variable language_">this</span>.<span class="property">values</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; values.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: values[index++], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> customIterable) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 依次输出 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Generator-生成器"><a href="#Generator-生成器" class="headerlink" title="Generator 生成器"></a>Generator 生成器</h2><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><p>Set 是 ES6 新增的一种数据结构，它是一种无重复的集合，类似于数组</p>
<p>Set 类型中的值是唯一的，即使向 Set 类型重复添加相同的值，也只会保留一个</p>
<p>常用方法和属性：</p>
<ul>
<li><code>add(value)</code>：向 Set 类型中添加一个值</li>
<li><code>delete(value)</code>：从 Set 类型中删除一个值</li>
<li><code>has(value)</code>：判断 Set 类型中是否包含某个值</li>
<li><code>clear()</code>：清空 Set 类型</li>
<li><code>size</code>：返回 Set 类型中的值的个数</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="comment">// Set 函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s, s.<span class="property">size</span>) <span class="comment">// &#123;1, 2, 3, 4, 5&#125; 5</span></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line">arr = [...s]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="comment">// 字符串去重</span></span><br><span class="line"><span class="keyword">let</span> str = [...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// abc</span></span><br></pre></td></tr></table></figure>

<p>遍历方法：</p>
<ul>
<li><code>keys()</code>：返回键名的遍历器</li>
<li><code>values()</code>：返回值的遍历器</li>
<li><code>entries()</code>：返回键值对的遍历器</li>
<li><code>forEach()</code>：使用回调函数遍历每个成员</li>
</ul>
<p><code>keys</code> 方法、<code>values</code> 方法、<code>entries</code> 方法返回的都是遍历器对象（详见 Iterator 遍历器）。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以 <code>keys</code> 方法和 <code>values</code> 方法的行为完全一致</p>
<p>例：</p>
<h2 id="Map-类型"><a href="#Map-类型" class="headerlink" title="Map 类型"></a>Map 类型</h2><h2 id="ES6-模块化-Module"><a href="#ES6-模块化-Module" class="headerlink" title="ES6 模块化( Module )"></a>ES6 模块化( <em>Module</em> )</h2><p>在 ES6 中引入的标准化模块系统，它允许开发者将代码分割成独立的模块，并通过导入和导出机制来组织和重用代码。在这之前，JavaScript 一直没有模块（module）系统，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于 Node.js 环境，后者用于浏览器环境</p>
<h3 id="导出与导入-export-amp-import"><a href="#导出与导入-export-amp-import" class="headerlink" title="导出与导入( export &amp; import )"></a>导出与导入( <code>export</code> <em>&amp;</em> <code>import</code> )</h3><p>在浏览器环境中，模块就是一个被 ES6 模块化系统所管理的 JavaScript 文件或代码，你可以使用 <code>export</code> 关键字从一个模块中导出变量、函数或类，如果要在别的模块中使用该模块导出的内容，可以使用 <code>import</code> 关键字从其他模块中导入</p>
<p><strong>具名导出与导入：</strong></p>
<p>可以在一个模块中导出多个变量、函数、类等。每个导出的名称都是明确指定的，在导入时，可以选择性地导入所需的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* module1.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别导出（可导出 var、let、const、function、class）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> n = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一导出, 导出时还可以通过 as 关键字来重命名导出</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">P</span> &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="variable constant_">PI</span>, P <span class="keyword">as</span> <span class="title class_">Person</span> &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* module2.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入时还可以通过 as 关键字来重命名导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; n, fun <span class="keyword">as</span> fn, <span class="variable constant_">PI</span>, <span class="title class_">Person</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n, fn, <span class="variable constant_">PI</span>, <span class="title class_">Person</span>) <span class="comment">// 1.4142135623730951 fun() &#123;&#125; 3.14 class P &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./module2.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>默认导出与导入：</strong></p>
<p>一个模块只能有一个默认导出。它通常用来导出模块的主要功能或值，在导入时，不需要使用花括号，并且可以自定义导入的名称( 名称在导入时决定 )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* utils.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个 js 文件中只能有一个默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"><span class="keyword">import</span> farewell <span class="keyword">from</span> <span class="string">&#x27;./utils.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">farewell</span>() <span class="comment">// Goodbye!</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>组合导出与导入：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* shapes.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pi = <span class="number">3.14159</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">area</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> pi * <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Circle</span>, &#123; pi &#125; <span class="keyword">from</span> <span class="string">&#x27;./shapes.js&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> myCircle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCircle.<span class="title function_">area</span>()); <span class="comment">// 78.53975</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi); <span class="comment">// 3.14159</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>导入所有：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 module.js 导出的所有内容作为对象属性保存在变量 m 中</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>模块的使用方式</p>
<p>在 HTML 中使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签来告诉浏览器这是一个模块文件。浏览器会自动识别并处理模块中的依赖关系和导入导出。在 Web浏览器中你需要通过 Web 服务器去运行，这是因为浏览器需要通过 HTTP 协议并且会按照 CORS 规则来访问</p>
</li>
<li><p>模块是独立作用域的</p>
<p>每个模块都有自己的作用域，不会污染全局命名空间。模块内的变量、函数、类等，默认是模块私有的，只有通过 <code>export</code> 导出才能被其他模块访问</p>
</li>
<li><p>模块自动采用严格模式</p>
<p>无需手动指定 <code>&quot;use strict&quot;</code>，模块文件会自动在严格模式下运行</p>
</li>
<li><p>异步加载</p>
<p>浏览器会异步加载模块文件，这意味着不会阻塞页面的渲染。即使使用 <code>import</code> 来加载多个模块，浏览器也会并行下载这些模块，优化性能</p>
</li>
<li><p>模块的静态的</p>
<p><code>import</code> 和 <code>export</code> 是静态的，也就是说，它们必须在模块的顶层使用，不能在条件语句或函数中。</p>
<p>这样编译器可以提前分析模块的依赖关系，进行优化，如 tree-shaking</p>
</li>
</ul>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性</p>
<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><h2 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h2>]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(三) 运算符与表达式</title>
    <url>/posts/ca7331ed.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>运算符又称为操作符，运算符就是用于对数据进行各种运算的符号，JavaScript 有算术运算符、赋值运算符、关系运算符等</p>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>算数运算符包括 加(<code>+</code>) 减(<code>-</code>) 乘(<code>*</code>) 除(<code>/</code>)和 取模(<code>%</code>) 运算符，对于非Number类型的数据值进行算数运算时，会将这些值转换为Number类型然会在运算，其中任何数据类型的值和 NaN 做运算都得 NaN</p>
<ul>
<li><code>+</code>可以对两个值进行加法运算，并将结果返回</li>
<li><code>- </code>可以对两个值进行减法运算，并将结果返回</li>
<li><code>*</code>可以对两个值进行乘法运算，并将结果返回</li>
<li><code>/ </code>可以对两个值进行除法运算，并将结果返回</li>
<li><code>%</code>可以对两个值进行取模运算（取余数），并将结果返回</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>+<span class="number">100</span>); <span class="comment">//输出：200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>-<span class="literal">true</span>); <span class="comment">//输出：1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>*<span class="title class_">NaN</span>); <span class="comment">//输出：NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串加法运算"><a href="#字符串加法运算" class="headerlink" title="字符串加法运算"></a>字符串加法运算</h3><p>运算关系：</p>
<ul>
<li>任何数据类型的值与字符串相加时会先将其转换为字符串，然后将两个字符串拼接成一个字符串( 拼串 )</li>
<li>我们可以让任意的数据类型<code>+&quot;&quot;</code>( 空串 )使其转换为字符串( 隐式转换 )</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> + <span class="string">&quot;1&quot;</span>); <span class="comment">//输出：&quot;1231&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;年龄：&quot;</span> + <span class="string">&quot;20&quot;</span>); <span class="comment">//输出：&quot;年龄：20&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> + <span class="string">&quot; 20&quot;</span>); <span class="comment">//输出：&quot;NaN 20&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span> + <span class="string">&quot;&quot;</span>); <span class="comment">//输出：&quot;200&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>加号还可以用来连接下一行的表达式</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;锄禾日当午，&quot;</span> +</span><br><span class="line">		  <span class="string">&quot;汗滴禾下土。&quot;</span> +</span><br><span class="line">		  <span class="string">&quot;谁吃盘中餐，&quot;</span> +</span><br><span class="line">		  <span class="string">&quot;粒粒皆辛苦。&quot;</span>);    <span class="comment">//输出：&quot;锄禾日当午，汗滴禾下土。谁吃盘中餐，粒粒皆辛苦。&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符 ( = )"></a>赋值运算符 ( = )</h2><p>可以将等号右边的值赋值给等号左边的变量中，但要注意变量一定要先声明，在赋值</p>
<p><strong>语法：</strong> <code>变量名 = 5 * 10;</code></p>
<h3 id="复合运算："><a href="#复合运算：" class="headerlink" title="复合运算："></a>复合运算：</h3><p><code>a+=5</code> 等同于 <code>a = a + 5</code></p>
<p><code>a-=5</code> 等同于 <code>a = a - 5</code></p>
<p><code>a*=5 </code> 等同于 <code>a = a * 5</code></p>
<p><code>a/=5 </code> 等同于 <code>a = a / 5</code></p>
<p><code>a%=5 </code> 等同于 <code>a = a % 5</code></p>
<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>上面的运算符中都有两个操作数，所以它们也叫二元运算符，如果只有一个操作数那它就是一元运算符</p>
<p>带 <code>+</code> 号的数即正数，带 <code>-</code> 号的数即负数，正号(<code>+</code>)不会对数字产生任何影响，如果在非Number数据类型的值前加上正号(<code>+</code>)即可将其转换为Number类型( 隐式转换 )</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a = +a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出：1</span></span><br></pre></td></tr></table></figure>

<h3 id="自增与自减运算符"><a href="#自增与自减运算符" class="headerlink" title="自增与自减运算符"></a>自增与自减运算符</h3><p>自增运算符( ++ )，自减运算符( – )，自增和自减运算符会使**<span title="仅对变量有效">变量</span>**的值自动 +1 或 -1</p>
<p>自增和自减分为两种，分别是前置自增和后置自增、前置自减和后置自减</p>
<p><strong>语法</strong>：<code>++变量</code> or <code>变量++</code> / <code>--变量</code> or <code>变量--</code></p>
<blockquote>
<p>PS：其中后置自减和后置自增返回的是自增和自减前的值，而前置自减和前置自增返回的是自增和自减后的值</p>
</blockquote>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, a++, a, ++a, a) <span class="comment">//输出：5 5 6 7 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, a--, a, --a, a) <span class="comment">//输出：7 7 6 5 5</span></span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="与运算符-amp-amp"><a href="#与运算符-amp-amp" class="headerlink" title="与运算符 ( &amp;&amp; )"></a>与运算符 ( &amp;&amp; )</h3><p>语法：<code>表达式 &amp;&amp; 表达式</code></p>
<ul>
<li>运算时会将符号左边的值转换成布尔型再运算</li>
<li>如果符号左边的表达式返回值为<code>true</code>，则结果为符号右边表达式的值，反之，如果符号左边的表达式返回值为<code>false</code>，则结果为符号左边表达式的值</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line">a = <span class="title class_">NaN</span> &amp;&amp; <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b = <span class="string">&quot;你好&quot;</span> &amp;&amp; ++a); <span class="comment">//输出：1</span></span><br></pre></td></tr></table></figure>

<h3 id="或运算符"><a href="#或运算符" class="headerlink" title="或运算符 ( || )"></a>或运算符 ( || )</h3><p>语法：<code>表达式 || 表达式</code></p>
<ul>
<li><p>运算时会将符号左边的值转换成布尔型再运算</p>
</li>
<li><p>如果符号左边的表达式返回值为<code>false</code>，则结果为符号右边表达式的值，反之，如果符号左边的表达式返回值为<code>true</code>，则结果为符号左边表达式的值</p>
</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">55</span>-<span class="number">5</span> || <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出：50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b = <span class="literal">false</span> || ++a); <span class="comment">//输出：51</span></span><br></pre></td></tr></table></figure>

<h3 id="非运算符"><a href="#非运算符" class="headerlink" title="非运算符 ( ! )"></a>非运算符 ( ! )</h3><p>语法：<code>!表达式</code></p>
<ul>
<li>对布尔类型数据进行反向运算( 取反 )</li>
<li><code>!</code> 运算符只有一个操作数，所以属于一元运算符</li>
<li>非布尔类型数据取反会先将其转换为布尔型在运算</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a = !a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出false</span></span><br><span class="line"><span class="comment">//还可以多次取反 !!a</span></span><br></pre></td></tr></table></figure>

<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>通过关系运算符可以比较两个值关系，如果关系成立 则返回 true，如果不成立 则返回 false</p>
<p>关系型运算符包括：</p>
<ul>
<li><p><code>&gt;</code>(大于)、<code>&gt;=</code>(大于等于)、<code>!&gt;</code>(不大于)</p>
</li>
<li><p><code>&lt;</code>(小于)、<code>&lt;=</code>(小于等于)、<code>!&lt;</code>(不小于)</p>
</li>
</ul>
<p>以上的关系运算符在运算时会将符号左右的操作数转换成数值型再做运算，其中NaN不和任何值相等，包括它本身，所以任何数据类型的值在和NaN做关系运算时都会返回 false</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt; <span class="literal">true</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="string">&quot;1&quot;</span>); <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt;= <span class="literal">true</span>) <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt; <span class="string">&#x27;0&#x27;</span>) <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="literal">null</span>) <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt;= <span class="string">&quot;hello&quot;</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1000000000</span> &gt; <span class="title class_">NaN</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &gt; <span class="literal">false</span>) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：null 在做相等运算(<code>==</code>)时不会自动转换为数值型，由于 undefined 衍生自 null，所以这两个值做相等运算时，会返回 true</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>Js中还有两个关系运算符，分别为：</p>
<ul>
<li><code>===</code>(全等)</li>
<li><code>!==</code>(不全等)</li>
</ul>
<p>全等和不全等运算符在做运算时，不会做自动数据类型转换，如果两个不同数据类型的值做全等(<code>===</code>)运算时，直接返回 false，同样的，如果两个不同数据类型的值做不全等(<code>!==</code>)运算时，直接返回 true</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="string">&quot;1&quot;</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> !== <span class="number">1</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> !== <span class="string">&quot;1&quot;</span>) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure>

<h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><p>通过<code>isNaN()</code>函数可以判断一个值是否为NaN，如果为 <code>NaN</code>则返回值为<code>true</code>，否则为<code>false</code>。</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">a = <span class="title class_">Number</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="built_in">isNaN</span>(a)) <span class="comment">//输出：NaN, true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure>


<h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>条件运算符有3个操作数，所以也称为 <strong>三元运算符</strong></p>
<p>语法：<code>条件 ? 表达式1 : 表达式2</code></p>
<ul>
<li><p>如果条件值为 true(非布尔值自动转换) 则执行表达式1，并返回其值，反之亦然.</p>
</li>
<li><p>三元运算符是对if……else语句的一种简化写法</p>
</li>
</ul>
<p>下面的范例中，如果变量 age 中的值小于 18，则向变量 voteable 赋值 “年龄太小”，否则赋值 “年龄已达到”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">voteable = (age &lt; <span class="number">18</span>) ? <span class="string">&quot;年龄太小&quot;</span> : <span class="string">&quot;年龄已达到&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否年满18岁</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请您输入年龄&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> s = (age &gt;= <span class="number">18</span>) ? <span class="string">&#x27;18岁了&#x27;</span> : <span class="string">&#x27;未满18岁&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure>

<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式是指可以进行运算，且必须返回一个确定的值的式子，一般由常量、变量、运算符、子表达式构成，最简单的表达式可以是一个简单的值( 常量 or 变量 )</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 值表达式 */</span></span><br><span class="line"><span class="number">1</span>			<span class="comment">//数字表达式</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span>		<span class="comment">//字符串表达式</span></span><br><span class="line"><span class="literal">true</span>	<span class="comment">//布尔值表达式</span></span><br><span class="line">a			<span class="comment">//变量表达式</span></span><br></pre></td></tr></table></figure>

<p>在实际编程中，可以使用运算符建立复杂的表达式</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> + <span class="number">3</span> - <span class="number">2</span></span><br><span class="line">a = b * <span class="number">3</span> <span class="comment">// 赋值表达式 返回赋值结果</span></span><br><span class="line">a + <span class="number">3</span> &gt; b + <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>运算符一般由一些符号组成，如 “+” “/” “=” “%” 等，也有些运算符使用关键字表示，如 typeof</p>
<blockquote>
<h3 id="词（token）"><a href="#词（token）" class="headerlink" title="词（token）"></a>词（token）</h3><p>词是 JavaScript 中的最小语义单元，包括常量、变量、运算符、表达式、指令等</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 变量声明语句 */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">/* 组成 */</span></span><br><span class="line"><span class="keyword">var</span>	<span class="comment">//指令(语句标识符)</span></span><br><span class="line">a		<span class="comment">//变量名(标识符)</span></span><br><span class="line">=		<span class="comment">//赋值运算符</span></span><br><span class="line"><span class="number">123</span>	<span class="comment">//值(数字)</span></span><br><span class="line">;		<span class="comment">//运算符</span></span><br></pre></td></tr></table></figure>

<h3 id="语句（statement）"><a href="#语句（statement）" class="headerlink" title="语句（statement）"></a>语句（statement）</h3><p>在高级语言中，语句是一个能够对计算机下达<strong>指令</strong>的程序代码</p>
<p>JavaScript 语句通常以一个语句标识符为开始，并执行该语句。语句标识符用来标识程序要执行的动作，语句标识符为保留关键字不能作为任何自定义的标识符使用</p>
<p>多条语句之间用分号( <code>;</code> )分隔</p>
</blockquote>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(二) 变量与数据类型</title>
    <url>/posts/9babe0a3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>字面量(literal)又称直接量，是指程序中能够<strong>直接使用</strong>的值，如 3.1415926</p>
<p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">1001</span></span><br><span class="line"><span class="number">123e5</span></span><br></pre></td></tr></table></figure>

<p><strong>字符串（String）字面量</strong> 可以使用单引号或双引号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;John Doe&quot;</span></span><br><span class="line"><span class="string">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>表达式字面量</strong> 用于计算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="number">6</span></span><br><span class="line"><span class="number">5</span> * <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p><strong>数组（Array）字面量</strong> 用于定义一个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>

<p><strong>对象（Object）字面量</strong> 用于定义一个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h2><p>变量是程序中数据的临时存放场所。在代码中可以只使用一个变量，也可以使用多个变量</p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>JavaScript 使用 <strong>var</strong> 关键字来声明变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carname; <span class="comment">// 变量声明</span></span><br></pre></td></tr></table></figure>

<p>变量声明之后，该变量默认值为<code>undefined</code></p>
<p>如需向变量赋值，请使用等号( <code>=</code> )</p>
<p><code>carname=&quot;Volvo&quot;;</code></p>
<p>我们也可以在声明变量时对其赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carname = <span class="string">&quot;Volvo&quot;</span>; <span class="comment">// 定义一个变量</span></span><br></pre></td></tr></table></figure>

<p>下面的代码定义了一个名为 <strong>carname</strong> 的变量，并向其赋值 <code>&quot;Volvo&quot;</code>，然后把它放入 <code>id=&quot;demo&quot;</code> 的 HTML 段落中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> carname = <span class="string">&quot;Volvo&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = carname;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果一个访问一个不存在( 未声明 + 未定义 )的变量就会提示以下错误：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line"><span class="comment">//提示错误：message is not defined</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>默认情况下</strong> 不写声明关键字 <code>var</code> 直接赋值也可以使用变量，例如：<code>a = 123</code></p>
</blockquote>
<h3 id="一条语句，多个变量"><a href="#一条语句，多个变量" class="headerlink" title="一条语句，多个变量"></a>一条语句，多个变量</h3><p>我们可以在一条语句中声明很多变量</p>
<p>该语句以 var 开头，并使用逗号 ( , ) 分隔变量即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Doe&quot;</span>, age=<span class="number">30</span>, job=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="标识符（identifier）"><a href="#标识符（identifier）" class="headerlink" title="标识符（identifier）"></a>标识符（identifier）</h2><p>所谓标识符，就是指变量、函数、属性的名字，或函数的参数</p>
<p>JavaScript 使用 Unicode 字符集，理论上标识符可以是任何字符( 包括中文 )，但考虑到兼容性和安全性问题，建议遵循规范命名</p>
<p>标识符需要按照以下规范命名：</p>
<ul>
<li>标识符可以是字母(A-Z.a-z)、数字(0-9)、下划线 _ 和 $，但第一个字符不能为数字(0-9)</li>
<li>标识符还不能以 JavaScript <strong>保留关键字</strong> 命名</li>
</ul>
<p><img src="https://cdn1.tianli0.top/gh/k34869/images/image/20221112102250" alt="keywords"></p>
<blockquote>
<h3 id="字母大小写"><a href="#字母大小写" class="headerlink" title="字母大小写"></a>字母大小写</h3><p>JavaScript 是区分字母大小写的</p>
<p>函数 <strong>getElementById</strong> 与 <strong>getElementbyID</strong> 是不同的</p>
<p>同样，变量 <strong>myVariable</strong> 与 <strong>MyVariable</strong> 也是不同的</p>
<p>JavaScript 中，常见的是驼峰法的命名规则，如 lastName (而不是lastname)</p>
</blockquote>
<h2 id="数据类型（dataType）"><a href="#数据类型（dataType）" class="headerlink" title="数据类型（dataType）"></a>数据类型（dataType）</h2><p>JavaScript 中有 5 种基本的数据类型和 1 种引用数据类型：</p>
<p>基本数据类型( Primitive Data Type )：</p>
<ol>
<li>字符串 ( <strong>String</strong> )</li>
<li>数字 ( <strong>Number</strong> )</li>
<li>布尔值 ( <strong>Boolean</strong> )</li>
<li>空 ( <strong>null</strong> )</li>
<li>未定义 ( <strong>undefined</strong> )</li>
</ol>
<p>引用数据类型( Reference Data Type )：</p>
<ul>
<li>对象( <strong>Object</strong> )</li>
</ul>
<h3 id="动态数据类型"><a href="#动态数据类型" class="headerlink" title="动态数据类型"></a>动态数据类型</h3><p>JavaScript 声明变量是无需指定数据类型的，js 运行时会根据变量的值确定数据类型，这意味着相同的变量可存储不同的数据类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x;      <span class="comment">// x 为 undefined </span></span><br><span class="line">x = <span class="number">5</span>;      <span class="comment">// 现在 x 为数字</span></span><br><span class="line">x = <span class="string">&quot;John&quot;</span>; <span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h2><p>多个字符连在一起就叫做字符串，字符串用引号包裹，引号可以是单引号也可以是双引号</p>
<p>字符串可以是引号中的任意文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> carname = <span class="string">&quot;Volvo XC60&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> carname = <span class="string">&#x27;Volvo XC60&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>字符串中可以包含引号，只要不和包围字符串的引号相同就行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;It&#x27;s alright&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;He is called &#x27;Johnny&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&#x27;He is called &quot;Johnny&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;He is called &quot;</span><span class="title class_">Johnny</span><span class="string">&quot;&quot;</span>; <span class="comment">// 错误 Johnny会被当做变量</span></span><br></pre></td></tr></table></figure>

<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>字符串中一些特殊符号是无法直接使用的，这时就需要使用转义字符了</p>
<table>
<caption>
JavaScript 转义字符</caption>
<tbody>
<tr>
<th>
序列</th>
<th>
代表字符</th>
</tr>
<tr>
<td>
\0</td>
<td>
Null字符（\u0000）</td>
</tr>
<tr>
<td>
\b</td>
<td>
退格符（\u0008）</td>
</tr>
<tr>
<td>
\t</td>
<td>
水平制表符（\u0009）</td>
</tr>
<tr>
<td>
\n</td>
<td>
换行符（\u000A）</td>
</tr>
<tr>
<td>
\v</td>
<td>
垂直制表符（\u000B）</td>
</tr>
<tr>
<td>
\f</td>
<td>
换页符（\u000C）</td>
</tr>
<tr>
<td>
\r</td>
<td>
回车符（\u000D）</td>
</tr>
<tr>
<td>
\"</td>
<td>
双引号（\u0022）</td>
</tr>
<tr>
<td>
\'</td>
<td>
撇号或单引号（\u0027）</td>
</tr>
<tr>
<td>
\\</td>
<td>
反斜杠（\u005C）</td>
</tr>
<tr>
<td>
\uXXXX</td>
<td>
由 4 位十六进制数值 XXXX 指定的 Unicode 字符 <a href="https://www.unicode.org/Public/13.0.0/charts/CodeCharts.pdf" title="CodeCharts">Unicode编码表参考书</a></td>
</tr>
</tbody>
</table>
## 数字（Number）

<p>数字 主要用于算数运算</p>
<p>数字可以是整数还可以是小数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">13.00</span>;</span><br></pre></td></tr></table></figure>

<p>对于极大或极小的数字可以通过科学 ( 指数 ) 计数法来表示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></table></figure>

<h3 id="±infinity"><a href="#±infinity" class="headerlink" title="±infinity"></a>±infinity</h3><p>Number型的数字大小是有限的，通过输出常量<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code>即可获取 js 的最大数和最小数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);</span><br><span class="line"><span class="comment">// Number.MAX_VALUE 为Js所能表示的最大正数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);</span><br><span class="line"><span class="comment">// -Number.MAX_VALUE 为Js所能表示的最大负数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);</span><br><span class="line"><span class="comment">// Number.MIN_VALUE 为Js所能表示的最接近0的数，即大于0的最小数值</span></span><br></pre></td></tr></table></figure>

<p>如果超过了<code>Number.MAX_VALUE</code>的范围，则返回<code>infinity</code>( 正无穷 )或<code>-infinity</code>( 负无穷 )</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>NaN（Not a Number）是一个特殊的数值，js 中如果数值计算没有结果，则返回NaN</p>
<h3 id="其他进制数"><a href="#其他进制数" class="headerlink" title="其他进制数"></a>其他进制数</h3><ul>
<li>16进制：以0x开头</li>
<li>8进制：以0开头</li>
<li>2进制：以0b开头</li>
</ul>
<h2 id="布尔值（Boolean）"><a href="#布尔值（Boolean）" class="headerlink" title="布尔值（Boolean）"></a>布尔值（Boolean）</h2><p>布尔值主要用在条件判断中</p>
<p>它只有两个值 true( 真 ) 或 false( 假 )</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<h2 id="typeof（检测数据类型）"><a href="#typeof（检测数据类型）" class="headerlink" title="typeof（检测数据类型）"></a>typeof（检测数据类型）</h2><p>功能描述：typeof 是 JavaScript 中的运算符，用来查看变量的数据类型，并返回类型字符串</p>
<p>语法：<code>typeof &lt;值&gt;</code></p>
<p>输出：</p>
<ul>
<li><p>typeof %数值%（返回值：number）</p>
</li>
<li><p>typeof %字符串%（返回值：string）</p>
</li>
<li><p>typeof %布尔值%（返回值：boolean）</p>
</li>
<li><p>typeof undefined（返回值：undefined）</p>
</li>
<li><p>typeof null（返回值：object）</p>
</li>
</ul>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>使用<code>String()</code>函数 可以将其它数据类型转换为字符串</p>
<p><strong>转换关系：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Hello_你好&quot;</span> =&gt; <span class="string">&quot;Hello_你好&quot;</span>;</span><br><span class="line"><span class="number">123</span> =&gt; <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="function"><span class="params">true</span> =&gt;</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="function"><span class="params">NaN</span> =&gt;</span> <span class="string">&quot;NaN&quot;</span>;</span><br><span class="line"><span class="function"><span class="params">undefined</span> =&gt;</span> <span class="string">&quot;undefined&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>Number()</code>函数 可以将其它数据类型转换为数值型</p>
<p><strong>转换关系：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span> =&gt; <span class="number">123</span>;</span><br><span class="line"><span class="string">&quot;Hello_你好&quot;</span> =&gt; <span class="title class_">NaN</span>;</span><br><span class="line"><span class="function"><span class="params">true</span> =&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="params">false</span> =&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="params">null</span> =&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="params">undefined</span> =&gt;</span> <span class="title class_">NaN</span>;</span><br></pre></td></tr></table></figure>

<p>使用<code>parseInt()</code>函数可以把一个字符串转换为一个整数（取整）</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;123a123&#x27;</span>)) <span class="comment">//输出为 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;a123&#x27;</span>)) <span class="comment">//输出为 NaN</span></span><br></pre></td></tr></table></figure>

<p>使用<code>parseFloat()</code>函数可以把一个字符串转换为一个浮点数（小数）</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(<span class="string">&#x27;123.5px&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//输出为 123.5</span></span><br></pre></td></tr></table></figure>

<p>使用<code>Boolean()</code>函数 可以将其它数据类型转换为布尔型</p>
<p><strong>转换关系：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">±<span class="number">123</span> =&gt; <span class="literal">true</span>;</span><br><span class="line"><span class="number">0</span> =&gt; <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="params">NaN</span> =&gt;</span> <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="params">undefined</span> =&gt;</span> <span class="literal">false</span>;</span><br><span class="line"><span class="string">&quot;Hello_你好&quot;</span> =&gt; <span class="literal">true</span>;</span><br><span class="line"><span class="string">&quot;&quot;</span> =&gt; <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="params">null</span> =&gt;</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(四) 流程控制</title>
    <url>/posts/fa1154a.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>js 中默认是从上到下一行一行执行的，这种按照顺序执行在程序中就被称作顺序结构，流程控制就是指控制程序代码的执行顺序</p>
<p>三种基本程序结构：</p>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/public/image/20221112102610" alt="流程控制"></p>
<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>顺序结构是程序中最简单、最基本的程序结构，它没有特定的语法，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的</p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>分支结构在执行代码的时候，可以根据条件进行选择，条件越多对应的结果越多，分支也就越多。在 Js 中通过 <span title="如果...否则..."><code>if...else...</code></span> 语句、<span title="切换、开关"><code>switch</code></span> 语句 来实现分支结构</p>
<h3 id="单路分支"><a href="#单路分支" class="headerlink" title="单路分支"></a>单路分支</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)</span><br><span class="line">  <span class="comment">//条件为 true 时执行此处语句;</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title function_">prompt</span>(<span class="string">&quot;请输入...&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">4</span>)</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;输入的数字大于4&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="块语句"><a href="#块语句" class="headerlink" title="块语句"></a>块语句</h3><p>如果 <strong>if(条件)</strong> 后的语句有多个( 默认只匹配第一条语句 )，需要使用<code>&#123;&#125;</code>来对代码进行分组，写在<code>&#123;&#125;</code>中的代码会作为一个整体一起执行，如果只有一条语句可以省略大括号<code>&#123;&#125;</code></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">//一组语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="双路分支"><a href="#双路分支" class="headerlink" title="双路分支"></a>双路分支</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">//条件为 true 时执行此处语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//条件为 false 时执行此处语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pwd = <span class="title function_">prompt</span>(<span class="string">&quot;请输入密码&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pwd == <span class="number">123</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;密码正确&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：if…else…语句可以根据 <strong>条件</strong> 来选择执行，而条件是一个返回值为<code>true</code>或<code>false</code>的表达式</p>
</blockquote>
<h3 id="多路分支"><a href="#多路分支" class="headerlink" title="多路分支"></a>多路分支</h3><p><code>if..else...</code>语句中要实现多路分支，可以使用<code>else if</code>从句</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//条件1为 true 时执行此处语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//条件2为 true 时执行此处语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//条件3为 true 时执行此处语句</span></span><br><span class="line">&#125; ... <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//上述所有条件都为 false 时执行此处语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&quot;请输入你的成绩&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;人才&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：在多路分支中当执行到某个分支且该分支的条件成立时，则执行该分支中的语句，执行完成后会自动从所有分支中跳出，如果该分支不成立则继续判断下一分支( <code>else if</code> )是否成立，以此类推…</p>
</blockquote>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>在 Js 中还可以使用switch语句来实现分支结构</p>
<p>语法1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    <span class="comment">//当 &quot;表达式&quot; 与 &quot;值1&quot; 全等时，执行此处语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    <span class="comment">//当 &quot;表达式&quot; 与 &quot;值2&quot; 全等时，执行此处语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    <span class="comment">//当 &quot;表达式&quot; 与 &quot;值3&quot; 全等时，执行此处语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ......</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">//当上述都不成立时执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&quot;请输入...&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(num) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;6&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;7&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请输入1-7以内的数字&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>将switch后括号内的 <strong>表达式</strong> 与case后的 <strong>表达式</strong> 逐一进行全等(<code>===</code>)比较</p>
<ul>
<li>当比较结果为 true 时，则停止比较，并从当前 case处向下执行( 不会自动跳出switch语句 )</li>
<li>当比较结果为 false 时，则继续比较下一个 case后的表达式</li>
</ul>
<h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>用于匹配<code>switch(表达式)</code>括号中表达式的子句</p>
<p>它会从第一个 case 子句开始匹配，直到匹配成立( 全等, === )，则匹配结束( 不再匹配 )，执行其后的相关语句</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break 语句用于跳出 switch语句的执行( 结束switch语句 )</p>
<h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>default 后的语句无需比较，直接执行，因此要放到最后</p>
</blockquote>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环结构就是重复不断的做一件事，在 Js 中通过<code>for</code>语句、<code>while</code>语句、<code>do...while</code>语句 来实现循环结构</p>
<h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 条件; 更新表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行步骤：</p>
<ol>
<li>执行初始化(初始化变量)，初始化只会执行一次</li>
<li>执行条件，如果条件为 true，则执行循环体，并继续步骤③，如果为 false，跳出循环(循环结束)</li>
<li>执行更新表达式，更新表达式执行完毕重复步骤②</li>
</ol>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出数字1-10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化只会在第一次循环执行，通常为一个赋值语句。典型地被用于初始化一个计数器( 初始化条件 )</p>
<h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>条件被用于确定每一次循环是否能被执行。如果条件为 true，则执行循环体。如果条件为 false，则从循环体中跳出( 循环结束 )，如果条件为空，则每次循环条件都为 true，即无限循环</p>
<h3 id="更新表达式"><a href="#更新表达式" class="headerlink" title="更新表达式"></a>更新表达式</h3><p>每次循环体执行完后都会自动跳回更新表达式。更新表达式会在下一次<strong>条件</strong>执行前执行。通常被用于更新或者自增计数器变量( 更新条件 )</p>
</blockquote>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件) &#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">0</span>;	<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  n++;		<span class="comment">//更新表达式</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x+=n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>当条件为 true 时执行循环体，执行完成后则自动跳回条件判断，直到当条件为 false 时则从循环体中跳出( 循环结束 )</p>
<p>按照顺序结构，while语句需要将更新表达式写在循环体中，初始化需要写在whlie语句前面</p>
</blockquote>
<h3 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">   <span class="comment">//循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出数字1-10</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;  <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  i++;	<span class="comment">//更新表达式</span></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="执行流程-2"><a href="#执行流程-2" class="headerlink" title="执行流程"></a>执行流程</h3><p>先执行循环体，循环体执行完后，执行条件，如果条件为 true，则继续执行循环体，如果条件为 false 则停止循环向下执行</p>
</blockquote>
<h2 id="break与continue"><a href="#break与continue" class="headerlink" title="break与continue"></a>break与continue</h2><p><strong>break 语句</strong>可以中止当前循环、<code>switch</code>语句或<code>label</code>语句</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">break</span> [label]</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">	<span class="keyword">break</span>	<span class="comment">//终止当前循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>continue 语句</strong>可以终止当前循环或标记循环的当前迭代中的语句，并在下一次迭代时继续执行循环</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">continue</span> [label]</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">//输出0 1 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="label（标记语句）"><a href="#label（标记语句）" class="headerlink" title="label（标记语句）"></a>label（标记语句）</h3><p><code>break</code> 和 <code>continue</code>语句包含一个可选的标签(label)，可允许程序跳出一个被标记的语句。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">标签名: 被标记的语句</span><br><span class="line"><span class="comment">//标签名建议遵循标识符规范命名</span></span><br><span class="line"><span class="comment">//被标记的语句可以是一个循环语句、switch语句，也可以直接是一个块语句</span></span><br></pre></td></tr></table></figure>

<p>例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">outer</span>: <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@外层循环&quot;</span>+i)</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">3</span>)&#123;</span><br><span class="line">		<span class="keyword">break</span> outer <span class="comment">//终止外层循环(按照顺序结构，外层循环跳过，内层循环也不会执行)</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@内层循环&quot;</span>+j)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">outer</span>: <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@外层循环&quot;</span>+i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">continue</span> outer</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@内层循环&quot;</span>+j)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h3><p>break语句可以在循环语句( 如for、while等 )、switch语句中使用，而 continue 只能在 循环语句 中使用</p>
<p><code>continue</code> 与 <code>break</code> 语句的区别在于，continue 并不会终止整个循环，而是：</p>
<ul>
<li><p>在 <code>while</code> 循环中，会跳回条件判断</p>
</li>
<li><p>在 <code>for</code> 循环中，会跳回更新表达式</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(八) 内置对象</title>
    <url>/posts/2cfcc5d5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>内置对象( native object )是 ECMAScript 标准中定义的对象（标准内置对象）。内置对象独立与浏览器在任何 <strong>ECMAScript实现</strong> 中都可以使用</p>
<h2 id="继承链"><a href="#继承链" class="headerlink" title="继承链"></a>继承链</h2><table>
<thead>
<tr>
<th>内置构造函数( 类 )</th>
<th>描述</th>
<th><code>__proto__</code>(原型)</th>
</tr>
</thead>
<tbody><tr>
<td>Object 类型</td>
<td>Js中所有的对象都是<code>Object</code>类型的实例，它们都会从<code>Object.prototype</code>继承属性和方法(如：<code>toString()</code>)</td>
<td><code>Function.prototype</code></td>
</tr>
<tr>
<td>Function 类型</td>
<td>Js中所有的函数都是<code>Function</code>类型的实例，它们都会从<code>Function.prototype</code>继承属性和方法(如：<code>apply()</code>、<code>call()</code>等)</td>
<td><code>Function.prototype</code></td>
</tr>
<tr>
<td>Array 类型</td>
<td>Js中所有的数组都是<code>Array</code>类型的实例，它们都会从<code>Array.prototype</code>继承属性和方法(如：<code>length</code>、<code>push()</code>、<code>concat()</code>等)</td>
<td><code>Function.prototype</code></td>
</tr>
</tbody></table>
<blockquote>
<h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p><strong>创建一个Array类型的对象</strong>（即创建一个数组）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="title class_">Array</span>(元素<span class="number">1</span>,元素<span class="number">2.</span>..元素N);</span><br><span class="line"><span class="comment">/* 例 */</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p><strong>创建一个Function类型的对象</strong>（即创建一个函数）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">new</span> <span class="title class_">Function</span>(语句字符串);</span><br><span class="line"><span class="comment">/* 例 */</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;console.log(&quot;hello&quot;)&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>创建一个Object类型的对象</strong>（即创建一个对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = <span class="keyword">new</span> <span class="title class_">Object</span>(表达式); <span class="comment">//参数默认值为null即空值</span></span><br><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>: <span class="title class_">Timeic</span>&#125;); <span class="comment">//创建一个Object类型的对象</span></span><br><span class="line"><span class="comment">/* 通过Object类来创建其他类型的对象 */</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Object</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//创建Array类型对象</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)&#125;); <span class="comment">//创建Function类型对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="number">666</span>); <span class="comment">//创建一个Number类型对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//创建一个String类型对象</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="literal">true</span>); <span class="comment">//创建一个Boolean类型对象</span></span><br></pre></td></tr></table></figure>

<p>在JavaScript中字面量的创建方式只是实例化的一种简化语法</p>
<p>如：<code>var obj = &#123;&#125;</code> 等同于 <code>var obj = new Object()</code></p>
<p>如果不赋值只实例化则会创建一个匿名的( 临时的 )实例对象</p>
<p>如：<code>(&#123;name: &#39;Timeic&#39;&#125;).name</code> or <code>[1, 2, 3].length</code></p>
</blockquote>
<h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><p>在 Js 中有三种包装类型对象，分别是Number、String、Boolean</p>
<table>
<thead>
<tr>
<th>类</th>
<th><code>__proto__</code>(原型)</th>
</tr>
</thead>
<tbody><tr>
<td>Number 类型</td>
<td><code>Function.prototype</code></td>
</tr>
<tr>
<td>String 类型</td>
<td><code>Function.prototype</code></td>
</tr>
<tr>
<td>Boolean 类型</td>
<td><code>Function.prototype</code></td>
</tr>
</tbody></table>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">666</span>); <span class="comment">//创建一个Number类型的对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//创建一个String类型的对象</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>); <span class="comment">//创建一个Boolean类型的对象</span></span><br></pre></td></tr></table></figure>

<p>Number、String、Boolean分别对应三种基本数据类型，即数值型、字符串、布尔型。这三种基本数据类型可以像对象一样访问属性或调用方法，当访问某个属性时 js 引擎会自动创建一个对应的匿名的( 临时的 )包装类型对象，从该对象中获取属性和方法</p>
<p>如：<code>&#39;abc&#39;.length</code> or <code>true.toString()</code></p>
<h2 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h2><p>Date 对象用于处理日期与时间，通过<code>new Date()</code>来创建一个Date类型的实例对象，创建的Date实例对象会显示实例化时的日期和时间</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Date类型的实例对象</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">//Sat May 20 2022 17:40:41 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<p>方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getFullYear.asp">getFullYear()</a></td>
<td>返回一个指定的Date对象的完整年份（四位数年份）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getMonth.asp">getMonth()</a></td>
<td>返回一个指定的Date对象为第几月</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getDate.asp">getDate()</a></td>
<td>返回一个指定的Date对象为一个月中的哪一日（<code>1</code>-<code>31</code>）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getDay.asp">getDay()</a></td>
<td>返回一个指定的Date对象为一周中的第几天，（<code>0</code>-<code>6</code>），0 表示星期天</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getHours.asp">getHours()</a></td>
<td>返回一个指定的Date对象的小时（<code>0</code>–<code>23</code>）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getMinutes.asp">getMinutes()</a></td>
<td>返回一个指定的Date对象的分钟（<code>0</code>–<code>59</code>）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getSeconds.asp">getSeconds()</a></td>
<td>返回一个指定的Date对象的秒（<code>0</code>–<code>59</code>）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_getMilliseconds.asp">getMilliseconds()</a></td>
<td>返回一个指定的Date对象的秒（<code>0</code>–<code>999</code>）</td>
</tr>
</tbody></table>
<h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><p>Math 对象用于执行数学任务，Math对象不需要创建实例，直接使用即可</p>
<p>静态属性（常量）：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_e.asp">E</a></td>
<td>返回算术常量 e，即自然对数的底数（约等于2.718）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_ln2.asp">LN2</a></td>
<td>返回 2 的自然对数（约等于0.693）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_ln10.asp">LN10</a></td>
<td>返回 10 的自然对数（约等于2.302）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_log2e.asp">LOG2E</a></td>
<td>返回以 2 为底的 e 的对数（约等于 1.414）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_log10e.asp">LOG10E</a></td>
<td>返回以 10 为底的 e 的对数（约等于0.434）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_pi.asp">PI</a></td>
<td>返回圆周率（约等于3.14159）</td>
</tr>
</tbody></table>
<p>静态方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_abs.asp">abs(x)</a></td>
<td>返回数的绝对值</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_ceil.asp">ceil(x)</a></td>
<td>对数进行上舍入</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_floor.asp">floor(x)</a></td>
<td>对数进行下舍入</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_max.asp">max(x, y)</a></td>
<td>返回 x 和 y 中的最高值</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_min.asp">min(x, y)</a></td>
<td>返回 x 和 y 中的最低值</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_pow.asp">pow(x, y)</a></td>
<td>返回 x 的 y 次幂</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_random.asp">random()</a></td>
<td>返回 0 ~ 1 之间的随机数</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_round.asp">round(x)</a></td>
<td>把数四舍五入为最接近的整数</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_sqrt.asp">sqrt(x)</a></td>
<td>返回数的平方根</td>
</tr>
</tbody></table>
<h2 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h2><p>String 类型对象是一个包含一组字符序列的对象</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(字符串); <span class="comment">//创建一个String类型对象</span></span><br><span class="line"><span class="title class_">String</span>(s); <span class="comment">//将参数 s 的值转换成字符串数据类型</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">4</span>]); <span class="comment">//输出：&#x27;o&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;H&#x27;</span>)) <span class="comment">//输出：&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure>

<p>属性：</p>
<ul>
<li><p><strong><code>[下标]</code> 根据索引返回指定位置的一个字符</strong></p>
</li>
<li><p><code>length</code> <strong>获取字符串长度</strong></p>
</li>
</ul>
<p>方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>原值</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_charAt.asp">charAt()</a></td>
<td>根据索引，返回在指定位置的字符</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_charCodeAt.asp">charCodeAt()</a></td>
<td>根据索引返回指定位置字符的 Unicode 编码（十进制）</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_fromCharCode.asp">String.formCharCode()</a></td>
<td>根据Unicode编码创建一个字符串</td>
<td>不变(静态方法)</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_concat_string.asp">concat()</a></td>
<td>连接多个字符串</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_indexOf.asp">indexOf()</a></td>
<td>检索一个字符串中是否含有指定内容，如果有则返回其首次出现的位置(索引)，没有则返回 -1</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_lastIndexOf.asp">lastIndexOf()</a></td>
<td>检索一个字符串中是否含有指定内容，如果有则返回其最后出现的位置(索引)，没有则返回 -1</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_slice_string.asp">slice()</a></td>
<td>截取字符串中指定的内容并返回</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_substring.asp">substring()</a></td>
<td>返回一个字符串在开始索引到结束索引之间的内容</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_split.asp">split()</a></td>
<td>将字符串拆分成数组并返回</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_toUpperCase.asp">toUpperCase()</a></td>
<td>将字符串转换为大写形式并返回</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_toLowerCase.asp">toLowerCase()</a></td>
<td>将字符串转换为小写形式并返回</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_search.asp">search()</a></td>
<td>搜索与正则表达式相匹配的值，并返回该值所在位置(索引)</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_match.asp">match()</a></td>
<td>查找一个或多个正则表达式的匹配，并返回一个结果数组</td>
<td>不变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_replace.asp">replace()</a></td>
<td>将字符串中指定内容替换为新的内容，并返回替换后内容</td>
<td>不变</td>
</tr>
</tbody></table>
<h2 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h2><h3 id="array-forEach"><a href="#array-forEach" class="headerlink" title="array.forEach()"></a>array.forEach()</h3><p>描述：按顺序为数组中的每个元素调用一次指定的函数</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组.<span class="title function_">forEach</span>(回调函数, 回调函数中<span class="variable language_">this</span>的值)</span><br><span class="line"><span class="comment">//回调函数的语法</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">当前元素值, 当前元素索引, 当前数组</span>)&#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	当前元素值：当前迭代的数组元素值</span></span><br><span class="line"><span class="comment">	当前元素索引：当前迭代的数组元素索引值</span></span><br><span class="line"><span class="comment">	当前数组：调用当前方法的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> out = [];</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">push</span>(elem * elem);</span><br><span class="line">&#125;, out);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out); <span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：<code>forEach()</code> 方法用于循环遍历数组，该方法不返回任何值，同时该方法不能中断执行，它总是将数组元素遍历完才结束，如果想在循环时根据条件中断执行建议使用 <code>for</code> 循环</p>
</blockquote>
<h3 id="array-map"><a href="#array-map" class="headerlink" title="array.map()"></a>array.map()</h3><p>描述：按顺序为数组中的每个元素调用一次指定的函数，并将每一次调用的函数返回值组合成一个数组作为 <code>map()</code> 方法的返回值</p>
<p>语法：同 <code>array.forEach()</code> 方法</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = numbers.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>[e];</span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：<code>map()</code> 方法用于对数组中每个元素进行处理并返回一个新数组</p>
</blockquote>
<h3 id="array-filter"><a href="#array-filter" class="headerlink" title="array.filter()"></a>array.filter()</h3><p>描述：将满足条件的元素组合成一个新数组返回</p>
<p>语法：同 <code>array.forEach()</code> 方法</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1: 将大于3的元素，作为一个新数组返回 */</span></span><br><span class="line"><span class="keyword">var</span> newArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (elem &gt; <span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [4, 5]</span></span><br><span class="line"><span class="comment">/* 例2: 将所有奇数元素，作为一个新数组返回 */</span></span><br><span class="line"><span class="keyword">var</span> newArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：<code>filter()</code> 方法用于过滤数组中的元素</p>
</blockquote>
<h3 id="array-some-与-array-every"><a href="#array-some-与-array-every" class="headerlink" title="array.some() 与 array.every()"></a>array.some() 与 array.every()</h3><p>描述：这两个方法用于判断数组元素是否符合某种条件。返回一个布尔值</p>
<p>语法：同 <code>array.forEach()</code> 方法</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// true</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">elem, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>some()</code>方法是只要有一个元素的返回值是<code>true</code>，则<code>some()</code>方法的返回值就是<code>true</code>，否则返回<code>false</code></p>
</li>
<li><p><code>every()</code>方法是所有元素的返回值都是<code>true</code>，<code>every()</code>方法才返回<code>true</code>，否则返回<code>false</code></p>
</li>
</ul>
<h3 id="array-reduce-与-array-reduceRight"><a href="#array-reduce-与-array-reduceRight" class="headerlink" title="array.reduce() 与 array.reduceRight()"></a>array.reduce() 与 array.reduceRight()</h3><p>描述：按顺序为数组中的每个元素调用一次指定的函数，每一次执行 reduce方法都会将上一次计算结果( 函数返回值 )作为参数传入，最后将其结果汇总为单个返回值</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组.<span class="title function_">reduce</span>(回调函数, 回调函数中上一次返回值的初始值) <span class="comment">// 从数组第一个元素到数组最后一个元素</span></span><br><span class="line">数组.<span class="title function_">reduceRight</span>(回调函数, 回调函数中上一次元素值的初始值) <span class="comment">// 从数组最后一个元素到数组第一个元素</span></span><br><span class="line"><span class="comment">//回调函数的语法</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">上一次返回值, 当前元素值, 当前元素索引, 当前数组</span>)&#123; <span class="keyword">return</span> xxx &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	上一次返回值：上一次执行回调函数的返回值，默认初始值为数组的第一个元素值</span></span><br><span class="line"><span class="comment">	当前元素值：当前迭代的数组元素值，默认从数组的第二个元素( 索引为1 )开始</span></span><br><span class="line"><span class="comment">	当前元素索引：当前迭代的数组元素索引值</span></span><br><span class="line"><span class="comment">	当前数组：调用reduce方法的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, cur</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(prev, cur);</span><br><span class="line">	<span class="comment">// 1 2</span></span><br><span class="line">	<span class="comment">// 3 3</span></span><br><span class="line">	<span class="comment">// 6 4</span></span><br><span class="line">	<span class="comment">// 10 5</span></span><br><span class="line">    <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>描述：以指定对象为原型创建新的对象，同时可以为新的对象指定新的属性，并对属性进行描述</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(对象, &#123; 属性名: 属性描述符对象... &#125;) <span class="comment">//返回创建的新对象</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建一个干净的对象 */</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">/* 创建一个对象，并添加相应属性，同时对属性进行描述 */</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;Timeic&#x27;</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">//属性不允许被赋值(=)</span></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">//属性不允许从所在对象中删除(delete)</span></span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">false</span> <span class="comment">//属性不允许被枚举(for in)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//属性允许被赋值(=)</span></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">//属性允许从所在对象中删除(delete)</span></span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">//属性允许被枚举(for in)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br></pre></td></tr></table></figure>

<h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>属性描述符是 JavaScript 提供的一种<strong>内部数据结构</strong>，用于描述对象的属性值，及控制其行为( 例如该属性是否可写、是否可配置、是否可修改以及是否可枚举等 )</p>
<p>分类：</p>
<ul>
<li>数据描述符</li>
<li>存取描述符</li>
</ul>
<blockquote>
<h3 id="数据描述符（数据属性）"><a href="#数据描述符（数据属性）" class="headerlink" title="数据描述符（数据属性）"></a>数据描述符（数据属性）</h3><table>
<thead>
<tr>
<th>键</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td><code>value</code></td>
<td>该属性对应的值，默认值 undefined</td>
</tr>
<tr>
<td><code>writable</code></td>
<td>值为 <code>true</code> 时，该属性的值( value )才能够被改变，默认值为 false</td>
</tr>
<tr>
<td><code>configurable</code></td>
<td>值为 <code>true</code> 时，该属性描述符的 configurable、enumerable 的值才能修改，同时该属性也能够从所属对象中删除，默认值为 false</td>
</tr>
<tr>
<td><code>enumerable</code></td>
<td>值为 <code>true</code> 时，该属性才会出现在对象的枚举(for in)属性中，默认值为 false</td>
</tr>
</tbody></table>
<h3 id="存取描述符（访问器属性）"><a href="#存取描述符（访问器属性）" class="headerlink" title="存取描述符（访问器属性）"></a>存取描述符（访问器属性）</h3><table>
<thead>
<tr>
<th>键</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td><code>get</code></td>
<td>值为一个函数。没有该函数，则默认值为undefined。当获取或访问当前属性时，会调用此方法</td>
</tr>
<tr>
<td><code>set</code></td>
<td>值为一个函数。没有该函数，则默认值为undefined。当设置当前属性值时，会调用此方法</td>
</tr>
<tr>
<td><code>configurable</code></td>
<td>值为 <code>true</code> 时，该属性描述符的 configurable、enumerable 的值才能修改，同时该属性也能够从所属对象中删除，默认值为 false</td>
</tr>
<tr>
<td><code>enumerable</code></td>
<td>值为 <code>true</code> 时，该属性才会出现在对象的枚举(for in)属性中，默认值为 false</td>
</tr>
</tbody></table>
<h3 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h3><p>描述：获取属性描述符</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(对象, 属性)</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">text</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="comment">/* 返回一个属性描述符对象</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	value: &#x27;string&#x27;,</span></span><br><span class="line"><span class="comment">	writable: true,</span></span><br><span class="line"><span class="comment">	configurable: true,</span></span><br><span class="line"><span class="comment">	enumerable: true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p>描述：定义指定对象的属性描述符</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(对象, 属性, 属性描述符对象)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第1个参数为目标对象</span></span><br><span class="line"><span class="comment">第2个参数为目标对象的属性名（一个字符串）</span></span><br><span class="line"><span class="comment">第3个参数为属性描述符对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 修改一个值 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;猪八戒&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;孙悟空&quot;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;孙悟空&#x27; &#125;</span></span><br><span class="line"><span class="comment">/* 新增一个值 */</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">28</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 28</span></span><br></pre></td></tr></table></figure>

<p>PS：使用对象字面量（<code>&#123; 属性名: 属性值 &#125;</code>）或 <code>对象.属性名 = 值</code> 的方式添加的属性 可修改，可删除，可枚举（即属性描述符的<code>enumerable</code>、<code>configurable</code>、<code>writable</code> 的值为 true）</p>
<h3 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties()"></a>Object.defineProperties()</h3><p>描述：定义指定对象的<strong>多个</strong>属性描述符</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(对象, &#123; 属性名: 属性描述符对象... &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="getter-amp-setter方法"><a href="#getter-amp-setter方法" class="headerlink" title="getter &amp; setter方法"></a>getter &amp; setter方法</h3><p><code>getter</code> 将对象属性绑定到获取该属性时将被调用的函数</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    get 属性名()&#123;</span><br><span class="line">        <span class="comment">//函数体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get为获取属性，其后为要获取的属性名，当获取该属性时，则调用getter方法</span></span><br></pre></td></tr></table></figure>

<p><code>setter</code> 将对象属性绑定到设置该属性值时将被调用的函数</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    set 属性名(值)&#123;</span><br><span class="line">        <span class="comment">//函数体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set为设置属性，其后为要设置的属性名，当设置该属性值时，则调用setter方法</span></span><br><span class="line"><span class="comment">//setter方法包含一个参数，作为该属性被设置时的新值</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>, </span><br><span class="line">	<span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span>,</span><br><span class="line">	<span class="keyword">get</span> <span class="title function_">fullName</span>()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">data</span>)&#123;</span><br><span class="line">		<span class="keyword">var</span> names = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>];</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">lastName</span> = names[<span class="number">1</span>]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">obj.<span class="property">fullName</span> = <span class="string">&#x27;老 六&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">fullName</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h3><p>描述：获取指定对象所有的属性名( 包括不可枚举属性 )集合( 数组 )</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(对象)</span><br></pre></td></tr></table></figure>

<h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>描述：获取指定对象所有可枚举的属性名集合( 数组 )</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(对象)</span><br></pre></td></tr></table></figure>

<h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p>描述：获取指定对象所有可枚举的属性值集合( 数组 )</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(对象)</span><br></pre></td></tr></table></figure>

<h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>描述：获取指定对象所有可枚举属性的名值对集合( 数组 )</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(对象)</span><br></pre></td></tr></table></figure>

<h3 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h3><p>描述：不可扩展对象（不能再添加新的属性或方法）</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj); <span class="comment">//将 obj 设置成不可扩展对象</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Tom&quot;</span>; <span class="comment">//新增：静默失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 空 Object 对象 &#123;&#125;</span></span><br><span class="line"><span class="comment">//使用 Object.defineProperty() 或 Object.defineProperties() 新增属性时会报错</span></span><br><span class="line"><span class="comment">//TypeError: Cannot define property name, object is not extensible</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Tom&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 Object.isExtensible() 方法可以判断对象是否可扩展 */</span></span><br><span class="line"><span class="comment">//返回 true表示可扩展 false表示不可扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj));</span><br></pre></td></tr></table></figure>

<h3 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h3><p>描述：密封的对象。一旦将对象进行了密封，则不能为该对象新增属性或方法、同时该对象已有属性的描述符的 <code>configurable</code> 的值将变为 false</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person); <span class="comment">//将 person 设置成密封的对象</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">12</span>; <span class="comment">//静默失败</span></span><br><span class="line"><span class="comment">//下面修改了已有属性的描述符的 configurable、enumerable 的值</span></span><br><span class="line"><span class="comment">//抛出类型错误 TypeError: Cannot redefine property</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">//不可修改</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">//不可修改</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 Object.isSealed() 方法可以判断对象是否被密封 */</span></span><br><span class="line"><span class="comment">//返回 true 表示被密封了，false 表示没有被密封</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person));</span><br></pre></td></tr></table></figure>

<h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h3><p>描述：冻结的对象。一旦将对象进行了冻结，那么该对象不能做任何修改（不可新增属性或方法，已有属性的描述符的 <code>configurable</code>、<code>writable</code> 的值将变为 false）</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj); <span class="comment">//将 obj 设置成冻结的对象</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>; <span class="comment">//新增：静默失败</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Bob&quot;</span>; <span class="comment">//修改：静默失败</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>; <span class="comment">//删除：静默失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123; name: &#x27;Tom&#x27; &#125;</span></span><br><span class="line"><span class="comment">//使用 Object.defineProperty() 或 Object.defineProperties() 新增属性或修改已属性时都会报错</span></span><br><span class="line"><span class="comment">//TypeError: Cannot redefine property</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Bob&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//TypeError: Cannot define property age, object is not extensible</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 Object.isFrozen() 方法可以判断对象是否被冻结 */</span></span><br><span class="line"><span class="comment">//返回 true 表示被冻结了，false 表示没有被冻结</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(六) 函数</title>
    <url>/posts/e8048261.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一个函数是可以通过外部代码<strong>调用</strong>的一个“子程序”。函数中可以封装一系列语句，在需要时直接调用该函数。在定义函数时可以将值传递至函数，同时在调用函数时也可以返回一个值</p>
<h2 id="创建与调用函数"><a href="#创建与调用函数" class="headerlink" title="创建与调用函数"></a>创建与调用函数</h2><p><strong>1、使用 函数表达式 来创建一个函数</strong></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line">变量名(实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">name</span>) <span class="comment">// fun</span></span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2、使用 函数声明语句 来创建一个函数</strong></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N);</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你调用了&quot;</span> + arg + <span class="string">&quot;函数&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">name</span>) <span class="comment">// fun</span></span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&quot;fun&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><p>函数体为可执行的语句，只在调用函数时执行</p>
<h3 id="形参-与-实参"><a href="#形参-与-实参" class="headerlink" title="形参 与 实参"></a><span title="形式参数">形参</span> 与 <span title="实际参数">实参</span></h3><p>形参是一个未声明的局部变量，只在调用函数时被声明和赋值</p>
<p>而实参则是对应形参的实际值，可以是任何表达式</p>
<p>形参和实参是可选项可以为空</p>
<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>函数表达式会将该函数( Function类型对象 )作为值返回</p>
<p>在 JavaScript 中 <strong>函数表达式</strong> 和 <strong>函数声明语句</strong> 都使用了 function关键字</p>
<p>Js 引擎在解析一条语句时，如果 function关键字前有相关运算符，则会将其作为函数表达式执行，如果没有则会将其作为函数声明语句执行</p>
<h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><p>在 JavaScript 中函数是一个”Function类型对象”，因此函数和对象的使用是一样的</p>
<p>不同的是函数除了可以添加属性外，还可以<strong>封装</strong>和<strong>调用</strong></p>
<h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p><code>return</code>语句用来设置函数的返回值</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">sum</span>(<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>); <span class="comment">//result 的值为19</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="attr">sey</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="title function_">fun</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">sey</span>());</span><br></pre></td></tr></table></figure>

<p>return 语句可以终止函数的执行( return 后的语句将不会执行 )，并返回一个指定的值给<strong>函数调用表达式</strong>( 默认返回 undefined )</p>
<p>函数的返回值可以是任何数据类型</p>
</blockquote>
<h2 id="方法（methods）"><a href="#方法（methods）" class="headerlink" title="方法（methods）"></a>方法（<em>methods</em>）</h2><p>在对象中如果一个属性值是一个函数，则该属性可以称为该对象的方法</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1.通过对象字面量添加方法 */</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">  属性名: 函数表达式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.通过访问对象表达式添加方法 */</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = &#123;&#125; <span class="comment">//初始化对象</span></span><br><span class="line">对象名.属性名 = 函数表达式</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法调用 */</span></span><br><span class="line">对象名.属性名()</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建对象 */</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">birth</span>: <span class="number">2002</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>(); <span class="comment">//返回当前年份到变量y</span></span><br><span class="line">        <span class="keyword">return</span> y - <span class="variable language_">this</span>.<span class="property">birth</span>; <span class="comment">//计算年龄并返回给方法调用表达式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 方法调用 */</span></span><br><span class="line">person.<span class="title function_">age</span>()</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><p><code>toString</code> 方法是 Object 类型对象中的一个方法，任何对象都可以使用该方法。该方法用来将任意数据类型转换成字符串并返回</p>
<p>在使用 <code>console.log()</code> 输出对象到控制台时其输出值在不同<strong>运行环境</strong>( 如Chrome、FireFox、Node.js … )会略有不同，默认情况下输出一个对象的值，实际上是输出对象中 <code>toString</code> 方法的<strong>返回值</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;value&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="title function_">toString</span>()); <span class="comment">// function fun()&#123;&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="string">&#x27;is Object&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(obj); <span class="comment">// is Object</span></span><br></pre></td></tr></table></figure>

<p>当两个对象做比较运算( 如 <code>&lt;</code> <code>&gt;</code> <code>==</code> 仅相等运算有意义 )时，则是比较对象的引用值( 内存地址 )，其它与对象有关的运算，默认情况下都是和对象的 <code>toString</code> 方法的返回值做运算</p>
</blockquote>
<h2 id="立即调用函数表达式（IIFE）"><a href="#立即调用函数表达式（IIFE）" class="headerlink" title="立即调用函数表达式（IIFE）"></a>立即调用函数表达式（<em>IIFE</em>）</h2><p><strong>立即调用函数表达式</strong> 是一个在定义时就会立即执行的函数，也称立即执行函数</p>
<p>它由 <code>函数表达式+()</code> 组成</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N]</span>)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;)([实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N])</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;)(str)</span><br></pre></td></tr></table></figure>

<h2 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h2><p><strong><code>arguments</code></strong> 是 Js 引擎在执行时自动向函数中添加的<strong>局部变量</strong>，其值是一个保存了函数实参的<strong>类数组对象</strong>（类似数组，但不是数组）</p>
<p>属性：</p>
<ul>
<li><p><strong><code>.length</code> 获取实参的个数</strong></p>
</li>
<li><p><strong><code>.callee</code> 返回当前执行的函数</strong></p>
</li>
<li><p><strong><code>[下标]</code> 根据索引返回或修改实参的值</strong></p>
</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">//执行结果：4</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="variable language_">arguments</span>[<span class="number">2</span>]); <span class="comment">//输出：0 2 3</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="全局与局部变量"><a href="#全局与局部变量" class="headerlink" title="全局与局部变量"></a>全局与局部变量</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>通常函数内声明的变量都为局部变量，在调用函数时函数内声明的变量只在该函数内有效</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lv=<span class="string">&#x27;我是局部变量&#x27;</span>;</span><br><span class="line">  <span class="comment">/* 在函数内输出 */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lv); <span class="comment">// 我是局部变量</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">/* 在函数外输出 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lv) <span class="comment">//报错：test is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>默认情况下，不再函数内声明的变量都为全局变量，如果变量不声明(<del><code>var</code></del>)直接赋值，则该变量直接为全局变量</p>
<p>全局变量在函数内或函数外都可以访问</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> gv = <span class="string">&#x27;我是全局变量&#x27;</span>;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">/* 在函数内输出 */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(gv); <span class="comment">// 我是全局变量</span></span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">/* 在函数外输出 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gv) <span class="comment">// 我是全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	a = <span class="number">666</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">// 666 666</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h3><p>默认情况下，全局变量会作为在全局对象<code>window</code>的属性和方法存储</p>
<p>在 Js 中，访问一个全局变量，默认会从全局对象<code>window</code>中访问</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>, <span class="variable language_">window</span>.<span class="title function_">fun</span>()); <span class="comment">//输出：123 123</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（<em>scope</em>）</h2><p>作用域是指一个变量作用的 <strong>范围</strong></p>
<p>分类：</p>
<ul>
<li>全局作用域</li>
<li>函数作用域</li>
</ul>
<p>全局作用域中的变量即全局变量，函数作用域中的变量即局部变量</p>
<p>在浏览器中，全局作用域其作用范围是整个页面。函数作用域其作用范围只在函数内</p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>函数内可以嵌套多个函数，而作用域则是根据函数代码的层次进行分层，以使子作用域可以访问父级作用域中的变量，而不能从父作用域引用子级作用域中的变量</p>
<p>如果一个变量不 “在当前的作用域中”，则会从父级作用域中查找，即沿着链式的作用域链查找( 就近原则 )</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;	<span class="comment">//外层函数</span></span><br><span class="line">	<span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;	<span class="comment">//内层函数</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//输出结果: 20</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">fun2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>();</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/public/image/20221112103929" alt="作用域"></p>
<p>当内层函数要访问一个变量时，会先在当前作用域中查找，若不存在，则向上一级作用域中查找，直到找到全局作用域，如果全局作用域中依然没有找到，则会报错 ReferenceError</p>
</blockquote>
<h3 id="变量提升（Hoisting）"><a href="#变量提升（Hoisting）" class="headerlink" title="变量提升（Hoisting）"></a>变量提升（<em>Hoisting</em>）</h3><p><strong>使用var关键字声明，会在当前作用域中提前声明</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);	<span class="comment">//输出：undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);	<span class="comment">//报错：b is not defined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;			<span class="comment">//这里发生变量提升</span></span><br><span class="line">b = <span class="number">2</span>;					<span class="comment">//不使用var关键字声明，则不会发生变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">//输出：1 2</span></span><br></pre></td></tr></table></figure>

<p><strong>使用function关键字声明，会在当前作用域中提前声明</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">fun</span>(); <span class="comment">//错误：fun is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun); <span class="comment">//输出：undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="comment">//function声明会将引用值一起提升</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//这里只提升声明</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is function&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>function</code>声明要比<code>var</code>声明的优先级更高</strong></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="title function_">toString</span>()); <span class="comment">// [Function: fn]</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is function&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：JavaScript 中 var 关键字只会提升声明，不会提升其初始化的值，而 function 声明则会将其引用值提升</p>
</blockquote>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript(五) 对象与数组</title>
    <url>/posts/3c330ff4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对象-（object）"><a href="#对象-（object）" class="headerlink" title="对象 （object）"></a>对象 （object）</h2><p>一个对象就是一系列属性的集合，一个属性包含一个名和一个值</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 对象字面量 */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对象是由一系列属性组成，每一个属性都有一个名字（如上面案例中的 name、age），和一个值（如上面案例中的 ‘zs’、18）。每一个名/值对之间用逗号( <code>,</code> )分隔，并且名和值之间由冒号( <code>:</code> )分隔</p>
<p>对象中的属性值可以是任何类型的数据( 包括对象 )</p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p><strong>使用 对象字面量 创建一个对象</strong></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = 对象字面量</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;	<span class="comment">//创建一个名为obj的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj); <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="comment">/* 创建一个名为obj2的对象，对象中包含两个属性 */</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="访问对象表达式"><a href="#访问对象表达式" class="headerlink" title="访问对象表达式"></a>访问对象表达式</h3><p><strong>1、点表示法</strong></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象.属性名</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person;					<span class="comment">//返回person对象</span></span><br><span class="line">person.<span class="property">name</span>;		<span class="comment">//返回person对象中name属性的值</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">18</span>;	<span class="comment">//向person对象中的name属性赋值</span></span><br></pre></td></tr></table></figure>

<p><strong>2、括号表示法</strong></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象[属性名]</span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="属性与变量"><a href="#属性与变量" class="headerlink" title="属性与变量"></a>属性与变量</h3><p>对象中的属性和变量都可以用来存储任意类型的数据，并且它们的值都是可以更变的</p>
<ul>
<li>当向对象中的属性赋值时，如果对象中不包含该属性，则会自动添加该属性并赋值</li>
</ul>
<h3 id="点与括号"><a href="#点与括号" class="headerlink" title="点与括号"></a>点与括号</h3><p>点和括号都可以用来分隔对象的名称字段，在对象中，属性名可以是任何字符</p>
<ul>
<li>点表示法只能使用合法字符作为属性名，而括号表示法可以将任何表达式的值作为属性名</li>
<li>如果属性名为不合法( 与 Js 语法相冲突 )的标识符，则必须用括号表示法</li>
</ul>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  [<span class="string">&#x27;.+-*/&amp;|!&#x27;</span>]: <span class="number">1234</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;.+-*/&amp;|!&#x27;</span>])	<span class="comment">//返回1234</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  [o1]: <span class="string">&#x27;Joy&#x27;</span>	<span class="comment">//将变量o1的值作为属性名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在实际开发中对象的属性名尽量按照标识符的规范命名</p>
</blockquote>
<h3 id="delete-运算符"><a href="#delete-运算符" class="headerlink" title="delete 运算符"></a>delete 运算符</h3><p>当要删除一个对象中的属性时，可以使用 delete 运算符</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> 对象.属性名</span><br><span class="line"> or</span><br><span class="line"><span class="keyword">delete</span> 对象[属性名]</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">one</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">one</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);	<span class="comment">//输出为 &#123;&#125; 空对象</span></span><br></pre></td></tr></table></figure>

<h2 id="数组（array）"><a href="#数组（array）" class="headerlink" title="数组（array）"></a>数组（array）</h2><p>数组是一个<strong>有序</strong>的数据集合，通常被描述为“像列表一样的对象”</p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 数组字面量 */</span></span><br><span class="line">[</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">	[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;Joy&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>数组由一系列的值组成，每一个值被称作一个元素( 元素可以是任何类型的数据，包括对象 )，且值与值之间用( <code>,</code> )分隔</p>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = 数组字面量</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];	<span class="comment">//创建一个名为arr的数组</span></span><br><span class="line"><span class="comment">/* 创建一个名为arr2的数组，数组中包含3个元素 */</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br></pre></td></tr></table></figure>

<h3 id="访问数组表达式"><a href="#访问数组表达式" class="headerlink" title="访问数组表达式"></a>访问数组表达式</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">数组[索引]</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list			<span class="comment">//返回list数组</span></span><br><span class="line">list[<span class="number">0</span>];	<span class="comment">//返回list数组中第1个元素的值</span></span><br><span class="line">list[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//向list数组中的第1个元素赋值</span></span><br></pre></td></tr></table></figure>

<blockquote>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>数组中每一个元素都有一个数字编号称为索引，索引是从0开始的整数，通过索引可以访问数组元素的值</p>
<h3 id="数组也是对象"><a href="#数组也是对象" class="headerlink" title="数组也是对象"></a>数组也是对象</h3><p>数组用<code>[]</code>表示，对象用<code>&#123;&#125;</code>表示。数组和对象一样，都可以添加属性，区别是数组中如果属性名为整数字符，则会将其作为数组元素( 有序数据 )来表示</p>
<p>使用 typeof 检查数组数据类型时，返回 ‘object’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">typeof</span> arr <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="数组的实例属性和方法"><a href="#数组的实例属性和方法" class="headerlink" title="数组的实例属性和方法"></a>数组的实例属性和方法</h3><p><strong>属性：</strong></p>
<ul>
<li><a href="https://www.w3school.com.cn/jsref/jsref_length_array.asp"><code>.length</code></a> 返回或更改数组的长度</li>
</ul>
<p><strong>方法：</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
<th>原数组</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_concat_array.asp">.concat()</a></td>
<td>将两个或多个数组连接合并为一个数组，并返回合并后的数组</td>
<td>不改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_join.asp">.join()</a></td>
<td>将一个数组的所有元素连接成一个字符串，并返回这个字符串</td>
<td>不改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_pop.asp">.pop()</a></td>
<td>删除并返回数组中最后一个元素</td>
<td>改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_shift.asp">.shift()</a></td>
<td>删除并返回数组中的第一个元素</td>
<td>改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_push.asp">.push()</a></td>
<td>将一个或多个元素添加到数组的末尾，并返回该数组的新长度(<code>.length</code>)</td>
<td>改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_unshift.asp">.unshift()</a></td>
<td>将一个或多个元素添加到数组的开头，并返回该数组的新长度(<code>.length</code>)</td>
<td>改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_sort.asp">.sort()</a></td>
<td>对数组的元素进行排序，并返回排列后的数组</td>
<td>改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_reverse.asp">.reverse()</a></td>
<td>颠倒数组中元素的顺序，并返回颠倒后的数组</td>
<td>改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_slice_array.asp">.slice()</a></td>
<td>提取数组中指定的元素，并将提取出的元素作为新的数组返回</td>
<td>不改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_splice.asp">.splice()</a></td>
<td>删除或替换数组中指定的元素，并将删除或替换后的数组返回</td>
<td>改变</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/jsref/jsref_indexof_array.asp">.indexOf()</a></td>
<td>查找数组中是否包含指定的元素，如果不包含则返回<code>-1</code>，包含则返回该元素的索引值</td>
<td>不改变</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p>in运算符可以检测一个属性是否在指定的对象中，如果在则返回 <code>true</code>，不在则返回 <code>false</code></p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">属性 <span class="keyword">in</span> 对象名 <span class="comment">//属性可以是属性名( 字符串 ) 或 数组索引( 数字 )</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">	<span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> obj, <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">//输出：true false</span></span><br></pre></td></tr></table></figure>

<h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p><code>for...in</code>语句用来迭代对象中所有<strong>可枚举</strong>的属性</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名) &#123;</span><br><span class="line">	<span class="comment">//循环体(语句)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj.&quot;</span> + prop + <span class="string">&quot; = &quot;</span> + obj[prop]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS：当 in运算符在 for语句中使用时，其作用就会增加( 增加了赋值和迭代的作用 )</p>
<p><strong>执行步骤：</strong></p>
<p>在 <code>for...in</code> 语句中，in运算符会先将对象中的第1个属性名赋值到左侧变量中，赋值完成后就会执行一次循环体，之后跳回赋值阶段赋值第2个属性名，并再次执行循环体，以此不断循环直至循环到最后一个属性名为止</p>
</blockquote>
<h2 id="原始值和引用值"><a href="#原始值和引用值" class="headerlink" title="原始值和引用值"></a>原始值和引用值</h2><p>JavaScript 基本数据类型在语言最底层面表现为不可变值，这些值被称为原始值，如：数值，布尔值等…</p>
<p>JavaScript 中 像对象、数组和函数都被称为引用值，它在语言最底层面表现为可变值</p>
<p>这里的可变值是指无需创建新值即可更改的值，而不可变值是指如果不创建新的值，就无法更改其数据的值</p>
<p>ECMAScript 标准中指定原始值存储在栈内存中，而引用值存储在堆内存中。栈内存和堆内存代表了 2 种不同的存储方式</p>
<blockquote>
<h3 id="栈内存-stack-memory"><a href="#栈内存-stack-memory" class="headerlink" title="栈内存( stack memory )"></a>栈内存( stack memory )</h3><ul>
<li>栈内存是一个连续的内存空间，栈内存遵循 <em>FILO</em> 的原则，即 <em>后进先出</em> 的原则</li>
<li>栈内存用来存储大小固定的数据，这些数据在编译时大小就被确定</li>
<li>在 JavaScript 中，栈内存主要被用来存储函数执行上下文及其变量</li>
<li>栈内存的数据存取速度要高于堆内存</li>
</ul>
<h3 id="堆内存-heap-memory"><a href="#堆内存-heap-memory" class="headerlink" title="堆内存( heap memory )"></a>堆内存( heap memory )</h3><ul>
<li>堆内存是一种非连续的存储结构，通常采用链表或树形结构进行管理</li>
<li>堆内存中每个数据项都保存了指向其它数据项的地址信息，这使得堆内存的存取非常灵活</li>
<li>堆内存空间是在运行时动态分配的，用于存储一些大小不确定的数据</li>
<li>当堆内存中的某个数据不再被引用时，它所占用的内存会被 JavaScript 引擎中的垃圾回收器自动释放。垃圾回收器会根据一定的算法来判断哪些数据没有被引用，然后释放这些数据所占用的内存</li>
</ul>
</blockquote>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">456</span>;</span><br></pre></td></tr></table></figure>

<p>例图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/public/s/20230503105219" alt="img01"></p>
<p>当创建一个对象时，会先在堆内存中分配一块内存空间来存储对象，而栈内存则存储的是该对象所在堆内存的内存地址（引用值）</p>
<p>例图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/public/s/20230211111728" alt="img02"></p>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>);	<span class="comment">//输出：&#x27;李四&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);	<span class="comment">//输出：&#x27;李四&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js (一) 安装使用与CommanJS模块化</title>
    <url>/posts/cca2ffbf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Node.js 是基于谷歌 V8( 一种JavaScript 引擎 )构建的一种 JavaScript 运行环境，由 Ryan Dahl 开发</p>
<p>Node.js 使 JavaScript 脱离了浏览器，可以实现服务器开发的一种 JavaScript 运行环境</p>
<h2 id="Node-js-的安装"><a href="#Node-js-的安装" class="headerlink" title="Node.js 的安装"></a>Node.js 的安装</h2><p>官方地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p>
<p>安装完成后，输入 <code>node -v</code> 命令检测是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v <span class="comment">#显示node版本号</span></span></span><br><span class="line">v17.6.0</span><br></pre></td></tr></table></figure>

<p>通常 nodejs 安装时会自动安装 <code>npm</code>（node package manager）。输入 <code>npm -v</code> 检查 npm 是否安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v <span class="comment">#显示npm版本号</span></span></span><br><span class="line">8.5.1</span><br></pre></td></tr></table></figure>

<h2 id="Node-js-版本管理"><a href="#Node-js-版本管理" class="headerlink" title="Node.js 版本管理"></a>Node.js 版本管理</h2><p>推荐下面这款工具来管理 Node.js 的版本</p>
<ul>
<li><p>fnm: <a href="https://kkgithub.com/Schniz/fnm">https://github.com/Schniz/fnm</a>（推荐!!）</p>
<ul>
<li>特点: 基于 Rust、快速、简单、垮平台</li>
</ul>
</li>
</ul>
<p><strong>fnm 的使用：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已安装的所有版本及版本别名(包括系统内安装的版本)</span></span><br><span class="line">fnm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看官方发布的所有可用版本</span></span><br><span class="line">fnm ls-remote</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定版本</span></span><br><span class="line">fnm install 21.6.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新的 LTS 版本</span></span><br><span class="line">fnm install --lts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用国内源安装最新的 LTS 版本</span></span><br><span class="line">fnm install --lts --node-dist-mirror=https://npmmirror.com/mirrors/node</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定版本</span></span><br><span class="line">fnm use 21.6.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前正在使用的版本</span></span><br><span class="line">fnm current</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置已安装版本的别名</span></span><br><span class="line">fnm alias 20.8.1 dev # fnm use dev 切换至 20.8.1 版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认版本</span></span><br><span class="line">fnm default 18.21.1 # fnm use default 切换至 18.21.1 版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载指定版本, 可以使用别名</span></span><br><span class="line">fnm uninstall 18.21.1 # 不指定版本号则会卸载当前正在使用的版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定版本来执行某个全局命令</span></span><br><span class="line">fnm exec --using=18 node -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在应用目录写入文件，指定特定版本</span></span><br><span class="line">echo &#x27;16.20.2&#x27; &gt; .node-version # fnm use . 使用 .node-version 文件中指定版本</span><br><span class="line"></span><br><span class="line">fnm env</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 fnm 所有环境变量, 用于删除 fnm</span></span><br></pre></td></tr></table></figure>

<h2 id="模块（Module）"><a href="#模块（Module）" class="headerlink" title="模块（Module）"></a>模块（Module）</h2><p>Node.js 是基于 CommonJS 模块化规范实现的<strong>模块系统</strong></p>
<p>在 CommonJS 模块化规范中一个文件就是一个模块，每个模块都有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见</p>
<p>每个模块中必须有一个变量 <code>module</code>，它是一个对象，代表当前模块自身，通过 <code>module.exports</code> 或 <code>exports</code> 对象可以导出当前模块的方法或者变量</p>
<p>exports 和 module.exports 默认为相等关系：<code>exports === module.exports</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">thyName</span>)&#123;</span><br><span class="line">  name = thyName</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 <code>module.require()</code> 方法 或 <code>require()</code> 函数来引入某个模块，函数会返回被引入模块中的 <code>module.exports</code> 对象</p>
<p>require 和 module.require 默认为相等关系：<code>require === module.require</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getModule.js</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./module&#x27;</span>);</span><br><span class="line">myModule.<span class="title function_">setName</span>(<span class="string">&#x27;Timeic&#x27;</span>);</span><br><span class="line">myModule.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure>

<p>在模块中，变量this <strong>默认</strong>指向当前模块的导出对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> == <span class="variable language_">module</span>.<span class="property">exports</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> == <span class="built_in">exports</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在Node.js中，模块分为两类：</p>
<p>一类是Node.js自身提供的模块，称为核心模块；另一类是用户编写的模块，称为文件模块</p>
<p>核心模块部分在Node 源代码的编译过程中，被编译成了二进制执行文件。在Node 进程启动时，核心模块就被直接加载进内存中，所以核心模块的加载速度是最快的，如：http、fs、url等</p>
<p>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程。速度相比核心模块稍微慢一些</p>
<h2 id="包（Package）"><a href="#包（Package）" class="headerlink" title="包（Package）"></a>包（Package）</h2><p>包是实现模块系统的重要规范，Node.js 中包就是一个目录，一个包中包含了模块所需的所有文件，符合 CommonJS 模块化规范的包目录，应该包含以下文件：</p>
<ul>
<li><p>package.json：包的描述文件(必要文件‼️)，必须在包的根目录下</p>
</li>
<li><p>bin：可执行二进制文件放在该目录下</p>
</li>
<li><p>lib：JavaScript代码放在该目录下</p>
</li>
<li><p>doc：文档放在该目录下</p>
</li>
<li><p>test：单元测试放在该目录下</p>
</li>
</ul>
<h2 id="npm-命令行工具"><a href="#npm-命令行工具" class="headerlink" title="npm 命令行工具"></a>npm 命令行工具</h2><p>npm 是一个命令行工具，它是 JavaScript 的包管理工具，借助 npm 我们可以实现 JavaScript 模块的发布，安装和依赖等</p>
<p><strong>使用 npm 工具创建一个JavaScript项目：</strong></p>
<p>1.新建一个名为 test 的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>

<p>2.并在该目录下执行 <code>npm init</code> 命令，之后根据提示输入信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm init</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出：</span></span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">...</span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (test)  # 输入包名/项目名称</span><br><span class="line">version: (1.0.0)  # 输入项目版本号</span><br><span class="line">description:  # 输入项目描述</span><br><span class="line">entry point: (index.js)  # 输入模块的入口文件</span><br><span class="line">test command:  # 输入测试命令</span><br><span class="line">git repository:  # 输入git仓库地址</span><br><span class="line">keywords:  # 输入项目关键词</span><br><span class="line">author:  # 输入作者</span><br><span class="line">license: (ISC)  # 输入开源协议</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package.json的创建内容：</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;test&quot;,</span><br><span class="line">&quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">&quot;description&quot;: &quot;一个测试项目&quot;,</span><br><span class="line">&quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"> &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;author&quot;: &quot;Timeic&quot;,</span><br><span class="line">&quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Is this OK? (yes)  # 会车即可确认创建package.json</span><br></pre></td></tr></table></figure>

<h3 id="npm-常用命令"><a href="#npm-常用命令" class="headerlink" title="npm 常用命令"></a>npm 常用命令</h3><ul>
<li><p>初始化项目: <code>npm init</code></p>
<ul>
<li><code>-y</code>: 使用默认配置</li>
</ul>
</li>
<li><p>搜索包: <code>npm search &lt;包名&gt;</code></p>
</li>
<li><p>安装包: <code>npm install/i &lt;包名&gt;</code></p>
<ul>
<li><code>--save</code>：默认参数，将下载或本地的包文件解压到当前目录下的<code>node_modules</code>目录( 安装 )，并将其添加到项目依赖中</li>
</ul>
</li>
<li><p>卸载包: <code>npm uninstall &lt;包名&gt;</code></p>
<ul>
<li>别名：<code>npm remove/rm/r &lt;包名&gt;</code></li>
</ul>
</li>
<li><p>安装指定版本的npm: <code>npm install npm@x.x.x -g</code></p>
<ul>
<li><code>@latest</code>：最新版</li>
</ul>
</li>
<li><p>设置淘宝镜像源: <code>npm config set registry https://registry.npmmirror.com</code></p>
</li>
<li><p>设置官方镜像源: <code>npm config set registry https://registry.npmjs.org</code></p>
</li>
<li><p>查看当前镜像源: <code>npm config get registry</code></p>
</li>
</ul>
<h2 id="模块的实现"><a href="#模块的实现" class="headerlink" title="模块的实现"></a>模块的实现</h2><p>Node.js 运行时会将每个模块中代码包装到一个函数内执行，Node.js 会将模块所需要的接口作为该函数的参数传入，函数代码大致如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">    <span class="comment">// 模块中的代码</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exports 用于导出当前模块中的变量或方法的对象</span></span><br><span class="line"><span class="comment">require 用于引入某个模块的函数</span></span><br><span class="line"><span class="comment">module 表示当前模块的对象</span></span><br><span class="line"><span class="comment">__filename 表示当前文件的完整名称</span></span><br><span class="line"><span class="comment">__dirname 表示当前目录的完整名称</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>模块标识符：</strong></p>
<p>模块标识符是用来查找和定位模块的一个字符串</p>
<h3 id="文件模块的查找规则"><a href="#文件模块的查找规则" class="headerlink" title="文件模块的查找规则"></a>文件模块的查找规则</h3><p>在使用 require() 函数加载文件模块时，Node.js 会根据传入的参数，即模块标识符，对文件进行查找，查找规则如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>情况一</strong>：xxx是一个核心模块，则直接返回核心模块，并停止查找，比如：path、http等</p>
<p><strong>情况二</strong>：xxx以<code>./</code>(当前目录)、<code>../</code>(上一级目录)、<code>/</code>(根目录)开头的，会将xxx作 为文件在对应目录进行查找，查找规则如下：</p>
<ul>
<li><p>有后缀名，按照当前后缀名查找对应的文件</p>
</li>
<li><p>没有后缀名，会按照如下顺序查找：</p>
<ol>
<li><p>直接查找文件xxx</p>
</li>
<li><p>查找 xxx.js文件</p>
</li>
<li><p>查找 xxx.json文件</p>
</li>
<li><p>查找 xxx.node文件</p>
</li>
</ol>
</li>
<li><p>如果依然没找到，则会将xxx作为目录查找，查找规则如下：</p>
<ol>
<li><p>查找 xxx/index.js</p>
</li>
<li><p>查找 xxx/index.json</p>
</li>
<li><p>查找 xxx/index.node</p>
</li>
</ol>
</li>
<li><p>如果还没找到，则抛出异常：not found</p>
</li>
<li><p>如果找到，则会使用<code>JSON.parse()</code>方法解析该目录下的<code>package.json</code>文件的内容来得到描述对象，然后根据对象中main属性( 默认为index.js )指定的<strong>模块标识符</strong>来查找文件</p>
</li>
<li><p>如果没找到，则抛出异常：not found</p>
</li>
</ul>
<p><strong>情况三</strong>：如果 xxx是一个单词(不包含特殊符号，如：<code>./</code>、<code>/</code>、空格等)，并且xxx不是一个核心模块，则会将其作为一个包( 目录 )来查找，查找规则如下：</p>
<p>从当前模块的<code>module.paths</code>属性中的所有路径以及全局路径下<strong>依次</strong>查找名为 xxx的目录</p>
<p><code>require()</code> 函数加载文件模块时采用同步加载，为了提高效率，Node.js 运行时会缓存已经加载过的文件，当发现某个文件已加载过了，则直接从缓存中加载，不会重复加载同一个文件模块</p>
<p>查看已缓存的模块：<code>console.log(require.cache)</code></p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js (二) 核心模块</title>
    <url>/posts/6d1b06dc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="缓冲区-Buffer"><a href="#缓冲区-Buffer" class="headerlink" title="缓冲区( Buffer )"></a>缓冲区( <a href="https://www.nodeapp.cn/buffer.html">Buffer</a> )</h2><p>Buffer 是 Node.js 中的一个全局对象，它是对 ECMAScript 中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array">Uint8Array</a> API 在 Node.js 中的实现</p>
<p>Buffer 代表内存中的一个独立的区域( V8 <strong>堆</strong> 外分配的内存空间 )，其大小是固定的，无法手动调整，通过 Node.js 中的 Buffer 对象，可以创建这样的一块内存区域，并可以对该区域中的二进制数据进行操作</p>
<p><strong>静态方法：</strong></p>
<h3 id="Buffer-alloc-创建一个指定大小的-buffer"><a href="#Buffer-alloc-创建一个指定大小的-buffer" class="headerlink" title="Buffer.alloc() 创建一个指定大小的 buffer"></a><code>Buffer.alloc()</code> 创建一个指定大小的 buffer</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(size[, fill[, encoding]])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">size 为 Buffer 的大小( 必选 )</span></span><br><span class="line"><span class="comment">fill 为填充数据( 可选，可以是 字符串 or 数字 or buffer，默认为 0 )</span></span><br><span class="line"><span class="comment">encoding( 可选，如果 fill 是字符串，则该值是它的字符编码 )</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建大小为 10 个字节( Byte )、且用 0x64 填充的 Buffer</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>, <span class="number">0x64</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer); <span class="comment">// &lt;buffer 64 64 64 64 64 64 64 64 64 64&gt; ( 默认以16进制数输出 )</span></span><br><span class="line"><span class="comment">// 修改buffer( 类似数组 )</span></span><br><span class="line">buffer[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 仅数字有效</span></span><br><span class="line">buffer[<span class="number">1</span>] = <span class="number">0xa</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer); <span class="comment">// &lt;buffer 01 0a 64 64 64 64 64 64 64 64&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">length</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h3 id="Buffer-from-创建一个填充了指定字符串、数组或-buffer-的新-buffer"><a href="#Buffer-from-创建一个填充了指定字符串、数组或-buffer-的新-buffer" class="headerlink" title="Buffer.from() 创建一个填充了指定字符串、数组或 buffer 的新 buffer"></a><code>Buffer.from()</code> 创建一个填充了指定字符串、数组或 buffer 的新 buffer</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 语法1 */</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">from</span>(array) <span class="comment">// array 为一个数组，数组中只有数字有效</span></span><br><span class="line"><span class="comment">/* 语法2 */</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">from</span>(string[, encoding]) <span class="comment">// string 为一个字符串，encoding 为字符串的字符编码，如：ascii、utf8</span></span><br><span class="line"><span class="comment">/* 语法3 */</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">from</span>(buffer) <span class="comment">// 将指定buffer中的数据拷贝到一个新的buffer中</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer</span></span><br><span class="line"><span class="keyword">const</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// 创建一个包含 [0x68, 0x65, 0x6c, 0x6c, 0x6f] ( UTF-8编码 ) 的 Buffer</span></span><br><span class="line"><span class="keyword">const</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Buffer-isBuffer-obj-判断-obj-是否为-Buffer，返回-true-false"><a href="#Buffer-isBuffer-obj-判断-obj-是否为-Buffer，返回-true-false" class="headerlink" title="Buffer.isBuffer(obj) 判断 obj 是否为 Buffer，返回 true / false"></a><code>Buffer.isBuffer(obj)</code> 判断 obj 是否为 Buffer，返回 true / false</h3><h3 id="Buffer-concat-将多个-buffer-拼接合并为一个-buffer"><a href="#Buffer-concat-将多个-buffer-拼接合并为一个-buffer" class="headerlink" title="Buffer.concat() 将多个 buffer 拼接合并为一个 buffer"></a><code>Buffer.concat()</code> 将多个 buffer 拼接合并为一个 buffer</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">concat</span>(list[, totalLength])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list 要合并的buffer</span></span><br><span class="line"><span class="comment">totalLength 长度限制，合并时 list 的长度( 大小 )</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>实例方法：</strong></p>
<h3 id="buf-fill-向指定-buffer-中填充数据"><a href="#buf-fill-向指定-buffer-中填充数据" class="headerlink" title="buf.fill() 向指定 buffer 中填充数据"></a><code>buf.fill()</code> 向指定 buffer 中填充数据</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">fill</span>(value[, offset[, end]][, encoding])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">value 要填充的值，可以是 字符串 or 数字 or buffer</span></span><br><span class="line"><span class="comment">offset 从指定字节( 索引 )开始往后填充，默认 0</span></span><br><span class="line"><span class="comment">end 从指定字节( 索引 )结束填充，默认 buf.length</span></span><br><span class="line"><span class="comment">encoding 如果 value 是字符串，则这是它的字符编码</span></span><br><span class="line"><span class="comment">返回：填充后的 buffer</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="buf-write-向指定-buffer-中写入数据"><a href="#buf-write-向指定-buffer-中写入数据" class="headerlink" title="buf.write() 向指定 buffer 中写入数据"></a><code>buf.write()</code> 向指定 buffer 中写入数据</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">write</span>(string[, offset[, length]][, encoding])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">string 要写入的字符串</span></span><br><span class="line"><span class="comment">offset 从指定字节( 索引 )开始往后写入，默认 0</span></span><br><span class="line"><span class="comment">length 写入的长度( 大小 )，默认 (buf.length - offset)</span></span><br><span class="line"><span class="comment">encoding 字符编码，默认 utf8</span></span><br><span class="line"><span class="comment">返回：写入的字节大小</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="buf-toString-将指定-buffer-中的数据解码为字符串"><a href="#buf-toString-将指定-buffer-中的数据解码为字符串" class="headerlink" title="buf.toString() 将指定 buffer 中的数据解码为字符串"></a><code>buf.toString()</code> 将指定 buffer 中的数据解码为字符串</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">toString</span>([encoding[, start[, end]]])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">encoding 解码使用的字符编码，默认 utf8</span></span><br><span class="line"><span class="comment">start 从指定字节( 索引 )开始往后解码，默认 0</span></span><br><span class="line"><span class="comment">end 从指定字节( 索引 )结束解码，默认 buf.length</span></span><br><span class="line"><span class="comment">返回：字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="buf-slice-从指定-buffer-中截取出一个新的-buffer"><a href="#buf-slice-从指定-buffer-中截取出一个新的-buffer" class="headerlink" title="buf.slice() 从指定 buffer 中截取出一个新的 buffer"></a><code>buf.slice()</code> 从指定 buffer 中截取出一个新的 buffer</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">slice</span>([start[, end]])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">start 从指定字节( 索引 )开始往后截取，默认 0</span></span><br><span class="line"><span class="comment">end 从指定字节( 索引 )结束截取，默认 buf.length</span></span><br><span class="line"><span class="comment">返回：截取后的新buffer</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="buf-indexOf-搜索-buffer-中是否存在指定内容"><a href="#buf-indexOf-搜索-buffer-中是否存在指定内容" class="headerlink" title="buf.indexOf() 搜索 buffer 中是否存在指定内容"></a><code>buf.indexOf()</code> 搜索 buffer 中是否存在指定内容</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">indexOf</span>(value[, offset][, encoding])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">value 要搜索的值，可以是 字符串 or 数字 or buffer</span></span><br><span class="line"><span class="comment">offset 从指定字节( 索引 )开始往后搜索，默认 0</span></span><br><span class="line"><span class="comment">encoding 如果 value 是一个字符串，则这是它的字符编码，默认 utf8</span></span><br><span class="line"><span class="comment">返回：buf中value首次出现的索引值，如果没有搜索到则返回 -1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="buf-copy-将源-buffer-拷贝到目标-buffer-中"><a href="#buf-copy-将源-buffer-拷贝到目标-buffer-中" class="headerlink" title="buf.copy() 将源 buffer 拷贝到目标 buffer 中"></a><code>buf.copy()</code> 将源 buffer 拷贝到目标 buffer 中</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">buf.<span class="title function_">copy</span>(target[, targetStart[, sourceStart[, sourceEnd]]])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">target 目标 buffer</span></span><br><span class="line"><span class="comment">targetStart 从 目标buffer( target ) 的指定字节开始往后写入拷贝的数据，默认 0</span></span><br><span class="line"><span class="comment">sourceStart 指定要拷贝数据的 源buffer( buf ) 的起始字节，默认 0</span></span><br><span class="line"><span class="comment">sourceEnd 指定要拷贝数据的 源buffer( buf ) 的结束字节，默认 buf.length</span></span><br><span class="line"><span class="comment">返回：被拷贝的字节数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>手写 <code>buf.split()</code> 实例方法</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	sep 要拆分的分隔符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">split</span> = <span class="keyword">function</span> (<span class="params">sep</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(sep).<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> ret = []</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环查找非 sep 的数据</span></span><br><span class="line">    <span class="keyword">while</span> ((offset = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(sep, start)) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        ret.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">slice</span>(start, offset))</span><br><span class="line">        start = offset + len</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防护数据最后面是截取关键词的情况</span></span><br><span class="line">    ret.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">slice</span>(start))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="文件系统-fs"><a href="#文件系统-fs" class="headerlink" title="文件系统( fs )"></a>文件系统( fs )</h2><p>fs 是 Node.js 中专门用来操作文件的模块，模块中所有方法都有同步和异步两种形式，同步文件操作会阻塞程序的执行，而异步文件操作不会，异步文件操作完成时，会通过回调函数将结果返回，且回调函数的第一个参数总是留给异常参数( exception )</p>
<h3 id="fs-readFile-读取文件，同步方法：fs-readFileSync"><a href="#fs-readFile-读取文件，同步方法：fs-readFileSync" class="headerlink" title="fs.readFile() 读取文件，同步方法：fs.readFileSync()"></a><code>fs.readFile()</code> 读取文件，同步方法：<code>fs.readFileSync()</code></h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 文件路径或文件描述符</span></span><br><span class="line"><span class="comment">option 对象 or 字符串( 指定字符编码 )</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		encoding 指定字符编码解析，默认 null ( 不解析，返回buffer )</span></span><br><span class="line"><span class="comment">		flag 指定文件操作符，默认 &#x27;r&#x27;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">callback(err, data) 回调函数</span></span><br><span class="line"><span class="comment">	err 错误对象，文件读取成功时，err 为 null</span></span><br><span class="line"><span class="comment">	data 字符串 or buffer</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-writeFile-写入文件-不保留文件内容-，同步方法：fs-writeFileSync"><a href="#fs-writeFile-写入文件-不保留文件内容-，同步方法：fs-writeFileSync" class="headerlink" title="fs.writeFile() 写入文件( 不保留文件内容 )，同步方法：fs.writeFileSync()"></a><code>fs.writeFile()</code> 写入文件( 不保留文件内容 )，同步方法：<code>fs.writeFileSync()</code></h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">file 文件名或文件描述符，如果写入文件不存在，则会自动创建</span></span><br><span class="line"><span class="comment">data 字符串 or buffer。要写入的数据</span></span><br><span class="line"><span class="comment">option 对象 or 字符串( 指定字符编码 )</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		encoding 指定字符编码写入，默认 utf8</span></span><br><span class="line"><span class="comment">		flag 指定文件操作符，默认 &#x27;w&#x27;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">callback(err) 回调函数</span></span><br><span class="line"><span class="comment">	err 错误对象，文件写入成功时，err 为 null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-appendFile-追加写入文件-在原有内容后面添加新内容-，同步方法：fs-appendFileSync"><a href="#fs-appendFile-追加写入文件-在原有内容后面添加新内容-，同步方法：fs-appendFileSync" class="headerlink" title="fs.appendFile() 追加写入文件( 在原有内容后面添加新内容 )，同步方法：fs.appendFileSync()"></a><code>fs.appendFile()</code> 追加写入文件( 在原有内容后面添加新内容 )，同步方法：<code>fs.appendFileSync()</code></h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(file, data[, options], callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">同 fs.writeFile()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-copyFile-拷贝文件，同步方法：fs-copyFileSync"><a href="#fs-copyFile-拷贝文件，同步方法：fs-copyFileSync" class="headerlink" title="fs.copyFile() 拷贝文件，同步方法：fs.copyFileSync()"></a><code>fs.copyFile()</code> 拷贝文件，同步方法：<code>fs.copyFileSync()</code></h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">copyFile</span>(src, dest, callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">src 要被拷贝的源文件名称</span></span><br><span class="line"><span class="comment">dest 拷贝操作的目标文件名</span></span><br><span class="line"><span class="comment">callback(err) 回调函数</span></span><br><span class="line"><span class="comment">	err 错误对象，文件拷贝成功时，err 为 null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-watchFile-监听文件，同步方法：fs-watchFileSync"><a href="#fs-watchFile-监听文件，同步方法：fs-watchFileSync" class="headerlink" title="fs.watchFile() 监听文件，同步方法：fs.watchFileSync()"></a><code>fs.watchFile()</code> 监听文件，同步方法：<code>fs.watchFileSync()</code></h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">watchFile</span>(filename[, options], listener)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">filename 文件名</span></span><br><span class="line"><span class="comment">options 对象</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		interval 间隔时间 ms，默认 5007</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">listener(current, previous) 回调函数，文件修改时调用</span></span><br><span class="line"><span class="comment">	current 文件修改后的状态</span></span><br><span class="line"><span class="comment">	previous 文件修改前的状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fs.<span class="title function_">unwatchFile</span>(filename)</span><br><span class="line"><span class="comment">// 取消监听文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">filename 文件名</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-open-打开文件，同步方法：fs-openSync"><a href="#fs-open-打开文件，同步方法：fs-openSync" class="headerlink" title="fs.open() 打开文件，同步方法：fs.openSync()"></a><code>fs.open()</code> 打开文件，同步方法：<code>fs.openSync()</code></h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">open</span>(path, flags, callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 文件路径</span></span><br><span class="line"><span class="comment">flags 指定文件操作符</span></span><br><span class="line"><span class="comment">callback(err, fd) 回调函数</span></span><br><span class="line"><span class="comment">	err 错误对象，文件打开成功时，err 为 null</span></span><br><span class="line"><span class="comment">	fd 被打开文件的文件描述符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">fs.<span class="title function_">close</span>(fd, callback)</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fd 文件描述符</span></span><br><span class="line"><span class="comment">callback(err) 回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-read-读文件-读取文件并写入到-buffer-中"><a href="#fs-read-读文件-读取文件并写入到-buffer-中" class="headerlink" title="fs.read() 读文件( 读取文件并写入到 buffer 中 )"></a><code>fs.read()</code> 读文件( 读取文件并写入到 buffer 中 )</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">read</span>(fd, buffer, offset, length, position, callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fd 文件描述符</span></span><br><span class="line"><span class="comment">buffer 要写入的 buffer</span></span><br><span class="line"><span class="comment">offset 从 buffer 的指定字节开始往后写入</span></span><br><span class="line"><span class="comment">length 写入的长度( 大小 )</span></span><br><span class="line"><span class="comment">position 从文件( fd )的指定字节开始写入( buffer )</span></span><br><span class="line"><span class="comment">callback(err, bytesRead, buffer)</span></span><br><span class="line"><span class="comment">	err 错误对象，文件读成功时，err 为 null</span></span><br><span class="line"><span class="comment">	bytesRead 从文件( fd )中读的字节数</span></span><br><span class="line"><span class="comment">	buffer</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-write-写文件-读取-buffer-中数据并写入到文件中"><a href="#fs-write-写文件-读取-buffer-中数据并写入到文件中" class="headerlink" title="fs.write() 写文件( 读取 buffer 中数据并写入到文件中 )"></a><code>fs.write()</code> 写文件( 读取 buffer 中数据并写入到文件中 )</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">write</span>(fd, buffer[, offset[, length[, position]]], callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fd 文件描述符</span></span><br><span class="line"><span class="comment">buffer 要读取 buffer</span></span><br><span class="line"><span class="comment">offset 从 buffer 的指定字节开始往后读取数据</span></span><br><span class="line"><span class="comment">length 读取的长度( 大小 )</span></span><br><span class="line"><span class="comment">position 从文件( fd )的指定字节开始写入( 文件 )</span></span><br><span class="line"><span class="comment">callback(err, bytesRead, buffer)</span></span><br><span class="line"><span class="comment">	err 错误对象，文件写成功时，err 为 null</span></span><br><span class="line"><span class="comment">	bytesRead 从文件( fd )中读的字节数</span></span><br><span class="line"><span class="comment">	buffer</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-access-判断文件或目录是否具有相应权限"><a href="#fs-access-判断文件或目录是否具有相应权限" class="headerlink" title="fs.access() 判断文件或目录是否具有相应权限"></a><code>fs.access()</code> 判断文件或目录是否具有相应权限</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">access</span>(path, callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 文件路径</span></span><br><span class="line"><span class="comment">callback(err) 回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-stat-获取文件目录信息"><a href="#fs-stat-获取文件目录信息" class="headerlink" title="fs.stat() 获取文件目录信息"></a><code>fs.stat()</code> 获取文件目录信息</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> fs.<span class="title function_">stat</span>(path, callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 路径</span></span><br><span class="line"><span class="comment">callback(err, stats) 回调函数</span></span><br><span class="line"><span class="comment">	err 错误对象</span></span><br><span class="line"><span class="comment">	stats 对象</span></span><br><span class="line"><span class="comment">		stats.size 文件大小</span></span><br><span class="line"><span class="comment">		stats.isFile() path是否为文件 true / false</span></span><br><span class="line"><span class="comment">		stats.isDirectory() paht是否为目录 true / false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-mkdir-创建目录"><a href="#fs-mkdir-创建目录" class="headerlink" title="fs.mkdir() 创建目录"></a><code>fs.mkdir()</code> 创建目录</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(path[, options], callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 路径</span></span><br><span class="line"><span class="comment">options 对象</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		recursive 递归创建，true / false</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">callback(err) 回调函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-rmdir-删除目录"><a href="#fs-rmdir-删除目录" class="headerlink" title="fs.rmdir() 删除目录"></a><code>fs.rmdir()</code> 删除目录</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(path[, options], callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">同 fs.mkdir()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-readdir-读取目录"><a href="#fs-readdir-读取目录" class="headerlink" title="fs.readdir() 读取目录"></a><code>fs.readdir()</code> 读取目录</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(path, callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 路径</span></span><br><span class="line"><span class="comment">callback(err, files) 回调函数</span></span><br><span class="line"><span class="comment">	err 错误对象</span></span><br><span class="line"><span class="comment">	files path路径下文件列表</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-unlink-删除文件"><a href="#fs-unlink-删除文件" class="headerlink" title="fs.unlink() 删除文件"></a><code>fs.unlink()</code> 删除文件</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(path, callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 文件路径</span></span><br><span class="line"><span class="comment">callback(err)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="fs-createWriteStream-创建文件写入流"><a href="#fs-createWriteStream-创建文件写入流" class="headerlink" title="fs.createWriteStream() 创建文件写入流"></a><code>fs.createWriteStream()</code> 创建文件写入流</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">createWriteStream</span>(path)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 文件路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">const</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./content&#x27;</span>) <span class="comment">// &#x27;./content&#x27; 为目标文件, 返回该文件写入流对象</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;one line &#x27;</span>) <span class="comment">// 往目标文件中写入字符串, 也可将 buffer 中的数据写入到目标文件</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;tow line &#x27;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;there line &#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./content&#x27;</span>)) <span class="comment">// one line tow line there line</span></span><br><span class="line">ws.<span class="title function_">close</span>() <span class="comment">// 关闭文件</span></span><br></pre></td></tr></table></figure>

<h2 id="路径-path"><a href="#路径-path" class="headerlink" title="路径( path )"></a>路径( path )</h2><h3 id="path-resolve-将所有给定的-path-解析为一个规范的绝对路径"><a href="#path-resolve-将所有给定的-path-解析为一个规范的绝对路径" class="headerlink" title="path.resolve() 将所有给定的 path 解析为一个规范的绝对路径"></a><code>path.resolve()</code> 将所有给定的 path 解析为一个规范的绝对路径</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">resolve</span>([...paths])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...paths 一个路径或路径片段的序列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, <span class="string">&#x27;./baz&#x27;</span>) <span class="comment">// &#x27;/foo/bar/baz&#x27;</span></span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, <span class="string">&#x27;/tmp/file/&#x27;</span>) <span class="comment">// &#x27;/tmp/file&#x27;</span></span><br><span class="line">path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./tmp/file/&#x27;</span>)</span><br><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;static_files/png/&#x27;</span>, <span class="string">&#x27;../gif/image.gif&#x27;</span>)</span><br><span class="line"><span class="comment">// 如果当前工作目录为 /home/myself/node</span></span><br><span class="line"><span class="comment">// 则返回 &#x27;/home/myself/node/wwwroot/static_files/gif/image.gif&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="path-join-使用操作系统特定的路径分隔符将所有给定的-path-连接为一个路径"><a href="#path-join-使用操作系统特定的路径分隔符将所有给定的-path-连接为一个路径" class="headerlink" title="path.join() 使用操作系统特定的路径分隔符将所有给定的 path 连接为一个路径"></a><code>path.join()</code> 使用操作系统特定的路径分隔符将所有给定的 path 连接为一个路径</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...paths])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...paths 一个路径或路径片段的序列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;./xxx&#x27;</span>, <span class="string">&#x27;asasd/asdd&#x27;</span>) <span class="comment">// &#x27;xxx/asasd/asdd&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="path-sep-获取操作系统的路径分隔符"><a href="#path-sep-获取操作系统的路径分隔符" class="headerlink" title="path.sep 获取操作系统的路径分隔符"></a><code>path.sep</code> 获取操作系统的路径分隔符</h3><p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path.sep // Linux 为 &#x27;/&#x27; Windows 为 &#x27;\&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="path-parse-解析一个路径"><a href="#path-parse-解析一个路径" class="headerlink" title="path.parse() 解析一个路径"></a><code>path.parse()</code> 解析一个路径</h3><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path.<span class="title function_">parse</span>(path)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">path 一个路径</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">path.<span class="title function_">parse</span>(<span class="string">&#x27;/home/user/dir/file.txt&#x27;</span>)</span><br><span class="line"><span class="comment">// 返回：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    root: &#x27;/&#x27;,</span></span><br><span class="line"><span class="comment">    dir: &#x27;/home/user/dir&#x27;,</span></span><br><span class="line"><span class="comment">    base: &#x27;file.txt&#x27;,</span></span><br><span class="line"><span class="comment">    ext: &#x27;.txt&#x27;,</span></span><br><span class="line"><span class="comment">    name: &#x27;file&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// root 根目录</span></span><br><span class="line"><span class="comment">// dir 目录, 可以通过 path.dirname() 方法获取</span></span><br><span class="line"><span class="comment">// base 文件完整名(不包括目录部分), 可以通过 path.basename() 方法单独获取</span></span><br><span class="line"><span class="comment">// ext 文件扩展名, 可以通过 path.extname() 方法单独获取</span></span><br><span class="line"><span class="comment">// name 文件名</span></span><br></pre></td></tr></table></figure>

<h3 id="URL-url"><a href="#URL-url" class="headerlink" title="URL( url )"></a>URL( url )</h3>]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js (三) 进阶API</title>
    <url>/posts/d32b8cc8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Attributes-透传"><a href="#Attributes-透传" class="headerlink" title="Attributes 透传"></a>Attributes 透传</h2><p><strong>透传 Attributes</strong> 指的是组件中未被显式声明(定义)为 <code>props</code> 的属性（如 <code>id</code>、<code>class</code>、<code>style</code>、自定义属性等）会自动传递到组件的根元素或通过手动设置传递到指定的 DOM 元素的一种行为</p>
<p>这功能依赖于 Vue 的 <strong><code>$attrs</code></strong> 对象，它存储了所有未被组件声明为 <code>props</code> 的属性</p>
<h3 id="默认透传"><a href="#默认透传" class="headerlink" title="默认透传"></a>默认透传</h3><p>如果父组件向子组件传递了某些属性，而子组件没有在 <code>props</code> 中声明这些属性，那么这些属性会自动添加到子组件的根元素上</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  Child Content</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="手动透传"><a href="#手动透传" class="headerlink" title="手动透传"></a>手动透传</h3><p>如果组件有多个根节点，或者需要将透传的属性应用到某个特定的元素上，可以使用 <code>$attrs</code></p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 将属性绑定到指定元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useAttrs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>(); <span class="comment">// 获取 $attrs 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrs); <span class="comment">// &#123; id: &quot;main&quot;, class: &quot;highlight&quot;, custom-attr: &quot;test&quot; &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    Child Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="阻止默认透传"><a href="#阻止默认透传" class="headerlink" title="阻止默认透传"></a>阻止默认透传</h3><p>如果不希望未声明的属性透传到组件的根元素，可以通过 <code>inheritAttrs: false</code> 禁止默认透传</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>, <span class="comment">// 禁止默认透传, Vue 不会自动将 $attrs 应用到根元素上, 但 $attrs 本身仍然可以手动使用</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 尽管父组件传递了 id 和 class，但它们不会出现在子组件中 --&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>用途：</strong></p>
<ul>
<li><strong>HTML属性透传：</strong>动态传递 HTML 元素属性</li>
<li><strong>事件透传：</strong>配合 <code>v-on=&quot;$attrs&quot;</code>，可以将所有未声明的事件绑定到子组件的元素上</li>
<li><strong>透传到指定元素上：</strong>如果组件需要将父组件的传递属性分发到非根节点，可以结合 <code>$attrs</code> 和 <code>v-bind</code> 使用</li>
</ul>
<p>透传机制增强了组件的灵活性，避免了硬编码特定的 <code>props</code>，同时也提供了精细化的透传控制</p>
<h2 id="Slots-插槽"><a href="#Slots-插槽" class="headerlink" title="Slots 插槽"></a>Slots 插槽</h2><h2 id="Lifecycle-组件生命周期"><a href="#Lifecycle-组件生命周期" class="headerlink" title="Lifecycle 组件生命周期"></a>Lifecycle 组件生命周期</h2><p>组件生命周期是指组件从创建、挂载、更新到卸载的一系列过程。每个阶段都有特定的生命周期钩子函数供开发者执行相关逻辑</p>
<p>简单的说生命周期函数就是会在某一时刻由 Vue 自动执行的函数</p>
<p>组件生命周期分为以下几个阶段：</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>钩子函数( 选项式API | 组合式API )</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>创建阶段</td>
<td><code>beforeCreate</code> | 无</td>
<td>组件实例创建之前执行，此时无法访问到 <code>props</code> 和 <code>data</code></td>
</tr>
<tr>
<td></td>
<td><code>created</code> | <code>setup</code></td>
<td>组件实例创建完成后执行，此时可以访问到 <code>props</code> 和 <code>data</code></td>
</tr>
<tr>
<td>挂载阶段</td>
<td><code>beforeMount</code> | <code>onBeforeMount</code></td>
<td>组件挂载到 DOM 之前执行，此时组件实例已经生成了虚拟DOM，但还没有被渲染到实际的DOM元素上</td>
</tr>
<tr>
<td></td>
<td><code>mounted</code> | <code>onMounted</code></td>
<td>组件挂载到 DOM 之后执行，此时组件实例已经被渲染到了实际的DOM元素上</td>
</tr>
<tr>
<td>更新阶段</td>
<td><code>beforeUpdate</code> | <code>onBeforeUpdate</code></td>
<td>组件更新之前执行，在此阶段，组件的数据(响应式数据)已经发生了变化，但是DOM节点还没有被重新渲染(未更新视图)</td>
</tr>
<tr>
<td></td>
<td><code>updated</code> | <code>onUpdated</code></td>
<td>组件更新完成后执行，在此阶段，组件的数据(响应式数据)发生了变化，也已经重新渲染了DOM节点(已更新视图)。</td>
</tr>
<tr>
<td>卸载阶段</td>
<td><code>beforeUnmount</code> | <code>onBeforeUnmount</code></td>
<td>组件卸载之前执行，在此阶段，组件即将被销毁</td>
</tr>
<tr>
<td></td>
<td><code>unmounted</code> | <code>onUnmounted</code></td>
<td>组件卸载完成后执行，在此阶段，组件已经被销毁，无法访问到组件实例和DOM元素</td>
</tr>
</tbody></table>
<p><strong>使用场景：</strong></p>
<p>例1 数据初始化：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 created 或 onMounted 钩子中执行数据初始化，例如发送网络请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">value</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例2 操作DOM：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果需要操作真实DOM，我们可以在 mounted 或 onMounted 狗子中进行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&#x27;Clicked!&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例3 事件监听与清理：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 mounted 或 onMounted 中添加事件监听器，在 unmounted 或 onUnmounted 中清理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, onResize);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, onResize);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onResize</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口尺寸发生变化&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例4 清理定时器：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 beforeUnmount 或 onUnmounted 中清理定时器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, onUnmounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span>++, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开发中应根据场景选择合适的钩子，并在适当阶段清理资源，避免内存泄漏</p>
<h2 id="Composables-组合式函数"><a href="#Composables-组合式函数" class="headerlink" title="Composables 组合式函数"></a>Composables 组合式函数</h2><p>组合式函数是一个利用 Vue 的组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数，通常也被称为 Vue Hooks 函数。组合式函数允许将组件内的逻辑拆分并以独立的单元进行复用和组合，</p>
<h3 id="自定义指令-directives"><a href="#自定义指令-directives" class="headerlink" title="自定义指令 directives"></a>自定义指令 <code>directives</code></h3><p>Vue 提供了自定义指令的功能，用于给 HTML 元素添加额外的行为。自定义指令可以在模板中直接使用，并在指令的生命周期中执行相应的操作</p>
<p>指令的生命周期函数( 钩子函数 )：</p>
<ul>
<li><p><code>beforeMount</code>: 在指令绑定的元素挂载 DOM 之前被调用</p>
</li>
<li><p><code>mounted</code>: 在指令绑定的元素被插入到 DOM 中后被调用</p>
</li>
<li><p><code>beforeUpdate</code>: 在指令所在的组件更新之前被调用</p>
</li>
<li><p><code>updated</code>: 在指令所在的组件更新之后被调用</p>
</li>
<li><p><code>beforeUnmount</code>: 在指令所在的组件卸载之前被调用</p>
</li>
<li><p><code>unmounted</code>: 在指令所在的组件卸载之后被调用</p>
</li>
</ul>
<p>每个钩子函数都包含以下参数：</p>
<ul>
<li><p><code>el</code>: 指令所绑定的元素</p>
</li>
<li><p><code>binding</code>: 值为一个对象，用于获取指令绑定的相关信息，其中包括：</p>
<ul>
<li><p><code>binding.value</code>: 指令绑定的值，该值就是指令等于号( <code>=</code> )后面的值，语法：<code>v-xxx=&quot;值&quot;</code></p>
</li>
<li><p><code>binding.oldValue</code>: 指令上一次绑定的值( <code>=</code> )</p>
</li>
<li><p><code>binding.arg</code>: 指令绑定的参数, 参数就是指令冒号( <code>:</code> )后面的内容，语法：<code>v-xxx:参数=&quot;值&quot;</code></p>
</li>
<li><p><code>binding.modifiers</code>: 指令绑定的修饰符，修饰符是以点开头的特殊后缀，用于给指令添加额外功能和修改行为，语法：<code>v-xxx.修饰符=&quot;值&quot;</code> or <code>v-xxx:参数.修饰符=&quot;值&quot;</code></p>
</li>
<li><p><code>binding.instance</code>: 值为指令绑定时所在组件的组件实例</p>
</li>
</ul>
</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input 元素自动获取焦点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-global-focus</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;input type=&quot;text&quot; v-local-focus&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 局部自定义指令, 在组件的 directives 选项中定义</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只在该组件内部可用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">localFocus</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          el.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 全局自定义指令, 通过 app.directive 方法定义</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">   自定义指令的命名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    kebab-case命名 - 如：global-focus</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    CamelCase命名 - 如：globalFocus</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                   使用：v-global-focus</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">directive</span>(<span class="string">&#x27;globalFocus&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        el.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js (一) 项目创建与基本概念</title>
    <url>/posts/c037ead1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vue 是一个<strong>渐进式</strong>现代 JavaScript 框架，用于构建用户界面( UI )。它的目标是通过尽可能简单的 Api 实现响应式数据绑定和组合的视图集合( 组件 )</p>
<p>Vue 的核心只关注视图层，如果需要其它高级功能可以逐步引入( 如 路由、状态管理 等 )</p>
<p>Vue 起源于开源项目，由前 Google 员工尤雨溪开发并维护，它在开源社区中极具人气，尤其在亚洲地区广泛流行</p>
<h2 id="MVVM-架构"><a href="#MVVM-架构" class="headerlink" title="MVVM 架构"></a>MVVM 架构</h2><p>MVVM 是一种软件架构模式，它将应用程序分成三层：模型（Model）、视图（View）、视图模型（ViewModel）</p>
<p>Vue.js 参照了 MVVM 架构的思想设计</p>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/picx-images-hosting@master/20240627/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE+2023-10-26+151205.9gwfu67rb0.webp" alt="2023-10-26 151205"></p>
<ul>
<li><p>模型（Model）</p>
<ul>
<li>代表应用程序的数据和业务逻辑</li>
<li>它是应用的核心部分，包含了所有的数据处理、验证以及对数据的操作</li>
</ul>
</li>
<li><p>视图（View）</p>
<ul>
<li>代表应用程序的用户界面( UI )。它呈现模型中的数据给用户，并通过用户交互反馈数据的变化</li>
<li>在 Web前端中，通常由 HTML、CSS 组成，用于表示界面的结构和样式</li>
</ul>
</li>
<li><p>视图模型（ViewModel）</p>
<ul>
<li>连接模型( Model )和视图( View )。它是一个中间层，负责处理视图和模型之间的双向数据绑定</li>
<li>将模型中的数据转换成视图可识别的格式( HTML DOM )，并将视图的操作反馈给模型</li>
</ul>
</li>
</ul>
<h2 id="创建-Vue-工程项目"><a href="#创建-Vue-工程项目" class="headerlink" title="创建 Vue 工程项目"></a>创建 Vue 工程项目</h2><p>确保你的机器上安装了 Node.js，之后我们使用 Vite 脚手架来创建项目，它会帮我们生成项目所需的依赖，以及构建工具相关的配置等…</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">npm init vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">npx create-vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后根据提示输入项目名称和选择项目模版( Vue + TypeScript 或 Vue + JavaScript )</span></span><br></pre></td></tr></table></figure>

<p><strong><code>npm create</code> 命令：</strong></p>
<p><code>npm create</code> 命令是用来运行远程的<strong>项目生成器</strong>( 脚手架 )的命令</p>
<p>它会自动下载并执行远程的 <code>create-&lt;package-name&gt;</code> 命名的包来创建一个项目</p>
<p><strong>Vue 项目结构：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">├── node_modules/        # npm 包依赖目录</span><br><span class="line">├── public/              # 静态资源目录（例如 index.html 和静态文件）</span><br><span class="line">├── src/                 # 源代码目录</span><br><span class="line">│   ├── assets/          # 资源文件（图片、样式等）</span><br><span class="line">│   ├── components/      # Vue 组件目录</span><br><span class="line">│   ├── App.vue          # 主应用组件</span><br><span class="line">│   ├── main.js          # 应用入口文件</span><br><span class="line">├── .gitignore           # Git 忽略文件</span><br><span class="line">├── package.json         # 项目的依赖和脚本配置</span><br><span class="line">├── package-lock.json    # 锁定的依赖版本信息</span><br><span class="line">├── vite.config.js       # Vite 构建工具的项目配置文件</span><br><span class="line">└── README.md            # 项目说明文件</span><br></pre></td></tr></table></figure>

<h2 id="Vue-的基本概念"><a href="#Vue-的基本概念" class="headerlink" title="Vue 的基本概念"></a>Vue 的基本概念</h2><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p><strong>响应式</strong>是 Vue 中的一种机制，指的是当数据发生变化时，Vue 会自动检测到这个变化并更新相关的视图。这种自动的同步更新被称为“响应式系统”。Vue 的响应式系统主要依赖于“依赖追踪”和“数据劫持”技术</p>
<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p><img src="https://cdn.jsdelivr.net/gh/k34869/picx-images-hosting@master/image.2a52r1jygn.webp" alt="image"></p>
<p>组件化指的是将应用程序拆分为多个<strong>独立的、可复用的模块</strong>（组件），每个模块负责特定的功能或界面部分。组件化开发能够提升代码的组织性、复用性和可维护性，尤其适合开发大型的前端应用</p>
<p>在 Vue 中组件可以用 <code>.vue</code> 文件( 单文件组件SFC )表示，每个组件都封装了自己独立的<strong>模板</strong>、<strong>逻辑</strong>（如数据和方法）、以及<strong>样式</strong>。它包含以下三个部分：</p>
<ul>
<li><strong>template</strong>：定义了组件的 HTML 结构</li>
<li><strong>script</strong>：定义了组件的逻辑，包括数据、方法、生命周期钩子等</li>
<li><strong>style</strong>：定义了组件的样式</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/CountBtn.vue 计数器按钮组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue 根组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CountBtn</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">CountBtn</span> <span class="keyword">from</span> <span class="string">&#x27;./components/CountBtn.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">CountBtn</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/main.js 应用程序的入口文件 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>组件命名：</strong></p>
<ul>
<li><p>kebab-case命名: school / my-school</p>
</li>
<li><p>CamelCase命名: School / MySchool</p>
</li>
<li><p>组件名不能用 HTML 已有元素的名称</p>
</li>
</ul>
<p><strong>注册组件：</strong></p>
<ul>
<li><p>局部注册</p>
<p>局部注册的组件只在指定的 Vue 实例或组件中可用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Header组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Header组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- scoped 局部CSS样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 使用Header组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入Header组件(注册前需先导入对应组件)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册Header组件, 只能在当前组件中使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Header</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>全局注册</p>
<p>全局注册的组件可以在任何地方使用，通常在 <code>main.js</code>( 程序入口文件 ) 中进行全局注册</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/main.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入Header组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;Header&#x27;</span>, <span class="title class_">Header</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>在 Vue 中全局注册使用相对较少，主要原因如下：</p>
<ul>
<li>命名冲突：全局注册的组件在整个应用中可见，容易与其它组件名称冲突</li>
<li>难以维护：如果大量组件都全局注册，可能会造成组件引用混乱，管理维护变得复杂</li>
<li>性能开销：全局注册的组件在应用加载时就被解析( 不管是否使用 )，可能会增加应用的初始加载时间</li>
</ul>
<h3 id="Vue-createApp-方法"><a href="#Vue-createApp-方法" class="headerlink" title="Vue.createApp 方法"></a><code>Vue.createApp</code> 方法</h3><p>描述：用来创建 Vue 应用实例的方法，它接收一个对象作为参数，该对象是当前 Vue 应用实例的<strong>根组件</strong>( <em>Root Component</em> )</p>
<p>组件中包含很多配置选项，常见的包括：</p>
<ul>
<li><p><code>template</code>：用于定义组件的模板</p>
</li>
<li><p><code>data</code>：用于定义组件的数据，可以在模板中使用</p>
</li>
<li><p><code>methods</code>：用于定义组件的方法，可以在模板中调用</p>
</li>
<li><p>……</p>
</li>
</ul>
<p>在实际开发中我们会在单个 Vue 应用实例中使用<strong>组件</strong>来构建复杂的单页面应用</p>
<h3 id="app-mount-方法"><a href="#app-mount-方法" class="headerlink" title="app.mount 方法"></a><code>app.mount</code> 方法</h3><p>描述：将 Vue 应用实例挂载到指定的 DOM 元素上以使 Vue 应用实例在页面中生效。Vue 应用实例挂在后，它会<strong>响应式</strong>地去渲染页面</p>
<p>语法：<code>app.mount(挂载点)</code></p>
<p>挂载点可以是一个 DOM元素 或是一个 CSS 选择器，它会返回根组件的实例</p>
<h3 id="模板-template"><a href="#模板-template" class="headerlink" title="模板 template"></a>模板 <code>template</code></h3><p>Vue 模板是一种描述视图的语法结构。它允许你将 HTML 和 Vue 的特殊语法结合在一起，创建动态的、响应式的用户界面</p>
<p>Vue 模板主要增加了以下几种语法：</p>
<p><strong>插值( <em>Mustache</em> )：</strong></p>
<ul>
<li><p>语法：<code>&#123;&#123; expression &#125;&#125;</code> | 只能在元素内容中使用，不能在元素属性中使用</p>
</li>
<li><p>双大括号( <code>&#123;&#123; &#125;&#125;</code> )中的内容是 Vue 表达式，它可以访问组件实例中的数据</p>
</li>
<li><p>作用：用于在模板中插入组件实例中的数据，实现数据的动态渲染，即数据发生变化时，视图自动更新变化</p>
</li>
</ul>
<p><strong>指令( <em>Directive</em> )：</strong></p>
<ul>
<li>指令是带有特殊功能的 Vue 模板属性，它通常以 <code>v-</code> 开头，用于在 DOM 元素中添加特定行为和功能</li>
</ul>
<p><strong>Vue 表达式：</strong></p>
<ul>
<li>Vue表达式可以使用 JavaScript 表达式和一些常用 JavaScript 内置对象( 如 Date, Object 等 )，最重要的是它能访问组件实例上的属性</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 cdn 链接来使用 Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      data 函数返回的对象会被 Vue 代理(new Proxy) -&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      当 data 中的数据发生变化时, Vue 会重新解析模板, 从而使页面与数据保持同步</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;Hello, Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法中的 this 指向组件的实例(被 Vue 代理的对象, this === vm)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">text</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// template 属性中的内容会被 Vue 解析( to Virtual DOM )</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果不指定 template 属性，挂载元素的内容就会成为 Vue 模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;button v-on:click=&quot;alert&quot;&gt;click me!&lt;/button&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 挂载 Vue 应用实例，返回根组件的实例(被 Vue 代理的对象)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="style-scoped（局部样式）"><a href="#style-scoped（局部样式）" class="headerlink" title="style scoped（局部样式）"></a>style scoped（局部样式）</h3><p>局部样式是指组件内的 CSS样式只在该组件内有效，而不会影响到其他组件的样式</p>
<p>要使用局部样式只需要在 <code>&lt;style&gt;</code> 标签上添加 <code>scoped</code> 属性即可：</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部样式, 如果去除 scoped, 则样式会对所有组件有效(全局样式) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>style scoped 的原理：</strong></p>
<p>Vue 会在组件的每个元素上添加一个自动生成的属性（如 <code>data-v-xxxx</code>），并将 <code>style scoped</code> 样式中的选择器转换为只匹配带有该属性的元素。例如，上面的 <code>.box</code> 样式会被编译为类似以下的代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* data-v-xxxx 相当于一个身份标识, 每个组件生成的都不相同, 这样确保了组件中的样式只在该组件中有效 */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[data-v-xxxx]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Composition-API（组合式-API）"><a href="#Composition-API（组合式-API）" class="headerlink" title="Composition API（组合式 API）"></a>Composition API（组合式 API）</h3><p>Vue3 引入了<strong>组合式 API（Composition API）</strong>，以便更灵活地组织和复用组件逻辑</p>
<p>Vue2 中使用 <code>data</code>、<code>methods</code> 等选项来定义组件状态和方法。Vue3 的组合式 API 则不再强制划分这些选项，可以自由组合和组织逻辑，使代码结构更清晰、复用性更强</p>
<h3 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a><code>setup</code> 函数</h3><p>在组合式 API 中，<code>setup</code> 函数是组件的入口。它在组件实例创建前调用。<code>setup</code> 函数返回的内容会暴露给模板使用</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  setup 是一个钩子函数, 会被 Vue 调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  Vue 调用时会将 this 指定为 undefined, 因此无法使用 this 来访问组件实例</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义响应式数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    返回模板中使用的变量和方法, 如果不返回对象, 组件不会暴露任何内容给模板</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    Vue 在模板编译时，会优先从组件的 setupState 对象中访问，也就是这里返回的对象中访问，如果访问不到，则会从组件实例中访问</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; count, increment &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a><code>ref</code> 函数</h3><ul>
<li><code>ref</code> 函数用于创建响应式数据的工具</li>
<li>它会将数据包裹在一个名为 RefImpl 类型的代理( Proxy )对象中返回。在 <code>setup</code> 函数中要访问响应式数据必须通过对象中的 <code>value</code> 属性来访问，但在模版中无需通过 <code>value</code> 来访问，Vue 会<strong>自动解包</strong>( 在模板编译时, Vue 会自动将 <code>RefImpl</code> 类型对象转换为 <code>ref.value</code> )访问</li>
<li><code>value</code> 属性的操作会被 Vue 拦截(<code>get</code> &amp; <code>set</code>)，当修改 <code>value</code> 属性的值为基本数据类型时，Vue 会响应式的更新，如果将其值修改为复杂数据类型(如 数组、对象)时，Vue 会调用 <code>reactive</code> 函数来创建复杂数据类型的响应式数据</li>
</ul>
<p><strong><code>reactive</code> 函数：</strong></p>
<p><code>reactive</code> 函数用于创建复杂数据类型(如 数组、对象)的响应式数据，它会通过创建代理(<code>new Proxy</code>)的方式来实现响应式，这种方式可以实现数组或对象的深层响应式，但不能实现基本数据类型的响应式</p>
<h3 id="toRefs-函数"><a href="#toRefs-函数" class="headerlink" title="toRefs 函数"></a><code>toRefs</code> 函数</h3><p><code>toRefs</code> 是 Vue3 中提供的一个工具函数，用于将一个响应式对象中的每个属性转换为单独的 <code>ref</code> 对象( <code>RefImpl</code> )。它的主要用途是解决直接解构响应式对象丢失响应性的问题</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.gender &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// toRefs 函数会自动调用 ref 函数, 将对象中的属性全部转换成 RefImpl 类型对象, 并且保持其响应性。如果不用 toRefs 函数直接解构, 则会丢失响应性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123; name, age &#125; = <span class="title function_">toRefs</span>(person)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 解构出来的数据通过 value 属性来访问, 当修改 value 属性时, 源对象中对应的属性也会同时被修改(这里源对象就是 person)</span></span></span><br><span class="line"><span class="language-javascript">    name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    age.<span class="property">value</span> = <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; person &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="script-setup（组合式-API-语法糖）"><a href="#script-setup（组合式-API-语法糖）" class="headerlink" title="script setup（组合式 API 语法糖）"></a>script setup（组合式 API 语法糖）</h3><p><code>script setup</code> 是 Vue3 提供的一个<strong>开发编译时</strong>的语法糖，用来代替传统的 <code>setup</code> 函数。它直接把 <code>setup</code> 的逻辑写在 <code>&lt;script setup&gt;</code> 标签内，无需显式定义 <code>setup</code> 函数</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- setup 启用组合式 API 语法糖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// script setup 语法不支持 export 导出</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>特点：</strong></p>
<ul>
<li>无需显示的将变量或函数通过 return 暴露给模板，Vue 会在开发编译时自动将顶层( 全局作用域 )的变量或函数暴露给模板( <code>setupState</code> )</li>
<li>导入的组件无需注册，Vue 会自动注册</li>
</ul>
<h3 id="props-组件间通信"><a href="#props-组件间通信" class="headerlink" title="props 组件间通信"></a>props 组件间通信</h3><p><code>props</code> 是 Vue 中的一种机制，用于在父组件中向子组件传递数据。父组件可以在模板中给子组件添加属性将数据传递给子组件，而子组件则通过 <code>props</code> 接收这些数据，从而实现父子组件之间的通信</p>
<p>例：</p>
<div class="tabs" id="props"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#props-1">选项式API</button></li><li class="tab"><button type="button" data-href="#props-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="props-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里 : 是 Vue 的指令, 用于动态绑定数据, 如果去除 : 则是直接传递一个静态的字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">parentMessage</span>: <span class="string">&#x27;Hello from Parent&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义 props, 被定义的 props 将会被 Vue 代理到组件实例上, 我们可以直接通过 this 访问</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="title class_">String</span>, <span class="comment">// 接收字符串类型的数据, 如果父组件传递数据类型不同, 则会提示警告</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="comment">// 接收数字类型的数据, 可以通过数组来指定多个类型, 如: [Object, Array, Number]</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 设置默认值, 对于数组和对象类型需要通过函数返回默认值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  数组写法定义 props, 无默认值和类型限定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    props: [&#x27;message&#x27;, &#x27;count&#x27;]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="props-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里 : 是 Vue 的指令, 用于动态绑定数据, 如果去除 : 则是直接传递一个静态的字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> parentMessage = <span class="title function_">ref</span>(<span class="string">&#x27;Hello from Parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">defineProps 是 Vue 的宏函数(开发编译时运行, 仅限顶层使用), 用来定义 props，它无需 import 可以直接在 script setup 中使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">返回定义的 props, 等同于组件实例上的 $props</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="title class_">String</span>, <span class="comment">// 接收字符串类型的数据, 如果父组件传递数据类型不同, 则会提示警告</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="comment">// 接收数字类型的数据, 可以通过数组来指定多个类型, 如: [Object, Array, Number]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 设置默认值, 对于数组和对象类型需要通过函数返回默认值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  数组写法定义 props, 无默认值和类型限定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    defineProps([&#x27;message&#x27;, &#x27;count&#x27;])</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p><code>props</code> 可以通过 :指令(v-bind) 动态的传递数据，这意味着当父组件传递的 <code>props</code> 数据变化时，子组件会立即<strong>响应式</strong>的更新</p>
<p><code>props</code> 在子组件中是只读的，不能直接修改，否则会提示警告</p>
<p><strong>单向数据流：</strong></p>
<p><strong>单向数据流</strong>是指数据在组件之间的传递方向：<strong>从父组件流向子组件</strong>，但子组件不能直接修改从父组件传递过来的数据( props 只读 )。单向数据流确保了数据流向的单一性和可预测性，避免了数据状态的混乱导致状态管理变得复杂。如果需要更新 <code>props</code>( 修改 props ) 时，可以使用事件通知父组件</p>
<p>例：</p>
<div class="tabs" id="事件通知"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#事件通知-1">选项式API</button></li><li class="tab"><button type="button" data-href="#事件通知-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="事件通知-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span> @<span class="attr">increment</span>=<span class="string">&quot;increaseCount&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">parentCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increaseCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">parentCount</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;increment&#x27;)&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;count&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="事件通知-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span> @<span class="attr">increment</span>=<span class="string">&quot;increaseCount&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> parentCount = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">increaseCount</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    parentCount.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;increment&#x27;)&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>([<span class="string">&#x27;count&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h3 id="events-组件间通信"><a href="#events-组件间通信" class="headerlink" title="events 组件间通信"></a>events 组件间通信</h3><p>events 即组件事件，它是指组件之间通过自定义事件实现的通信方式。组件事件允许子组件向父组件发送消息，使父组件能够响应子组件中的操作。这种机制在 Vue 中主要是通过 <code>$emit</code>、<code>v-on</code>（缩写 <code>@</code>）来实现</p>
<p><strong>通过自定义事件实现子组件向父组件传递数据：</strong></p>
<p>在 Vue 中，子组件可以使用组件实例上的 <code>$emit</code> 方法触发一个自定义事件，并可将数据传递给父组件。父组件通过 <code>v-on</code>（或 <code>@</code>）监听该事件，并在事件发生时接收数据和执行回调函数</p>
<p>例：</p>
<div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">选项式API</button></li><li class="tab"><button type="button" data-href="#events-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击 button 时执行 handleChangeParent 方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChangeParent&quot;</span>&gt;</span>Change Parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleChangeParent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 触发 changeMsg 事件, 并传递数据给父组件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changeMsg&#x27;</span>, <span class="string">&#x27;Hello from child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当子组件触发 changeMsg 事件时, 父组件执行 handleChangeMsg 方法, 用来接收子组件传递的数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">changeMsg</span>=<span class="string">&quot;handleChangeMsg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Perent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data 参数由子组件通过 $emit 函数传递</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleChangeMsg</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">msg</span> = data</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击 button 时执行 handleChangeParent 函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChangeParent&quot;</span>&gt;</span>Change Parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// defineEmits 宏函数, 用来定义事件, 它返回 emits 函数, 用来触发定义的事件, 等同于 $emit</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;changeMsg&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleChangeParent</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 触发 changeMsg 事件, 并传递数据给父组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emits</span>(<span class="string">&#x27;changeMsg&#x27;</span>, <span class="string">&#x27;Hello from child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当子组件触发 changeMsg 事件时, 父组件执行 handleChangeMsg 方法, 用来接收子组件传递的数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">changeMsg</span>=<span class="string">&quot;changeMsg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;Hello Perent.vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// data 参数由子组件通过 emits 函数传递</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = data =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span> = data</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p>Vue 推荐事件及 props 的名称都使用 “<code>kebab-case</code>” 的命名方式，比如 <code>child-click</code>、<code>submit-form</code>。这样格式更统一，可读性也更强</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js (四) 路由</title>
    <url>/posts/dcf5305d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vue 路由（Vue Router）是 Vue.js 官方提供的路由管理工具，用于构建单页面应用（SPA，Single Page Application）。路由的作用是根据用户访问的 URL 地址，动态切换组件或页面内容</p>
<p><strong>Vue Router 核心功能：</strong></p>
<ul>
<li><p>在单页面应用中实现页面导航</p>
</li>
<li><p>根据 URL 动态加载对应的组件</p>
</li>
<li><p>支持浏览器前进、后退等功能</p>
</li>
<li><p>提供路由守卫用于权限控制和数据预加载</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li><strong>安装 Vue Router：</strong>在 Vue 项目中安装 Vue Router</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4 # 如果是 Vue2 请使用 vue-router@3</span><br></pre></td></tr></table></figure>



<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="路由（Route）"><a href="#路由（Route）" class="headerlink" title="路由（Route）"></a>路由（Route）</h3><p>路由 Route 定义了 URL 与组件之间的映射关系</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;, <span class="comment">// 当访问 &#x27;/&#x27; 时显示 Home 组件</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125; <span class="comment">// 当访问 &#x27;/about&#x27; 时显示 About 组件</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="路由器（Router）"><a href="#路由器（Router）" class="headerlink" title="路由器（Router）"></a>路由器（Router）</h3><p>路由器 Router 是路由管理的核心对象，用于配置路由规则并控制导航</p>
<p>创建路由器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(), <span class="comment">// 使用 HTML5 历史模式</span></span><br><span class="line">  routes, <span class="comment">// 路由规则</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="导航（Navigation）"><a href="#导航（Navigation）" class="headerlink" title="导航（Navigation）"></a>导航（Navigation）</h3><p>使用 <code>&lt;router-link&gt;</code> 或编程方式（如 <code>router.push</code>）进行页面跳转</p>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 入门教程</title>
    <url>/posts/a87a2e6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>TypeScript 是 JavaScript 的一个超集( <em>Superset</em> )，它兼容 JavaScript 的所有语法，同时在此基础上增加了<strong>静态类型系统</strong>和其他高级特性。它由 Microsoft 公司开发，为开发大型应用程序和改善代码质量而设计</p>
<p>TypeScript 只负责解决开发阶段所遇到的问题，它可以在开发阶段就发现程序中的错误，而不是运行阶段</p>
<p>TypeScript 最终会被编译成 JavaScript，以便在浏览器或其它 JavaScript 环境中运行</p>
<p><strong>特点：</strong></p>
<ul>
<li><strong>静态类型检查( 编译期间检查数据类型 )：</strong><ul>
<li>使用 TS 提供的静态类型系统（如 <code>string</code>, <code>number</code>, <code>boolean</code>, <code>any</code>, 自定义类型等）可以在编译时发现潜在错误</li>
<li>TS 提供类型推断功能，即使你不显式定义类型，TypeScript 也会尽量推断出变量类型</li>
</ul>
</li>
<li><strong>现代特性支持：</strong><ul>
<li>支持 ECMAScript 的最新特性，如 装饰器</li>
<li>在旧版浏览器运行时可通过 TypeScript 转译为兼容的 JavaScript</li>
</ul>
</li>
<li><strong>增强开发体验：</strong><ul>
<li>TS 支持更多高级的 IDE( 如 VSCode、WebStorm ) 功能( 如类型提示、错误检测和自动补全等功能 )</li>
</ul>
</li>
<li><strong>完整的面向对象支持：</strong><ul>
<li>支持类、接口、枚举、命名空间、模块和继承等高级功能</li>
</ul>
</li>
</ul>
<h2 id="使用（Usage）"><a href="#使用（Usage）" class="headerlink" title="使用（Usage）"></a>使用（<em>Usage</em>）</h2><ol>
<li><p>初始化项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li>
<li><p>安装 TypeScript 到项目中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i typescript -D</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">typescript 用来编译 TypeScript 代码到标准的 JavaScript 代码</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 TypeScript 是否安装完成</span></span><br><span class="line">npx tsc --version</span><br></pre></td></tr></table></figure></li>
<li><p>初始化 TypeScript 项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx tsc --init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这条命令会在当前目录下生成一个 tsconfig.json 文件, 它是 TypeScript 的配置文件</span></span><br></pre></td></tr></table></figure></li>
<li><p>编译 ts 文件( <code>ts -&gt; js</code> )</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx tsc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tsc 是 TypeScript 的编译器, 用来编译生成 JavaScript 代码文件, 在默认配置下, TypeScript 会将项目(包含 tsconfig.json 的目录)中所有 ts 文件(node_modules, bower_components, jspm_packages 这些目录除外)编译为 js 文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>JS 引擎与 TS 编译器的区别和对比：</strong></p>
<ul>
<li>JavaScript 引擎用于编译并执行 JavaScript 代码</li>
<li>TypeScript 编译器用于编译 TypeScript 代码并生成 JavaScript 代码</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/k34869/picx-images-hosting@master/%7BFEFC50BE-F2CD-41C6-A1EC-150F2C49B389%7D.58hf9qfmnn.webp" alt="TS编译器与JS引擎的对比"></p>
<h2 id="类型声明（Type-Declaration）"><a href="#类型声明（Type-Declaration）" class="headerlink" title="类型声明（Type Declaration）"></a>类型声明（<em>Type Declaration</em>）</h2><p>类型声明是通过显式地定义变量、函数、对象或类的类型来约束它们的值和行为。指定类型后，当为变量赋值时，TS 编译器会自动检查值是否符合类型声明，符合则赋值，不符合则报错。这种静态类型的特性有助于捕获潜在错误并提高代码的可读性和可维护性</p>
<p>语法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名: 类型</span><br><span class="line"><span class="keyword">let</span> 变量名: 类型 = 值</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数名: 类型, 参数名: 类型</span>): 返回值类型 &#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>number</code></td>
<td><code>1</code>, <code>-20</code>, <code>3.14</code></td>
<td>数字类型</td>
</tr>
<tr>
<td><code>string</code></td>
<td><code>&quot;Hello&quot;</code>, <code>&#39;Wecome&#39;</code></td>
<td>字符串类型</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>true</code>, <code>false</code></td>
<td>布尔类型</td>
</tr>
<tr>
<td><code>undefined</code></td>
<td><code>undefined</code></td>
<td>未定义</td>
</tr>
<tr>
<td><code>null</code></td>
<td><code>null</code></td>
<td>空</td>
</tr>
<tr>
<td><code>object</code></td>
<td><code>&#123;name: &#39;value&#39;&#125;</code></td>
<td>对象类型</td>
</tr>
<tr>
<td><code>type[]</code></td>
<td><code>[1, 2, 3, 4]</code></td>
<td>数组元素的类型</td>
</tr>
<tr>
<td><code>any</code></td>
<td><code>*</code></td>
<td>任意类型</td>
</tr>
<tr>
<td><code>unknown</code></td>
<td><code>*</code></td>
<td>未知类型( 类型安全的<code>any</code> )</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>undefined</code></td>
<td>没有类型，函数没有返回值</td>
</tr>
<tr>
<td><code>never</code></td>
<td>不能有值</td>
<td>不能是任何值，函数不能有返回值</td>
</tr>
<tr>
<td><code>tuple</code></td>
<td><code>[5, 6, 7, 8]</code></td>
<td>元组类型</td>
</tr>
<tr>
<td><code>enum</code></td>
<td><code>enum&#123;A, B&#125;</code></td>
<td>枚举类型</td>
</tr>
</tbody></table>
<p><strong>基本使用：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">25</span> <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">true</span> <span class="comment">// 布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;TypeScript&quot;</span> <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span> <span class="comment">// 未定义</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span> <span class="comment">// 空</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">o</span>: <span class="built_in">object</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;Timeic&#x27;</span> &#125; <span class="comment">// 对象(数组和函数也是一种对象)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="string">&#x27;hello&#x27;</span> = <span class="string">&#x27;hello&#x27;</span> <span class="comment">// 字面量类型, 表示该变量只能赋值 &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">num = <span class="literal">undefined</span> <span class="comment">// ❌报错: 不能将类型“undefined”分配给类型“number”</span></span><br></pre></td></tr></table></figure>

<p><strong>数组及其元素的类型：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numbers</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 元素只能是数字类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">anyNums</span>: any[] = [<span class="number">123</span>, <span class="string">&#x27;123&#x27;</span>, <span class="literal">true</span>, <span class="literal">null</span>] <span class="comment">// 元素可以是任意类型</span></span><br><span class="line"></span><br><span class="line">anyNums[<span class="number">2</span>] = <span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line">numbers[<span class="number">0</span>] = <span class="string">&#x27;hello&#x27;</span> <span class="comment">// ❌报错：不能将类型“string”分配给类型“number”</span></span><br></pre></td></tr></table></figure>

<p><strong>对象及其属性的类型：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span> &#125; <span class="comment">// ? 为可选属性, 只能放在必选属性的后面</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj2</span>: &#123; <span class="attr">xxx</span>: <span class="built_in">number</span>, [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125; <span class="comment">// [key: string]: any 代表任意属性, 并且其值是任意类型</span></span><br><span class="line"></span><br><span class="line">obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Timeic&#x27;</span> &#125;</span><br><span class="line">obj2 = &#123; <span class="attr">xxx</span>: <span class="number">0</span>, <span class="attr">xx1</span>: <span class="string">&#x27;66&#x27;</span>, <span class="attr">xx2</span>: <span class="literal">null</span>, <span class="attr">xx3</span>: <span class="literal">false</span> &#125;</span><br><span class="line">obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="attr">xxx</span>: <span class="string">&#x27;xxx&#x27;</span> &#125; <span class="comment">// ❌报错：对象字面量只能指定已知属性，并且“xxx”不在类型“&#123; name: string; age?: number | undefined; &#125;”中</span></span><br></pre></td></tr></table></figure>

<p><strong>带类型的函数：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数参数的类型及参数的默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span> = <span class="number">1</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数可选参数(?)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, b?: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b ? a * b : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先声明函数类型后赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">greet</span>: (<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">greet = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;Timeic&#x27;</span>) <span class="comment">// Hello, Timeic</span></span><br><span class="line"><span class="title function_">multiply</span>(<span class="number">8</span>, <span class="number">2</span>) <span class="comment">// 16</span></span><br><span class="line"><span class="title function_">multiply</span>(<span class="number">6</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">4</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">8</span>, <span class="string">&#x27;10&#x27;</span>) <span class="comment">// ❌报错: 类型“string”的参数不能赋给类型“number”的参数</span></span><br></pre></td></tr></table></figure>

<p><strong>void 类型：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// void 类型只能赋值为 undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thisVoid</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// 只能返回 undefined, 返回其它值则会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span> <span class="comment">// 通常省略不写, 因为函数默认返回 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v = <span class="title function_">thisVoid</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v + <span class="number">123</span>) <span class="comment">// ❌报错: 运算符“+”不能应用于类型“void”和“number”(这会导致 NaN 的出现)</span></span><br><span class="line"><span class="comment">// void 类型主要用于指定函数返回值为空, 即没有值, 因此不要对 void 类型的值进行其它操作</span></span><br></pre></td></tr></table></figure>

<p><strong>never 类型：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// never 类型表示永远不会有值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出异常函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message) <span class="comment">// 函数永远不会 return, 如果函数 return 了则会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无线循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infiniteLoop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 无限循环，函数永远不会 return, 如果函数 return 了则会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>任意类型：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span> <span class="comment">// 显示指定 any, 变量 a 可以是任何类型</span></span><br><span class="line"><span class="keyword">let</span> b <span class="comment">// 隐式 any</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;Timeic&#x27;</span></span><br><span class="line">a = <span class="literal">null</span></span><br><span class="line">b = <span class="literal">false</span></span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span></span><br><span class="line"><span class="comment">// 显示指定 any 类型意味着该变量放弃使用 TS 类型检查功能(可以赋值给任何变量), 开发中不建议使用 any</span></span><br><span class="line">num = a <span class="comment">// num 的值为 null</span></span><br></pre></td></tr></table></figure>

<p><strong>联合类型( <code>|</code> )：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">id</span>: <span class="built_in">number</span> | <span class="string">&#x27;123&#x27;</span> <span class="comment">// 可以指定多个类型, 不符合这些类型的值则会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>)[] = [<span class="string">&#x27;123&#x27;</span>, <span class="number">123</span>, <span class="literal">true</span>] <span class="comment">// 联合类型的数组</span></span><br><span class="line"></span><br><span class="line">id = <span class="string">&quot;123&quot;</span> <span class="comment">// 合法</span></span><br><span class="line">id = <span class="number">123</span> <span class="comment">// 合法</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="literal">false</span> <span class="comment">// 合法</span></span><br><span class="line">id = <span class="string">&quot;456&quot;</span> <span class="comment">// ❌报错：不能将类型“&quot;456&quot;”分配给类型“number | &quot;123&quot;”</span></span><br></pre></td></tr></table></figure>

<p><strong>交叉类型( <code>&amp;</code> )：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &amp; 代表交叉类型，多个类型必须都符合，否则就会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: &#123; <span class="attr">id</span>: <span class="built_in">number</span>, <span class="attr">name</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">isActive</span>: <span class="built_in">boolean</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">isActive</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型别名（Type-Aliase）"><a href="#类型别名（Type-Aliase）" class="headerlink" title="类型别名（Type Aliase）"></a>类型别名（<em>Type Aliase</em>）</h2><p><strong>类型别名</strong>是用来为<strong>类型定义一个新的名字</strong>。类型别名可以用于为复杂的类型（如联合类型、对象类型）创建简洁的名称，便于复用</p>
<p>语法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 类型别名 = 类型定义</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个字符串类型的别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个复杂的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">isActive</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userName</span>: <span class="title class_">Name</span> = <span class="string">&quot;Alice&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">newUser</span>: <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为函数定义类型别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MathOperation</span> = <span class="function">(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y</span><br><span class="line"><span class="keyword">const</span> <span class="attr">multiply</span>: <span class="title class_">MathOperation</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为联合类型创建别名</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Status</span> = <span class="string">&quot;success&quot;</span> | <span class="string">&quot;error&quot;</span> | <span class="string">&quot;loading&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printStatus</span>(<span class="params"><span class="attr">status</span>: <span class="title class_">Status</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printStatus</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="title function_">printStatus</span>(<span class="string">&quot;failure&quot;</span>) <span class="comment">// ❌报错：类型“&quot;failure&quot;”的参数不能赋给类型“Status”的参数</span></span><br></pre></td></tr></table></figure>

<h2 id="类型推断（Type-Inference）"><a href="#类型推断（Type-Inference）" class="headerlink" title="类型推断（Type Inference）"></a>类型推断（<em>Type Inference</em>）</h2><p>TypeScript 的 <strong>类型推断</strong> 是指编译器根据代码的上下文自动推断出变量、函数返回值等的类型，而无需显式地声明类型。这种机制让代码更加简洁，同时保留类型安全性</p>
<p><strong>基本类型推断：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* TypeScript 会根据赋值自动推断变量的类型 */</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">42</span> <span class="comment">// 推断为 number</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;Hello, TypeScript&quot;</span> <span class="comment">// 推断为 string</span></span><br><span class="line"><span class="keyword">let</span> isDone = <span class="literal">true</span> <span class="comment">// 推断为 boolean</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 未赋初值时的推断 */</span></span><br><span class="line"><span class="keyword">let</span> something <span class="comment">// 推断为 any</span></span><br><span class="line">something = <span class="number">42</span></span><br><span class="line">something = <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>函数的类型推断：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TypeScript 会自动推断返回值类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b <span class="comment">// 推断返回值为 number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有手动返回值，则返回值类型被推断为 void</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logMessage</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message) <span class="comment">// 推断返回值为 void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数类型不能推断，对于函数的参数，必须显式声明类型，否则会被推断为 any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数组的类型推断：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 推断为 number[]</span></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>]; <span class="comment">// 推断为 string[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合类型数组推断为联合类型</span></span><br><span class="line"><span class="keyword">let</span> mixed = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>]; <span class="comment">// 推断为 (number | string | boolean)[]</span></span><br></pre></td></tr></table></figure>

<p><strong>对象的类型推断：</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">isActive</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;; <span class="comment">// 推断为 &#123; id: number; name: string; isActive: boolean &#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（<em>Tuple</em>）</h2><p>元组（Tuple）是一种<strong>特殊的数组( <code>Array</code> )类型</strong>，它允许定义一个<strong>已知数量和类型的元素的集合</strong>。与普通数组不同，元组中的每个元素类型和顺序都是固定的</p>
<p>语法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [类型<span class="number">1</span>, 类型<span class="number">2</span>, 类型<span class="number">3</span>, ...] = [值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ...]</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元组类型与元组中的元素会按照位置顺序绑定</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">25</span>, <span class="string">&quot;Alice&quot;</span>];</span><br><span class="line">tuple[<span class="number">0</span>] = <span class="number">30</span></span><br><span class="line">tuple[<span class="number">1</span>] = <span class="number">30</span> <span class="comment">// ❌报错：不能将类型“number”分配给类型“string”</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元组的长度是固定的，不允许添加额外元素 (固定长度)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line">tuple = [<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>, <span class="number">3</span>] <span class="comment">// ❌报错：源具有 3 个元素，但目标仅允许 2 个</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tuple 会被 TS 编译器编译为 JS 数组，因此 tuple 可以用数组上所有的属性及方法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>]</span><br><span class="line">tuple.<span class="title function_">push</span>(<span class="number">10</span>) <span class="comment">// 这里不会报错，因此可以修改元组长度，但添加了 tuple 中没有定义的类型会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读元组，不允许修改的元组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tuple</span>: <span class="keyword">readonly</span> [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>]</span><br><span class="line">tuple.<span class="title function_">push</span>(<span class="number">30</span>) <span class="comment">// ❌报错：&#x27;push&#x27; 方法不能在只读元组上调用</span></span><br></pre></td></tr></table></figure>

<h2 id="枚举（Enum）"><a href="#枚举（Enum）" class="headerlink" title="枚举（Enum）"></a>枚举（<em>Enum</em>）</h2><p><strong>枚举</strong>( enum )是 TypeScript 中一种用于定义一组具有命名标识符的常量集合的类型。它使我们可以为一组相关的值赋予更有意义的名字，提升代码的可读性和维护性</p>
<p>语法：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> 枚举名 &#123;</span><br><span class="line">  枚举成员<span class="number">1</span> = 值<span class="number">1</span>,</span><br><span class="line">  枚举成员<span class="number">2</span> = 值<span class="number">2</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="类型断言（Type-Assertion）"><a href="#类型断言（Type-Assertion）" class="headerlink" title="类型断言（Type Assertion）"></a>类型断言（<em>Type Assertion</em>）</h2><p><strong>类型断言</strong>是一种显式地告诉 TypeScript 某个值的具体类型，用于编译器无法自动推断出正确类型的情况。类型断言不会在运行时做任何类型检查或转换，仅仅用于在编译时指导 TypeScript</p>
<p>语法：<code>变量 as 类型</code></p>
<p>例：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当你有一个变量类型为 any 时，使用类型断言可以告诉 TypeScript 它的真实类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">vLength</span>: <span class="built_in">number</span> = (value <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件（tsconfig-json）"><a href="#配置文件（tsconfig-json）" class="headerlink" title="配置文件（tsconfig.json）"></a>配置文件（<em>tsconfig.json</em>）</h2><h2 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（<em>Interface</em>）</h2><h2 id="泛型（）"><a href="#泛型（）" class="headerlink" title="泛型（）"></a>泛型（）</h2><h2 id="装饰器（）"><a href="#装饰器（）" class="headerlink" title="装饰器（）"></a>装饰器（）</h2><h2 id="面向对象（OOP）"><a href="#面向对象（OOP）" class="headerlink" title="面向对象（OOP）"></a>面向对象（OOP）</h2>]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue.js (二) 基础API</title>
    <url>/posts/95ce540.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a><code>v-bind</code> 指令</h2><p>描述：用于动态地将数据绑定到 HTML 元素的属性上，当数据发生变化时，其对应的属性值也会自动更新变化</p>
<p>语法：<code>v-bind:attrName=&quot;expression&quot;</code> or <code>:attrName=&quot;expression&quot;</code></p>
<p><code>attrName</code> 为要绑定的属性名，<code>expression</code> 为要绑定的数据，它可以是任意的 Vue 表达式</p>
<h3 id="1-动态绑定元素属性"><a href="#1-动态绑定元素属性" class="headerlink" title="1. 动态绑定元素属性"></a>1. 动态绑定元素属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- disabled 如果为 true, 则启用该属性, 反之则移除该属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&#x27;百度&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">disabled</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-动态绑定元素class-对象语法"><a href="#2-动态绑定元素class-对象语法" class="headerlink" title="2. 动态绑定元素class, 对象语法"></a>2. 动态绑定元素class, 对象语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 根据对象属性的 value 是否为 true, 来选择是否将其属性的 key 作为该元素 className --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;content: isStat&#125;&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isStat</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-动态绑定元素class-数组语法"><a href="#3-动态绑定元素class-数组语法" class="headerlink" title="3. 动态绑定元素class, 数组语法"></a>3. 动态绑定元素class, 数组语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 数组中每个 item 都将成为该元素的 className --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[className, &#x27;style2&#x27;]&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">className</span>: <span class="string">&#x27;content&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: chartreuse</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-动态绑定元素style-对象语法"><a href="#4-动态绑定元素style-对象语法" class="headerlink" title="4. 动态绑定元素style, 对象语法"></a>4. 动态绑定元素style, 对象语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">content</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果不加引号, 则要用驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-动态绑定元素style-数组语法"><a href="#5-动态绑定元素style-数组语法" class="headerlink" title="5. 动态绑定元素style, 数组语法"></a>5. 动态绑定元素style, 数组语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[content, style2]&quot;</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates enim architecto rem nostrum, aliquam corporis. Maiores vel magni exercitationem. Odit vitae dicta ipsam earum delectus aliquid velit ipsum vel deleniti?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">content</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">style2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">border</span>: <span class="string">&#x27;2px solid black&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">padding</span>: <span class="string">&#x27;10px 15px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;chartreuse&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-model-指令"><a href="#v-model-指令" class="headerlink" title="v-model 指令"></a><code>v-model</code> 指令</h2><p>描述：用于实现表单元素( 如 input、textarea、select 等 )和 Vue 实例数据的双向绑定，它会根据表单的类型来动态的将表单输入的内容与 Vue 组件实例的数据进行双向绑定</p>
<p>语法：<code>v-model=&quot;data&quot;</code></p>
<p>data 为要绑定的数据，必须是响应式数据</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例1. text类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- .trim 为 v-model 修饰符, 可以过滤首尾的空格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的内容是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例2. radio类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123; sex &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- radio 类型表单需要显示的指定 value 的值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例3. checkbox类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>喜好：&#123;&#123; likes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果使用了一组 checkbox 类型表单, 需要显示的指定 value 的值, 同时要将 v-model 绑定为一个数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 篮球</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 足球</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 乒乓球</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">likes</span>: [<span class="string">&#x27;乒乓球&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-model</code> 修饰符：</p>
<ul>
<li><p><code>.lazy</code> 失去焦点或按下回车键时才更新绑定数据</p>
</li>
<li><p><code>.number</code> 输入字符串转换为有效的数字</p>
</li>
<li><p><code>.trim</code> 过滤首尾的空格</p>
</li>
</ul>
<h2 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a><code>v-on</code> 指令</h2><p>描述：用于监听 DOM 事件，并在事件触发时执行指定的方法或表达式</p>
<p>语法：<code>v-on:eventName=&quot;handler&quot;</code> or <code>@:eventName=&quot;handler&quot;</code></p>
<p>eventName 为事件名，handler 为事件触发时要执行的函数或 Vue表达式</p>
<p>例1：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    如果事件处理函数中无需传递参数可以不加小括号()</span></span><br><span class="line"><span class="comment">    这样的话在事件触发时 Vue 会自动添加事件对象(event)作为第1个参数</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>Button-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;Button-2 was clicked&#x27;)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- &#x27;Button-2 was clicked&#x27; --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    你也可以在事件处理函数参数中显示的指定事件对象</span></span><br><span class="line"><span class="comment">    $event 为触发该事件的事件对象</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler($event)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handler</span>(<span class="params">arg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>另外，<code>v-on</code> 还支持修饰符，用来对事件进行额外的处理，如 阻止默认行为、阻止事件冒泡等</p>
<p>常用事件修饰符列表：</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>.prevent</code></td>
<td>阻止默认行为</td>
</tr>
<tr>
<td><code>.stop</code></td>
<td>阻止事件冒泡</td>
</tr>
<tr>
<td><code>.capture</code></td>
<td>事件在捕获阶段触发</td>
</tr>
<tr>
<td><code>.self</code></td>
<td>只当事件在该元素本身触发时才处理</td>
</tr>
<tr>
<td><code>.once</code></td>
<td>事件只执行一次</td>
</tr>
<tr>
<td><code>.passive</code></td>
<td>提升页面滚动性能</td>
</tr>
<tr>
<td><code>.left</code></td>
<td>按下键盘左键</td>
</tr>
<tr>
<td><code>.right</code></td>
<td>按下键盘右键</td>
</tr>
<tr>
<td><code>.up</code></td>
<td>按下键盘上键</td>
</tr>
<tr>
<td><code>.down</code></td>
<td>按下键盘下键</td>
</tr>
<tr>
<td><code>.enter</code></td>
<td>按下键盘 回车 键</td>
</tr>
<tr>
<td><code>.delete</code></td>
<td>按下键盘 Delete 键</td>
</tr>
<tr>
<td><code>.esc</code></td>
<td>按下键盘 ESC 键</td>
</tr>
<tr>
<td><code>.space</code></td>
<td>按下键盘 空格 键</td>
</tr>
<tr>
<td><code>.tab</code></td>
<td>按下键盘 Tab 键</td>
</tr>
<tr>
<td><code>.capsLock</code></td>
<td>按下键盘 CapsLock 键</td>
</tr>
<tr>
<td><code>.ctrl</code></td>
<td>组合键，按下键盘 Ctrl 键 + Other</td>
</tr>
<tr>
<td><code>.alt</code></td>
<td>组合键，按下键盘 Alt 键 + Other</td>
</tr>
<tr>
<td><code>.shift</code></td>
<td>组合键，按下键盘 Shift 键 + Other</td>
</tr>
<tr>
<td><code>.meta</code></td>
<td>组合键，按下键盘 Win 键 + Other</td>
</tr>
</tbody></table>
<p>例2：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;alert1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 阻止默认行为同时阻止事件冒泡 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.timeic.top&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;alert2&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;alert 1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;alert 2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例3：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当按下 Ctrl + Enter 键时执行 handler --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.enter</span>=<span class="string">&quot;handler&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">`您输入的是 &#x27;<span class="subst">$&#123;<span class="variable language_">this</span>.text&#125;</span>&#x27;`</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a><code>computed</code> 计算属性</h2><p>Vue 的 computed 用于定义一些基于现有数据计算得出的属性。它可以将逻辑与模板分离，使代码更加简洁、易读、易于维护。同时计算属性会通过缓存和依赖跟踪机制提供响应式和高效的性能</p>
<p>特点：</p>
<ul>
<li><strong>缓存：</strong>计算属性会根据其依赖的响应式数据进行缓存( 缓存计算结果 )，只有当它所依赖的<strong>响应式数据</strong>发生变化时才会重新计算，这意味着在模板中多次访问同一个计算属性时，只会计算一次</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">&#x27;王&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">&#x27;五&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// fullName 可以简写为一个函数, 例如：fullName() &#123; //访问 fullName 时，执行此处 &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 访问 fullName 时，执行 get() </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// get 中 return 的值为计算结果，它会根据其依赖的数据进行缓存</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 修改 fullName 时，执行 set()</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> [firstName, lastName] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/main.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 fullName</span></span><br><span class="line"><span class="comment">// vm.fullName = &#x27;李 四&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch 侦听器"></a><code>watch</code> 侦听器</h2><p>Vue 的 <code>watch</code> 选项可以用来监听某个属性的变化，并在属性变化时执行相应的操作</p>
<p>当你需要在数据发生变化时执行<strong>异步</strong>或复杂的操作，或者需要在数据变化后执行一些特定的逻辑时，可以使用 <code>watch</code></p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123; info &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// isHot 可以简写为一个函数, 例如：isHot() &#123; //isHot 发生变化时执行此处 &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 当 isHot 被修改时执行 handler 函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>watch</code> 侦听器还支持一些配置选项，常用的有：</p>
<ul>
<li><p><code>immediate</code>: 值为 <code>true</code> 时，会在组件初始化时会先调用一次 handler 函数。默认值为 <code>false</code></p>
</li>
<li><p><code>deep</code>: 默认 <code>watch</code> 无法监听数组或对象内部数据的变化，当 <code>deep</code> 的值为 <code>true</code> 时，就可以深度递归监听数组或对象内部值的变化。默认值为 <code>false</code></p>
</li>
</ul>
<h2 id="v-show-指令"><a href="#v-show-指令" class="headerlink" title="v-show 指令"></a><code>v-show</code> 指令</h2><p>描述：用于根据条件动态的显示与隐藏元素，当表达式的值为 <code>false</code> 时元素的 style 就会加上 <code>display: none</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>I am visible<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isVisible</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">toggle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">isVisible</span> = !<span class="variable language_">this</span>.<span class="property">isVisible</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-if-指令"><a href="#v-if-指令" class="headerlink" title="v-if 指令"></a><code>v-if</code> 指令</h2><p>描述：用于根据条件动态地渲染/销毁元素或组件。它根据表达式的值来决定是否渲染元素，它的语法为：<code>v-if=&quot;条件&quot;</code></p>
<p><code>v-if</code> 还可以配合 <code>v-else-if</code> 和 <code>v-else</code> 指令来实现多条件处理</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当 type 为 A 时渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>这是类型 A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当 type 为 B 时渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>这是类型 B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当 type 既不为 A 也不为 B 时渲染 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>这是其他类型<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 切换 type 的按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;A&#x27;)&quot;</span>&gt;</span> A <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;B&#x27;)&quot;</span>&gt;</span> B <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;O&#x27;)&quot;</span>&gt;</span> O <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&#x27;A&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">changeType</span>(<span class="params">type</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">type</span> = type</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for-指令"><a href="#v-for-指令" class="headerlink" title="v-for 指令"></a><code>v-for</code> 指令</h2><p>描述：用于渲染列表数据，它可以将一个数组或一个对象在页面中响应式的渲染为多个相同结构的元素</p>
<p>语法：<code>v-for=&quot;value in items&quot;</code> or <code>v-for=&quot;(value, key) in items&quot;</code></p>
<p>例1：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      如果数组元素的顺序发生变化, 可能会导致重复渲染, 甚至出现错位渲染的情况</span></span><br><span class="line"><span class="comment">      因此遍历数组时, :key 值建议为数组成员中的唯一值(id)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- element 为数组的每个元素, index 为数组的索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(element, index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;element.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; element.name &#125;&#125;-&#123;&#123; element.age &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value 为对象属性的值, key 为对象中属性的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; key &#125;&#125;-&#123;&#123; value &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历一个字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- char 为字符串中的每个字符, index 为每个字符的索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char, index) in string&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; char &#125;&#125;-&#123;&#123; index &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历指定次数（5次）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遍历数字 1-5, number 为遍历的数字, index 为该数字的索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number, index) in 5&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; number &#125;&#125;-&#123;&#123; index &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">car</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;宝马xxx&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">price</span>: <span class="string">&#x27;xx万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">color</span>: <span class="string">&#x27;白色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">string</span>: <span class="string">&#x27;HelloVue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>key</code> <strong>属性的作用：</strong></p>
<p>Vue 默认按照“就地更新”的策略来更新通过 <code>v-for</code> 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新所有的元素，确保它们在原本指定的索引位置上渲染。默认模式是高效的，但<strong>只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况</strong></p>
<p><code>key</code> 属性可以帮助 Vue 在列表项更新时准确、高效地识别每个元素，避免不必要的重新渲染。具体来说，<code>key</code> 提供了一个唯一标识，使 Vue 在数据变化时能更智能地对比新旧元素，从而进行最小化的 DOM 渲染</p>
<p>例2：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;e in filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;e.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; e.name &#125;&#125; - &#123;&#123; e.age &#125;&#125; - &#123;&#123; e.sex &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">keyWord</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">sortType</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">persons</span>: [</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Patricia&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Jennifer&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;James&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Robert&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">filPersons</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sortType</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? (p2.<span class="property">age</span> - p1.<span class="property">age</span>) : (p1.<span class="property">age</span> - p2.<span class="property">age</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-text-amp-v-html-指令"><a href="#v-text-amp-v-html-指令" class="headerlink" title="v-text &amp; v-html 指令"></a><code>v-text</code> &amp; <code>v-html</code> 指令</h2><p>描述：用于更新 HTML 元素的内容</p>
<ul>
<li><p><code>v-text</code> 是将元素的 <code>textContent</code> 设置为指定的值</p>
</li>
<li><p><code>v-html</code> 是将元素的 <code>innerHTML</code> 设置为指定的值</p>
</li>
</ul>
<p>注意：由于 <code>v-html</code> 指令将字符串作为 HTML 直接解析，因此要确保绑定的数据是可信的。在使用 <code>v-html</code> 指令时，应该避免将用户输入的内容直接插入到 HTML 中，以防止 XSS( 跨站脚本攻击 ) 等安全问题</p>
<h2 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a><code>v-cloak</code> 指令</h2><p>描述：用于解决 Vue 编译过程出现的闪烁问题。通常与 CSS 配合使用，可以确保在 Vue 实例完全编译之前，元素不会出现 Vue 插值表达式( <code>&#123;&#123;xxx&#125;&#125;</code> )</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当 Vue.js 加载完成并创建应用实例完成挂载后 v-cloak 属性会被 Vue 自动删掉 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;v-cloak&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a><code>v-pre</code> 指令</h2><p>描述：用于跳过当前元素和其子元素的模板编译过程。这意味着你不能在 <code>v-pre</code> 标记的元素上使用 Vue指令和插值语法</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 跳过静态元素(没有使用Vue指令和模板语法的元素)的模板编译过程, 可以加快编译速度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-pre</span>&gt;</span>public element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Vue.js</tag>
      </tags>
  </entry>
</search>
