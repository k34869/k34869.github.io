<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Timeicの博客</title>
  
  
  <link href="https://www.timeic.top/atom.xml" rel="self"/>
  
  <link href="https://www.timeic.top/"/>
  <updated>2025-03-30T03:14:55.575Z</updated>
  <id>https://www.timeic.top/</id>
  
  <author>
    <name>Timeic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue (二) 基础API</title>
    <link href="https://www.timeic.top/posts/95ce540.html"/>
    <id>https://www.timeic.top/posts/95ce540.html</id>
    <published>2024-11-01T12:25:16.000Z</published>
    <updated>2025-03-30T03:14:55.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a><code>v-bind</code> 指令</h2><p>描述：用于动态地将数据绑定到 HTML 元素的属性上，当数据发生变化时，其对应的属性值也会自动更新变化</p><p>语法：<code>v-bind:attrName=&quot;expression&quot;</code> or <code>:attrName=&quot;expression&quot;</code></p><p><code>attrName</code> 为要绑定的属性名，<code>expression</code> 为要绑定的数据，它可以是任意的 Vue 表达式</p><h3 id="1-动态绑定元素属性"><a href="#1-动态绑定元素属性" class="headerlink" title="1. 动态绑定元素属性"></a>1. 动态绑定元素属性</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- disabled 如果为 true, 则启用该属性, 反之则移除该属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态绑定多个属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:</span>=<span class="string">&quot;attrs&quot;</span>&gt;</span>Hello!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> url = <span class="title function_">ref</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> title = <span class="title function_">ref</span>(<span class="string">&#x27;百度&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> disabled = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> attrs = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: <span class="string">&#x27;Hello!!!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: <span class="string">&#x27;title&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- disabled 如果为 true, 则启用该属性, 反之则移除该属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态绑定多个属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:</span>=<span class="string">&quot;attrs&quot;</span>&gt;</span>Hello!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&#x27;百度&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">disabled</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">attrs</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&#x27;Hello!!!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="string">&#x27;title&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="2-动态绑定元素class-对象语法"><a href="#2-动态绑定元素class-对象语法" class="headerlink" title="2. 动态绑定元素class, 对象语法"></a>2. 动态绑定元素class, 对象语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据对象属性的 value 是否为 true, 来选择是否将其属性的 key 作为该元素 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; content: isStat &#125;&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isStat = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据对象属性的 value 是否为 true, 来选择是否将其属性的 key 作为该元素 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; content: isStat &#125;&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isStat</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="3-动态绑定元素class-数组语法"><a href="#3-动态绑定元素class-数组语法" class="headerlink" title="3. 动态绑定元素class, 数组语法"></a>3. 动态绑定元素class, 数组语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组中每个 item 都将成为该元素的 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[className, &#x27;style2&#x27;]&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> className = <span class="title function_">ref</span>(<span class="string">&#x27;content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: chartreuse</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组中每个 item 都将成为该元素的 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[className, &#x27;style2&#x27;]&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">className</span>: <span class="string">&#x27;content&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: chartreuse</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="4-动态绑定元素style-对象语法"><a href="#4-动态绑定元素style-对象语法" class="headerlink" title="4. 动态绑定元素style, 对象语法"></a>4. 动态绑定元素style, 对象语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> content = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果不加引号, 则要用驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果不加引号, 则要用驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="5-动态绑定元素style-数组语法"><a href="#5-动态绑定元素style-数组语法" class="headerlink" title="5. 动态绑定元素style, 数组语法"></a>5. 动态绑定元素style, 数组语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[content, style2]&quot;</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates enim architecto rem nostrum, aliquam corporis. Maiores vel magni exercitationem. Odit vitae dicta ipsam earum delectus aliquid velit ipsum vel deleniti?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> content = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> style2 = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">border</span>: <span class="string">&#x27;2px solid black&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">padding</span>: <span class="string">&#x27;10px 15px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;chartreuse&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[content, style2]&quot;</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates enim architecto rem nostrum, aliquam corporis. Maiores vel magni exercitationem. Odit vitae dicta ipsam earum delectus aliquid velit ipsum vel deleniti?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">style2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">border</span>: <span class="string">&#x27;2px solid black&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">padding</span>: <span class="string">&#x27;10px 15px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">backgroundColor</span>: <span class="string">&#x27;chartreuse&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="v-model-指令"><a href="#v-model-指令" class="headerlink" title="v-model 指令"></a><code>v-model</code> 指令</h2><p>描述：用于实现表单元素( 如 input、textarea、select 等 )和 Vue 实例数据的双向绑定，它会根据表单的类型来动态的将表单输入的内容与 Vue 组件实例的数据进行双向绑定</p><p>语法：<code>v-model=&quot;data&quot;</code></p><p>data 为要绑定的数据，必须是响应式数据</p><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例1. text类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .trim 为 v-model 修饰符, 可以过滤首尾的空格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的内容是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例2. radio类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123; sex &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- radio 类型表单需要显示的指定 value 的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例3. checkbox类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>喜好：&#123;&#123; likes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用了一组 checkbox 类型表单, 需要显示的指定 value 的值, 同时要将 v-model 绑定为一个数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 乒乓球</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> sex = <span class="title function_">ref</span>(<span class="string">&#x27;男&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> likes = <span class="title function_">reactive</span>([<span class="string">&#x27;乒乓球&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例1. text类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .trim 为 v-model 修饰符, 可以过滤首尾的空格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的内容是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例2. radio类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123; sex &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- radio 类型表单需要显示的指定 value 的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例3. checkbox类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>喜好：&#123;&#123; likes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用了一组 checkbox 类型表单, 需要显示的指定 value 的值, 同时要将 v-model 绑定为一个数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 乒乓球</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">likes</span>: [<span class="string">&#x27;乒乓球&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><code>v-model</code> 修饰符：</p><ul><li><p><code>.lazy</code> 失去焦点或按下回车键时才更新绑定数据</p></li><li><p><code>.number</code> 输入字符串转换为有效的数字</p></li><li><p><code>.trim</code> 过滤首尾的空格</p></li></ul><h2 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a><code>v-on</code> 指令</h2><p>描述：用于监听 DOM 事件，并在事件触发时执行指定的方法或表达式</p><p>语法：<code>v-on:eventName=&quot;handler&quot;</code> or <code>@:eventName=&quot;handler&quot;</code></p><p>eventName 为事件名，handler 为事件触发时要执行的函数或 Vue表达式</p><p>例1：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      如果事件处理函数中无需传递参数可以不加小括号()</span></span><br><span class="line"><span class="comment">      这样的话在事件触发时 Vue 会自动添加事件对象(event)作为第1个参数</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>Button-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;Button-2 was clicked&#x27;)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- &#x27;Button-2 was clicked&#x27; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      你也可以在事件处理函数参数中显示的指定事件对象</span></span><br><span class="line"><span class="comment">      $event 为触发该事件的事件对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler($event)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">arg</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      如果事件处理函数中无需传递参数可以不加小括号()</span></span><br><span class="line"><span class="comment">      这样的话在事件触发时 Vue 会自动添加事件对象(event)作为第1个参数</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>Button-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;Button-2 was clicked&#x27;)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- &#x27;Button-2 was clicked&#x27; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      你也可以在事件处理函数参数中显示的指定事件对象</span></span><br><span class="line"><span class="comment">      $event 为触发该事件的事件对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler($event)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">arg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>另外，<code>v-on</code> 还支持修饰符，用来对事件进行额外的处理，如 阻止默认行为、阻止事件冒泡等</p><p>常用事件修饰符列表：</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td><code>.prevent</code></td><td>阻止默认行为</td></tr><tr><td><code>.stop</code></td><td>阻止事件冒泡</td></tr><tr><td><code>.capture</code></td><td>事件在捕获阶段触发</td></tr><tr><td><code>.self</code></td><td>只当事件在该元素本身触发时才处理</td></tr><tr><td><code>.once</code></td><td>事件只执行一次</td></tr><tr><td><code>.passive</code></td><td>提升页面滚动性能</td></tr><tr><td><code>.left</code></td><td>按下键盘左键</td></tr><tr><td><code>.right</code></td><td>按下键盘右键</td></tr><tr><td><code>.up</code></td><td>按下键盘上键</td></tr><tr><td><code>.down</code></td><td>按下键盘下键</td></tr><tr><td><code>.enter</code></td><td>按下键盘 回车 键</td></tr><tr><td><code>.delete</code></td><td>按下键盘 Delete 键</td></tr><tr><td><code>.esc</code></td><td>按下键盘 ESC 键</td></tr><tr><td><code>.space</code></td><td>按下键盘 空格 键</td></tr><tr><td><code>.tab</code></td><td>按下键盘 Tab 键</td></tr><tr><td><code>.capsLock</code></td><td>按下键盘 CapsLock 键</td></tr><tr><td><code>.ctrl</code></td><td>组合键，按下键盘 Ctrl 键 + Other</td></tr><tr><td><code>.alt</code></td><td>组合键，按下键盘 Alt 键 + Other</td></tr><tr><td><code>.shift</code></td><td>组合键，按下键盘 Shift 键 + Other</td></tr><tr><td><code>.meta</code></td><td>组合键，按下键盘 Win 键 + Other</td></tr></tbody></table><p>例2：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;alert1&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 阻止默认行为同时阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.timeic.top&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;alert2&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">alert1</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;alert 1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">alert2</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;alert 2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;alert1&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 阻止默认行为同时阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.timeic.top&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;alert2&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;alert 1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;alert 2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>例3：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当按下 Ctrl + Enter 键时执行 handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.enter</span>=<span class="string">&quot;handler&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">`您输入的是 &#x27;<span class="subst">$&#123;text.value&#125;</span>&#x27;`</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当按下 Ctrl + Enter 键时执行 handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.enter</span>=<span class="string">&quot;handler&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">`您输入的是 &#x27;<span class="subst">$&#123;<span class="variable language_">this</span>.text&#125;</span>&#x27;`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a><code>computed</code> 计算属性</h2><p>Vue 的 computed 用于定义一些基于现有数据计算得出的属性。它可以将逻辑与模板分离，使代码更加简洁、易读、易于维护。同时计算属性会通过缓存和依赖跟踪机制提供响应式和高效的性能</p><p>特点：</p><ul><li><strong>缓存：</strong>计算属性会根据其依赖的响应式数据进行缓存( 缓存计算结果 )，只有当它所依赖的<strong>响应式数据</strong>发生变化时才会重新计算，这意味着在模板中多次访问同一个计算属性时，只会计算一次</li></ul><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// computed 函数返回一个 RefImpl 类型 Proxy 对象( Vue 响应式数据 )</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;王&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;五&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里可以使用简写形式: const fullName = computed(() =&gt; &#123; //访问 fullName.value 时，执行此处 &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> fullName = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问 fullName.value 时，执行 get()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// get 中 return 的值为计算结果，它会根据其依赖的数据进行缓存</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> firstName.<span class="property">value</span> + <span class="string">&#x27; &#x27;</span> + lastName.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 修改 fullName.value 时，执行 set()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> [newFirstName, newLastName] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        firstName.<span class="property">value</span> = newFirstName;</span></span><br><span class="line"><span class="language-javascript">        lastName.<span class="property">value</span> = newLastName;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;王&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;五&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fullName 可以简写为一个函数, 例如：fullName() &#123; //访问 fullName 时，执行此处 &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 访问 fullName 时，执行 get()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// get 中 return 的值为计算结果，它会根据其依赖的数据进行缓存</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 修改 fullName 时，执行 set()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> [firstName, lastName] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/main.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 fullName</span></span><br><span class="line"><span class="comment">// vm.fullName = &#x27;李 四&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch 侦听器"></a><code>watch</code> 侦听器</h2><p>Vue 的 <code>watch</code> API 可以用来监听某个属性的变化，并在属性变化时执行相应的操作</p><p>当你需要在数据发生变化时执行<strong>异步</strong>或复杂的操作( <em>副作用操作</em> )，或者需要在数据变化后执行一些特定的逻辑时，可以使用 <code>watch</code></p><h3 id="watch-选项式-API"><a href="#watch-选项式-API" class="headerlink" title="watch 选项式 API"></a><code>watch</code> 选项式 API</h3><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123; info &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// isHot 可以简写为一个函数, 例如：isHot() &#123; //isHot 发生变化时执行此处 &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当 isHot 被修改时执行 handler 函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配置选项...</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在选项式 API 中，还可以通过组件实例上的 <code>$watch</code> 方法来监听数据变化：</p><p>语法：<code>$watch(监听属性, 回调函数, 配置选项)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $watch 函数会返回停止监听函数 stop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> stop = <span class="variable language_">this</span>.$watch(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">count++; <span class="comment">// 修改 count</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">stop</span>(); <span class="comment">// 停止监听</span></span></span><br><span class="line"><span class="language-javascript">count++; <span class="comment">// 不再触发监听</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Tips：</p><ul><li>在选项式 API 中，默认监听复杂类型(如 数组、对象)的响应式数据，会监听其引用值，而不会监听其内部属性的变化，如要监听内部属性的变化则需要配置项 <code>deep: true</code></li></ul><h3 id="watch-组合式-API"><a href="#watch-组合式-API" class="headerlink" title="watch 组合式 API"></a><code>watch</code> 组合式 API</h3><p>Vue3 组合式 API 中提供了 <code>watch</code> 函数，用于监听 <strong>响应式数据</strong>( 包括 <code>ref</code>、<code>reactive</code>、计算属性 等… ) 的变化</p><ol><li>同时监听多个数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;张&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;三&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用数组的方式同时监听多个数据</span></span><br><span class="line"><span class="title function_">watch</span>([firstName, lastName], <span class="function">(<span class="params">[newFirst, newLast], [oldFirst, oldLast]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`名字变化: <span class="subst">$&#123;oldFirst&#125;</span><span class="subst">$&#123;oldLast&#125;</span> → <span class="subst">$&#123;newFirst&#125;</span><span class="subst">$&#123;newLast&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">firstName.<span class="property">value</span> = <span class="string">&#x27;李&#x27;</span>; <span class="comment">// 输出：名字变化: 张三 → 李三</span></span><br><span class="line">lastName.<span class="property">value</span> = <span class="string">&#x27;四&#x27;</span>;  <span class="comment">// 输出：名字变化: 李三 → 李四</span></span><br></pre></td></tr></table></figure><ol start="2"><li>监听复杂类型的响应式数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认会监听对象内部属性的变化( 隐式深度监听 )，而不是监听对象的引用变化</span></span><br><span class="line"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newPerson, oldPerson</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 由于对象的引用关系，这里的新值 newPerson 和 旧值 oldPerson 是相同(相等)的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`对象变化:`</span>, newPerson);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>停止监听</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// watch 函数会返回停止监听函数 stop</span></span><br><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count 变化: <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span> = <span class="number">1</span>; <span class="comment">// 触发监听</span></span><br><span class="line"><span class="title function_">stop</span>(); <span class="comment">// 停止监听</span></span><br><span class="line">count.<span class="property">value</span> = <span class="number">2</span>; <span class="comment">// 不再触发监听</span></span><br></pre></td></tr></table></figure><p>Tips：</p><ul><li><code>reactive</code> 对象的监听：用 <code>reactive</code> 函数创建的复杂类型响应式数据，默认会监听对象内部属性的变化( 隐式深度监听 )，而不会监听对象的引用变化</li></ul><p><code>watch</code> 侦听器配置选项：</p><ul><li><p><code>immediate</code>: 值为 <code>true</code> 时，会在组件初始化时会先调用一次回调 / handler 函数。默认值为 <code>false</code></p></li><li><p><code>deep</code>: 默认 <code>watch</code> 无法监听数组或对象内部数据的变化( <strong>组合式API 除外</strong> )，当 <code>deep</code> 的值为 <code>true</code> 时，就可以深度递归监听数组或对象内部值的变化。默认值为 <code>false</code></p></li><li><p><code>once</code>: 一次性监听。值为 <code>true</code> 时，数据变化时只会触发一次</p></li></ul><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">&#125;, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;) <span class="comment">// once: true 一次性监听器</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">once</span>: <span class="literal">true</span> <span class="comment">// once: true 一次性监听器</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a><code>watchEffect</code></h2><p>Vue3 的 <code>watchEffect</code> 是 <strong>一种自动收集依赖的响应式监听器</strong>，与 <code>watch</code> 不同，它<strong>不需要手动指定监听的变量</strong>，而是会在<strong>回调函数执行时，自动收集依赖</strong>，并在依赖变化时重新执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">25</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`用户信息变化: <span class="subst">$&#123;user.name&#125;</span> - <span class="subst">$&#123;user.age&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeUser</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">age</span> = <span class="number">28</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeUser&quot;</span>&gt;</span>修改用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>watch</code> 和 <code>watchEffect</code> 的区别：</p><h2 id="v-show-指令"><a href="#v-show-指令" class="headerlink" title="v-show 指令"></a><code>v-show</code> 指令</h2><p>描述：用于根据条件动态的显示与隐藏元素，当表达式的值为 <code>false</code> 时元素的 style 就会加上 <code>display: none</code></p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>I am visible<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isVisible = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    isVisible.<span class="property">value</span> = !isVisible.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-if-指令"><a href="#v-if-指令" class="headerlink" title="v-if 指令"></a><code>v-if</code> 指令</h2><p>描述：用于根据条件动态地渲染/销毁元素或组件。它根据表达式的值来决定是否渲染元素，它的语法为：<code>v-if=&quot;条件&quot;</code></p><p><code>v-if</code> 还可以配合 <code>v-else-if</code> 和 <code>v-else</code> 指令来实现多条件处理</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 type 为 A 时渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>这是类型 A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 type 为 B 时渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>这是类型 B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 type 既不为 A 也不为 B 时渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>这是其他类型<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切换 type 的按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;A&#x27;)&quot;</span>&gt;</span> A <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;B&#x27;)&quot;</span>&gt;</span> B <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;O&#x27;)&quot;</span>&gt;</span> O <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> type = <span class="title function_">ref</span>(<span class="string">&#x27;A&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeType</span> = (<span class="params">type</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    type.<span class="property">value</span> = type;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for-指令"><a href="#v-for-指令" class="headerlink" title="v-for 指令"></a><code>v-for</code> 指令</h2><p>描述：用于渲染列表数据，它可以将一个数组或一个对象在页面中响应式的渲染为多个相同结构的元素</p><p>语法：<code>v-for=&quot;value in items&quot;</code> or <code>v-for=&quot;(value, key) in items&quot;</code></p><p>例1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        如果数组元素的顺序发生变化, 可能会导致重复渲染, 甚至出现错位渲染的情况</span></span><br><span class="line"><span class="comment">        因此遍历数组时, :key 值建议为数组成员中的唯一值(id)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- element 为数组的每个元素, index 为数组的索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(element, index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;element.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; element.name &#125;&#125;-&#123;&#123; element.age &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- value 为对象属性的值, key 为对象中属性的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; key &#125;&#125;-&#123;&#123; value &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历一个字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- char 为字符串中的每个字符, index 为每个字符的索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char, index) in string&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; char &#125;&#125;-&#123;&#123; index &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历指定次数（5次）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遍历数字 1-5, number 为遍历的数字, index 为该数字的索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number, index) in 5&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; number &#125;&#125;-&#123;&#123; index &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> persons = <span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span></span><br><span class="line"><span class="language-javascript">]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> car = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;宝马xxx&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">price</span>: <span class="string">&#x27;xx万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: <span class="string">&#x27;白色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> string = <span class="title function_">ref</span>(<span class="string">&#x27;HelloVue&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>key</code> <strong>属性的作用：</strong></p><p>Vue 默认按照“就地更新”的策略来更新通过 <code>v-for</code> 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新所有的元素，确保它们在原本指定的索引位置上渲染。默认模式是高效的，但<strong>只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况</strong></p><p><code>key</code> 属性可以帮助 Vue 在列表项更新时准确、高效地识别每个元素，避免不必要的重新渲染。具体来说，<code>key</code> 提供了一个唯一标识，使 Vue 在数据变化时能更智能地对比新旧元素，从而进行最小化的 DOM 渲染</p><p>例2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;e in filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;e.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; e.name &#125;&#125; - &#123;&#123; e.age &#125;&#125; - &#123;&#123; e.sex &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> keyWord = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> sortType = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> persons = <span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Patricia&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Jennifer&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;James&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Robert&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> filPersons = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr = persons.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(keyWord.<span class="property">value</span>) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (sortType.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> sortType.<span class="property">value</span> === <span class="number">1</span> ? (p2.<span class="property">age</span> - p1.<span class="property">age</span>) : (p1.<span class="property">age</span> - p2.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-text-amp-v-html-指令"><a href="#v-text-amp-v-html-指令" class="headerlink" title="v-text &amp; v-html 指令"></a><code>v-text</code> &amp; <code>v-html</code> 指令</h2><p>描述：用于更新 HTML 元素的内容</p><ul><li><p><code>v-text</code> 是将元素的 <code>textContent</code> 设置为指定的值</p></li><li><p><code>v-html</code> 是将元素的 <code>innerHTML</code> 设置为指定的值</p></li></ul><p>注意：由于 <code>v-html</code> 指令将字符串作为 HTML 直接解析，因此要确保绑定的数据是可信的。在使用 <code>v-html</code> 指令时，应该避免将用户输入的内容直接插入到 HTML 中，以防止 XSS( 跨站脚本攻击 ) 等安全问题</p><h2 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a><code>v-cloak</code> 指令</h2><p>描述：用于解决 Vue 编译过程出现的闪烁问题。通常与 CSS 配合使用，可以确保在 Vue 实例完全编译之前，元素不会出现 Vue 插值表达式( <code>&#123;&#123;xxx&#125;&#125;</code> )</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 Vue.js 加载完成并创建应用实例完成挂载后 v-cloak 属性会被 Vue 自动删掉 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;v-cloak&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a><code>v-pre</code> 指令</h2><p>描述：用于跳过当前元素和其子元素的模板编译过程。这意味着你不能在 <code>v-pre</code> 标记的元素上使用 Vue指令和插值语法</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 跳过静态元素(没有使用Vue指令和模板语法的元素)的模板编译过程, 可以加快编译速度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-pre</span>&gt;</span>public element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue.js" scheme="https://www.timeic.top/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue (一) 项目创建与基本概念</title>
    <link href="https://www.timeic.top/posts/c037ead1.html"/>
    <id>https://www.timeic.top/posts/c037ead1.html</id>
    <published>2024-06-27T14:25:16.000Z</published>
    <updated>2025-03-30T03:14:55.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vue 是一个<strong>渐进式</strong>现代 JavaScript 框架，用于构建用户界面( UI )。它的目标是通过尽可能简单的 Api 实现响应式数据绑定和组合的视图集合( 组件 )</p><p>Vue 的核心只关注视图层，如果需要其它高级功能可以逐步引入( 如 路由、状态管理 等 )</p><p>Vue 起源于开源项目，由前 Google 员工尤雨溪开发并维护，它在开源社区中极具人气，尤其在亚洲地区广泛流行</p><h2 id="MVVM-架构"><a href="#MVVM-架构" class="headerlink" title="MVVM 架构"></a>MVVM 架构</h2><p>MVVM 是一种软件架构模式，它将应用程序分成三层：模型（Model）、视图（View）、视图模型（ViewModel）</p><p>Vue.js 参照了 MVVM 架构的思想设计</p><p><img src="https://cdn.jsdelivr.net/gh/k34869/picx-images-hosting@master/20240627/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE+2023-10-26+151205.9gwfu67rb0.webp" alt="2023-10-26 151205"></p><ul><li><p>模型（Model）</p><ul><li>代表应用程序的数据和业务逻辑</li><li>它是应用的核心部分，包含了所有的数据处理、验证以及对数据的操作</li></ul></li><li><p>视图（View）</p><ul><li>代表应用程序的用户界面( UI )。它呈现模型中的数据给用户，并通过用户交互反馈数据的变化</li><li>在 Web前端中，通常由 HTML、CSS 组成，用于表示界面的结构和样式</li></ul></li><li><p>视图模型（ViewModel）</p><ul><li>连接模型( Model )和视图( View )。它是一个中间层，负责处理视图和模型之间的双向数据绑定</li><li>将模型中的数据转换成视图可识别的格式( HTML DOM )，并将视图的操作反馈给模型</li></ul></li></ul><h2 id="创建-Vue-工程项目"><a href="#创建-Vue-工程项目" class="headerlink" title="创建 Vue 工程项目"></a>创建 Vue 工程项目</h2><p>确保你的机器上安装了 Node.js，之后我们使用 Vite 脚手架来创建项目，它会帮我们生成项目所需的依赖，以及构建工具相关的配置等…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">npm init vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">npx create-vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后根据提示输入项目名称和选择项目模版( Vue + TypeScript 或 Vue + JavaScript )</span></span><br></pre></td></tr></table></figure><p><strong><code>npm create</code> 命令：</strong></p><p><code>npm create</code> 命令是用来运行远程的<strong>项目生成器</strong>( 脚手架 )的命令</p><p>它会自动下载并执行远程的 <code>create-&lt;package-name&gt;</code> 命名的包来创建一个项目</p><p><strong>Vue 项目结构：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">├── node_modules/        # npm 包依赖目录</span><br><span class="line">├── public/              # 静态资源目录（例如 index.html 和静态文件）</span><br><span class="line">├── src/                 # 源代码目录</span><br><span class="line">│   ├── assets/          # 资源文件（图片、样式等）</span><br><span class="line">│   ├── components/      # Vue 组件目录</span><br><span class="line">│   ├── App.vue          # 主应用组件</span><br><span class="line">│   ├── main.js          # 应用入口文件</span><br><span class="line">├── .gitignore           # Git 忽略文件</span><br><span class="line">├── package.json         # 项目的依赖和脚本配置</span><br><span class="line">├── package-lock.json    # 锁定的依赖版本信息</span><br><span class="line">├── vite.config.js       # Vite 构建工具的项目配置文件</span><br><span class="line">└── README.md            # 项目说明文件</span><br></pre></td></tr></table></figure><h2 id="Vue-的基本概念"><a href="#Vue-的基本概念" class="headerlink" title="Vue 的基本概念"></a>Vue 的基本概念</h2><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p><strong>响应式</strong>是 Vue 中的一种机制，指的是当数据发生变化时，Vue 会自动检测到这个变化并更新相关的视图。这种自动的同步更新被称为“响应式系统”。Vue 的响应式系统主要依赖于“依赖追踪”和“数据劫持”技术</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p><img src="https://cdn.jsdelivr.net/gh/k34869/picx-images-hosting@master/image.2a52r1jygn.webp" alt="image"></p><p>组件化指的是将应用程序拆分为多个<strong>独立的、可复用的模块</strong>（组件），每个模块负责特定的功能或界面部分。组件化开发能够提升代码的组织性、复用性和可维护性，尤其适合开发大型的前端应用</p><p>在 Vue 中组件可以用 <code>.vue</code> 文件( 单文件组件SFC )表示，每个组件都封装了自己独立的<strong>模板</strong>、<strong>逻辑</strong>（如数据和方法）、以及<strong>样式</strong>。它包含以下三个部分：</p><ul><li><strong>template</strong>：定义了组件的 HTML 结构</li><li><strong>script</strong>：定义了组件的逻辑，包括数据、方法、生命周期钩子等</li><li><strong>style</strong>：定义了组件的样式</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/CountBtn.vue 计数器按钮组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue 根组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CountBtn</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">CountBtn</span> <span class="keyword">from</span> <span class="string">&#x27;./components/CountBtn.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">CountBtn</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/main.js 应用程序的入口文件 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>组件命名：</strong></p><ul><li><p>kebab-case命名: school / my-school</p></li><li><p>CamelCase命名: School / MySchool</p></li><li><p>组件名不能用 HTML 已有元素的名称</p></li></ul><p><strong>注册组件：</strong></p><ul><li><p>局部注册</p><p>局部注册的组件只在指定的 Vue 实例或组件中可用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Header组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Header组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- scoped 局部CSS样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用Header组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入Header组件(注册前需先导入对应组件)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册Header组件, 只能在当前组件中使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Header</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局注册</p><p>全局注册的组件可以在任何地方使用，通常在 <code>main.js</code>( 程序入口文件 ) 中进行全局注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/main.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入Header组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;Header&#x27;</span>, <span class="title class_">Header</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>在 Vue 中全局注册使用相对较少，主要原因如下：</p><ul><li>命名冲突：全局注册的组件在整个应用中可见，容易与其它组件名称冲突</li><li>难以维护：如果大量组件都全局注册，可能会造成组件引用混乱，管理维护变得复杂</li><li>性能开销：全局注册的组件在应用加载时就被解析( 不管是否使用 )，可能会增加应用的初始加载时间</li></ul><h3 id="Vue-createApp-方法"><a href="#Vue-createApp-方法" class="headerlink" title="Vue.createApp 方法"></a><code>Vue.createApp</code> 方法</h3><p>描述：用来创建 Vue 应用实例的方法，它接收一个对象作为参数，该对象是当前 Vue 应用实例的<strong>根组件</strong>( <em>Root Component</em> )</p><p>组件中包含很多配置选项，常见的包括：</p><ul><li><p><code>template</code>：用于定义组件的模板</p></li><li><p><code>data</code>：用于定义组件的数据，可以在模板中使用</p></li><li><p><code>methods</code>：用于定义组件的方法，可以在模板中调用</p></li><li><p>……</p></li></ul><p>在实际开发中我们会在单个 Vue 应用实例中使用<strong>组件</strong>来构建复杂的单页面应用</p><h3 id="app-mount-方法"><a href="#app-mount-方法" class="headerlink" title="app.mount 方法"></a><code>app.mount</code> 方法</h3><p>描述：将 Vue 应用实例挂载到指定的 DOM 元素上以使 Vue 应用实例在页面中生效。Vue 应用实例挂在后，它会<strong>响应式</strong>地去渲染页面</p><p>语法：<code>app.mount(挂载点)</code></p><p>挂载点可以是一个 DOM元素 或是一个 CSS 选择器，它会返回根组件的实例</p><h3 id="模板-template"><a href="#模板-template" class="headerlink" title="模板 template"></a>模板 <code>template</code></h3><p>Vue 模板是一种描述视图的语法结构。它允许你将 HTML 和 Vue 的特殊语法结合在一起，创建动态的、响应式的用户界面</p><p>Vue 模板主要增加了以下几种语法：</p><p><strong>插值( <em>Mustache</em> )：</strong></p><ul><li><p>语法：<code>&#123;&#123; expression &#125;&#125;</code> | 只能在元素内容中使用，不能在元素属性中使用</p></li><li><p>双大括号( <code>&#123;&#123; &#125;&#125;</code> )中的内容是 Vue 表达式，它可以访问组件实例中的数据</p></li><li><p>作用：用于在模板中插入组件实例中的数据，实现数据的动态渲染，即数据发生变化时，视图自动更新变化</p></li></ul><p><strong>指令( <em>Directive</em> )：</strong></p><ul><li>指令是带有特殊功能的 Vue 模板属性，它通常以 <code>v-</code> 开头，用于在 DOM 元素中添加特定行为和功能</li></ul><p><strong>Vue 表达式：</strong></p><ul><li>Vue表达式可以使用 JavaScript 表达式和一些常用 JavaScript 内置对象( 如 Date, Object 等 )，最重要的是它能访问组件实例上的属性</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 cdn 链接来使用 Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      data 函数返回的对象会被 Vue 代理(new Proxy) -&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      当 data 中的数据发生变化时, Vue 会重新解析模板, 从而使页面与数据保持同步</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;Hello, Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法中的 this 指向组件的实例(被 Vue 代理的对象, this === vm)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">text</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// template 属性中的内容会被 Vue 解析( to Virtual DOM )</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果不指定 template 属性，挂载元素的内容就会成为 Vue 模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;button v-on:click=&quot;alert&quot;&gt;click me!&lt;/button&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 挂载 Vue 应用实例，返回根组件的实例(被 Vue 代理的对象)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="style-scoped（局部样式）"><a href="#style-scoped（局部样式）" class="headerlink" title="style scoped（局部样式）"></a>style scoped（局部样式）</h3><p>局部样式是指组件内的 CSS样式只在该组件内有效，而不会影响到其他组件的样式</p><p>要使用局部样式只需要在 <code>&lt;style&gt;</code> 标签上添加 <code>scoped</code> 属性即可：</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部样式, 如果去除 scoped, 则样式会对所有组件有效(全局样式) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>style scoped 的原理：</strong></p><p>Vue 会在组件的每个元素上添加一个自动生成的属性（如 <code>data-v-xxxx</code>），并将 <code>style scoped</code> 样式中的选择器转换为只匹配带有该属性的元素。例如，上面的 <code>.box</code> 样式会被编译为类似以下的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* data-v-xxxx 相当于一个身份标识, 每个组件生成的都不相同, 这样确保了组件中的样式只在该组件中有效 */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[data-v-xxxx]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Composition-API（组合式-API）"><a href="#Composition-API（组合式-API）" class="headerlink" title="Composition API（组合式 API）"></a>Composition API（组合式 API）</h3><p>Vue3 引入了<strong>组合式 API（Composition API）</strong>，以便更灵活地组织和复用组件逻辑</p><p>Vue2 中使用 <code>data</code>、<code>methods</code> 等选项来定义组件状态和方法。Vue3 的组合式 API 则不再强制划分这些选项，可以自由组合和组织逻辑，使代码结构更清晰、复用性更强</p><h3 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a><code>setup</code> 函数</h3><p>在组合式 API 中，<code>setup</code> 函数是组件的入口。它在组件实例创建前调用。<code>setup</code> 函数返回的内容会暴露给模板使用</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  setup 是一个钩子函数, 会被 Vue 调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  Vue 调用时会将 this 指定为 undefined, 因此无法使用 this 来访问组件实例</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义响应式数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    返回模板中使用的变量和方法, 如果不返回对象, 组件不会暴露任何内容给模板</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    Vue 在模板编译时，会优先从组件的 setupState 对象中访问，也就是这里返回的对象中访问，如果访问不到，则会从组件实例中访问</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; count, increment &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a><code>ref</code> 函数</h3><ul><li><code>ref</code> 函数用于创建响应式数据的工具</li><li>它会将数据包裹在一个名为 RefImpl 类型的代理( Proxy )对象中返回。在 <code>setup</code> 函数中要访问响应式数据必须通过对象中的 <code>value</code> 属性来访问，但在模版中无需通过 <code>value</code> 来访问，Vue 会<strong>自动解包</strong>( 在模板编译时, Vue 会自动将 <code>RefImpl</code> 类型对象转换为 <code>ref.value</code> )访问</li><li><code>value</code> 属性的操作会被 Vue 拦截(<code>get</code> &amp; <code>set</code>)，当修改 <code>value</code> 属性的值为基本数据类型时，Vue 会响应式的更新，如果将其值修改为复杂数据类型(如 数组、对象)时，Vue 会调用 <code>reactive</code> 函数来创建复杂数据类型的响应式数据</li></ul><p><strong><code>reactive</code> 函数：</strong></p><p><code>reactive</code> 函数用于创建复杂数据类型(如 数组、对象)的响应式数据，它会通过创建代理(<code>new Proxy</code>)的方式来实现响应式，这种方式可以实现数组或对象的深层响应式，但不能实现基本数据类型的响应式</p><h3 id="toRefs-函数"><a href="#toRefs-函数" class="headerlink" title="toRefs 函数"></a><code>toRefs</code> 函数</h3><p><code>toRefs</code> 是 Vue3 中提供的一个工具函数，用于将一个响应式对象中的每个属性转换为单独的 <code>ref</code> 对象( <code>RefImpl</code> )。它的主要用途是解决直接解构响应式对象丢失响应性的问题</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.gender &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// toRefs 函数会自动调用 ref 函数, 将对象中的属性全部转换成 RefImpl 类型对象, 并且保持其响应性。如果不用 toRefs 函数直接解构, 则会丢失响应性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123; name, age &#125; = <span class="title function_">toRefs</span>(person)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 解构出来的数据通过 value 属性来访问, 当修改 value 属性时, 源对象中对应的属性也会同时被修改(这里源对象就是 person)</span></span></span><br><span class="line"><span class="language-javascript">    name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    age.<span class="property">value</span> = <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; person &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script-setup（组合式-API-语法糖）"><a href="#script-setup（组合式-API-语法糖）" class="headerlink" title="script setup（组合式 API 语法糖）"></a>script setup（组合式 API 语法糖）</h3><p><code>script setup</code> 是 Vue3 提供的一个<strong>开发编译时</strong>的语法糖，用来代替传统的 <code>setup</code> 函数。它直接把 <code>setup</code> 的逻辑写在 <code>&lt;script setup&gt;</code> 标签内，无需显式定义 <code>setup</code> 函数</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- setup 启用组合式 API 语法糖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// script setup 语法不支持 export 导出</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>无需显示的将变量或函数通过 return 暴露给模板，Vue 会在开发编译时自动将顶层( 全局作用域 )的变量或函数暴露给模板( <code>setupState</code> )</li><li>导入的组件无需注册，Vue 会自动注册</li></ul><h3 id="props-组件间通信"><a href="#props-组件间通信" class="headerlink" title="props 组件间通信"></a>props 组件间通信</h3><p><code>props</code> 是 Vue 中的一种机制，用于在父组件中向子组件传递数据。父组件可以在模板中给子组件添加属性将数据传递给子组件，而子组件则通过 <code>props</code> 接收这些数据，从而实现父子组件之间的通信</p><p>例：</p><div class="tabs" id="props"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#props-1">选项式API</button></li><li class="tab"><button type="button" data-href="#props-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="props-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里 : 是 Vue 的指令, 用于动态绑定数据, 如果去除 : 则是直接传递一个静态的字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">parentMessage</span>: <span class="string">&#x27;Hello from Parent&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义 props, 被定义的 props 将会被 Vue 代理到组件实例上, 我们可以直接通过 this 访问</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="title class_">String</span>, <span class="comment">// 接收字符串类型的数据, 如果父组件传递数据类型不同, 则会提示警告</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="comment">// 接收数字类型的数据, 可以通过数组来指定多个类型, 如: [Object, Array, Number]</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 设置默认值, 对于数组和对象类型需要通过函数返回默认值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  数组写法定义 props, 无默认值和类型限定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    props: [&#x27;message&#x27;, &#x27;count&#x27;]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="props-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里 : 是 Vue 的指令, 用于动态绑定数据, 如果去除 : 则是直接传递一个静态的字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> parentMessage = <span class="title function_">ref</span>(<span class="string">&#x27;Hello from Parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">defineProps 是 Vue 的宏函数(开发编译时运行, 仅限顶层使用), 用来定义 props，它无需 import 可以直接在 script setup 中使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">返回定义的 props, 等同于组件实例上的 $props</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="title class_">String</span>, <span class="comment">// 接收字符串类型的数据, 如果父组件传递数据类型不同, 则会提示警告</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="comment">// 接收数字类型的数据, 可以通过数组来指定多个类型, 如: [Object, Array, Number]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 设置默认值, 对于数组和对象类型需要通过函数返回默认值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  数组写法定义 props, 无默认值和类型限定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    defineProps([&#x27;message&#x27;, &#x27;count&#x27;])</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><code>props</code> 可以通过 :指令(v-bind) 动态的传递数据，这意味着当父组件传递的 <code>props</code> 数据变化时，子组件会立即<strong>响应式</strong>的更新</p><p><code>props</code> 在子组件中是只读的，不能直接修改，否则会提示警告</p><p><strong>单向数据流：</strong></p><p><strong>单向数据流</strong>是指数据在组件之间的传递方向：<strong>从父组件流向子组件</strong>，但子组件不能直接修改从父组件传递过来的数据( props 只读 )。单向数据流确保了数据流向的单一性和可预测性，避免了数据状态的混乱导致状态管理变得复杂。如果需要更新 <code>props</code>( 修改 props ) 时，可以使用事件通知父组件</p><p>例：</p><div class="tabs" id="事件通知"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#事件通知-1">选项式API</button></li><li class="tab"><button type="button" data-href="#事件通知-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="事件通知-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span> @<span class="attr">increment</span>=<span class="string">&quot;increaseCount&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">parentCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increaseCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">parentCount</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;increment&#x27;)&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;count&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="事件通知-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span> @<span class="attr">increment</span>=<span class="string">&quot;increaseCount&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> parentCount = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">increaseCount</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    parentCount.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;increment&#x27;)&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>([<span class="string">&#x27;count&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="events-组件间通信"><a href="#events-组件间通信" class="headerlink" title="events 组件间通信"></a>events 组件间通信</h3><p>events 即组件事件，它是指组件之间通过自定义事件实现的通信方式。组件事件允许子组件向父组件发送消息，使父组件能够响应子组件中的操作。这种机制在 Vue 中主要是通过 <code>$emit</code>、<code>v-on</code>（缩写 <code>@</code>）来实现</p><p><strong>通过自定义事件实现子组件向父组件传递数据：</strong></p><p>在 Vue 中，子组件可以使用组件实例上的 <code>$emit</code> 方法触发一个自定义事件，并可将数据传递给父组件。父组件通过 <code>v-on</code>（或 <code>@</code>）监听该事件，并在事件发生时接收数据和执行回调函数</p><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">选项式API</button></li><li class="tab"><button type="button" data-href="#events-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击 button 时执行 handleChangeParent 方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChangeParent&quot;</span>&gt;</span>Change Parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleChangeParent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 触发 changeMsg 事件, 并传递数据给父组件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changeMsg&#x27;</span>, <span class="string">&#x27;Hello from child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当子组件触发 changeMsg 事件时, 父组件执行 handleChangeMsg 方法, 用来接收子组件传递的数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">changeMsg</span>=<span class="string">&quot;handleChangeMsg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Perent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data 参数由子组件通过 $emit 函数传递</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleChangeMsg</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">msg</span> = data</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击 button 时执行 handleChangeParent 函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChangeParent&quot;</span>&gt;</span>Change Parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// defineEmits 宏函数, 用来定义事件, 它返回 emits 函数, 用来触发定义的事件, 等同于 $emit</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;changeMsg&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleChangeParent</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 触发 changeMsg 事件, 并传递数据给父组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emits</span>(<span class="string">&#x27;changeMsg&#x27;</span>, <span class="string">&#x27;Hello from child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当子组件触发 changeMsg 事件时, 父组件执行 handleChangeMsg 方法, 用来接收子组件传递的数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">changeMsg</span>=<span class="string">&quot;changeMsg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;Hello Perent.vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// data 参数由子组件通过 emits 函数传递</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = data =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span> = data</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>Vue 推荐事件及 props 的名称都使用 “<code>kebab-case</code>” 的命名方式，比如 <code>child-click</code>、<code>submit-form</code>。这样格式更统一，可读性也更强</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue.js" scheme="https://www.timeic.top/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js (一) 安装使用与CommanJS模块化</title>
    <link href="https://www.timeic.top/posts/cca2ffbf.html"/>
    <id>https://www.timeic.top/posts/cca2ffbf.html</id>
    <published>2024-02-12T05:45:23.000Z</published>
    <updated>2025-03-30T03:14:55.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Node.js 是基于谷歌 V8( 一种JavaScript 引擎 )构建的一种 JavaScript 运行环境，由 Ryan Dahl 开发</p><p>Node.js 使 JavaScript 脱离了浏览器，可以实现服务器开发的一种 JavaScript 运行环境</p><h2 id="Node-js-的安装"><a href="#Node-js-的安装" class="headerlink" title="Node.js 的安装"></a>Node.js 的安装</h2><p>官方地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>安装完成后，输入 <code>node -v</code> 命令检测是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v <span class="comment">#显示node版本号</span></span></span><br><span class="line">v17.6.0</span><br></pre></td></tr></table></figure><p>通常 nodejs 安装时会自动安装 <code>npm</code>（node package manager）。输入 <code>npm -v</code> 检查 npm 是否安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v <span class="comment">#显示npm版本号</span></span></span><br><span class="line">8.5.1</span><br></pre></td></tr></table></figure><h2 id="Node-js-版本管理"><a href="#Node-js-版本管理" class="headerlink" title="Node.js 版本管理"></a>Node.js 版本管理</h2><p>推荐下面这款工具来管理 Node.js 的版本</p><ul><li><p>fnm: <a href="https://kkgithub.com/Schniz/fnm">https://github.com/Schniz/fnm</a>（推荐!!）</p><ul><li>特点: 基于 Rust、快速、简单、垮平台</li></ul></li></ul><p><strong>fnm 的使用：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已安装的所有版本及版本别名(包括系统内安装的版本)</span></span><br><span class="line">fnm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看官方发布的所有可用版本</span></span><br><span class="line">fnm ls-remote</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定版本</span></span><br><span class="line">fnm install 21.6.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新的 LTS 版本</span></span><br><span class="line">fnm install --lts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用国内源安装最新的 LTS 版本</span></span><br><span class="line">fnm install --lts --node-dist-mirror=https://npmmirror.com/mirrors/node</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定版本</span></span><br><span class="line">fnm use 21.6.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前正在使用的版本</span></span><br><span class="line">fnm current</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置已安装版本的别名</span></span><br><span class="line">fnm alias 20.8.1 dev # fnm use dev 切换至 20.8.1 版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认版本</span></span><br><span class="line">fnm default 18.21.1 # fnm use default 切换至 18.21.1 版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载指定版本, 可以使用别名</span></span><br><span class="line">fnm uninstall 18.21.1 # 不指定版本号则会卸载当前正在使用的版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定版本来执行某个全局命令</span></span><br><span class="line">fnm exec --using=18 node -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在应用目录写入文件，指定特定版本</span></span><br><span class="line">echo &#x27;16.20.2&#x27; &gt; .node-version # fnm use . 使用 .node-version 文件中指定版本</span><br><span class="line"></span><br><span class="line">fnm env</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 fnm 所有环境变量, 用于删除 fnm</span></span><br></pre></td></tr></table></figure><h2 id="模块（Module）"><a href="#模块（Module）" class="headerlink" title="模块（Module）"></a>模块（Module）</h2><p>Node.js 是基于 CommonJS 模块化规范实现的<strong>模块系统</strong></p><p>在 CommonJS 模块化规范中一个文件就是一个模块，每个模块都有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见</p><p>每个模块中必须有一个变量 <code>module</code>，它是一个对象，代表当前模块自身，通过 <code>module.exports</code> 或 <code>exports</code> 对象可以导出当前模块的方法或者变量</p><p>exports 和 module.exports 默认为相等关系：<code>exports === module.exports</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">thyName</span>)&#123;</span><br><span class="line">  name = thyName</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>module.require()</code> 方法 或 <code>require()</code> 函数来引入某个模块，函数会返回被引入模块中的 <code>module.exports</code> 对象</p><p>require 和 module.require 默认为相等关系：<code>require === module.require</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getModule.js</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./module&#x27;</span>);</span><br><span class="line">myModule.<span class="title function_">setName</span>(<span class="string">&#x27;Timeic&#x27;</span>);</span><br><span class="line">myModule.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><p>在模块中，变量this <strong>默认</strong>指向当前模块的导出对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> == <span class="variable language_">module</span>.<span class="property">exports</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> == <span class="built_in">exports</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在Node.js中，模块分为两类：</p><p>一类是Node.js自身提供的模块，称为核心模块；另一类是用户编写的模块，称为文件模块</p><p>核心模块部分在Node 源代码的编译过程中，被编译成了二进制执行文件。在Node 进程启动时，核心模块就被直接加载进内存中，所以核心模块的加载速度是最快的，如：http、fs、url等</p><p>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程。速度相比核心模块稍微慢一些</p><h2 id="包（Package）"><a href="#包（Package）" class="headerlink" title="包（Package）"></a>包（Package）</h2><p>包是实现模块系统的重要规范，Node.js 中包就是一个目录，一个包中包含了模块所需的所有文件，符合 CommonJS 模块化规范的包目录，应该包含以下文件：</p><ul><li><p>package.json：包的描述文件(必要文件‼️)，必须在包的根目录下</p></li><li><p>bin：可执行二进制文件放在该目录下</p></li><li><p>lib：JavaScript代码放在该目录下</p></li><li><p>doc：文档放在该目录下</p></li><li><p>test：单元测试放在该目录下</p></li></ul><h2 id="npm-命令行工具"><a href="#npm-命令行工具" class="headerlink" title="npm 命令行工具"></a>npm 命令行工具</h2><p>npm 是一个命令行工具，它是 JavaScript 的包管理工具，借助 npm 我们可以实现 JavaScript 模块的发布，安装和依赖等</p><p><strong>使用 npm 工具创建一个JavaScript项目：</strong></p><p>1.新建一个名为 test 的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>2.并在该目录下执行 <code>npm init</code> 命令，之后根据提示输入信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm init</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出：</span></span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">...</span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (test)  # 输入包名/项目名称</span><br><span class="line">version: (1.0.0)  # 输入项目版本号</span><br><span class="line">description:  # 输入项目描述</span><br><span class="line">entry point: (index.js)  # 输入模块的入口文件</span><br><span class="line">test command:  # 输入测试命令</span><br><span class="line">git repository:  # 输入git仓库地址</span><br><span class="line">keywords:  # 输入项目关键词</span><br><span class="line">author:  # 输入作者</span><br><span class="line">license: (ISC)  # 输入开源协议</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package.json的创建内容：</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;test&quot;,</span><br><span class="line">&quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">&quot;description&quot;: &quot;一个测试项目&quot;,</span><br><span class="line">&quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"> &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;author&quot;: &quot;Timeic&quot;,</span><br><span class="line">&quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Is this OK? (yes)  # 会车即可确认创建package.json</span><br></pre></td></tr></table></figure><h3 id="npm-常用命令"><a href="#npm-常用命令" class="headerlink" title="npm 常用命令"></a>npm 常用命令</h3><ul><li><p>初始化项目: <code>npm init</code></p><ul><li><code>-y</code>: 使用默认配置</li></ul></li><li><p>搜索包: <code>npm search &lt;包名&gt;</code></p></li><li><p>安装包: <code>npm install/i &lt;包名&gt;</code></p><ul><li><code>--save</code>：默认参数，将下载或本地的包文件解压到当前目录下的<code>node_modules</code>目录( 安装 )，并将其添加到项目依赖中</li></ul></li><li><p>卸载包: <code>npm uninstall &lt;包名&gt;</code></p><ul><li>别名：<code>npm remove/rm/r &lt;包名&gt;</code></li></ul></li><li><p>安装指定版本的npm: <code>npm install npm@x.x.x -g</code></p><ul><li><code>@latest</code>：最新版</li></ul></li><li><p>设置淘宝镜像源: <code>npm config set registry https://registry.npmmirror.com</code></p></li><li><p>设置官方镜像源: <code>npm config set registry https://registry.npmjs.org</code></p></li><li><p>查看当前镜像源: <code>npm config get registry</code></p></li></ul><h2 id="模块的实现"><a href="#模块的实现" class="headerlink" title="模块的实现"></a>模块的实现</h2><p>Node.js 运行时会将每个模块中代码包装到一个函数内执行，Node.js 会将模块所需要的接口作为该函数的参数传入，函数代码大致如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">    <span class="comment">// 模块中的代码</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exports 用于导出当前模块中的变量或方法的对象</span></span><br><span class="line"><span class="comment">require 用于引入某个模块的函数</span></span><br><span class="line"><span class="comment">module 表示当前模块的对象</span></span><br><span class="line"><span class="comment">__filename 表示当前文件的完整名称</span></span><br><span class="line"><span class="comment">__dirname 表示当前目录的完整名称</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>模块标识符：</strong></p><p>模块标识符是用来查找和定位模块的一个字符串</p><h3 id="文件模块的查找规则"><a href="#文件模块的查找规则" class="headerlink" title="文件模块的查找规则"></a>文件模块的查找规则</h3><p>在使用 require() 函数加载文件模块时，Node.js 会根据传入的参数，即模块标识符，对文件进行查找，查找规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>情况一</strong>：xxx是一个核心模块，则直接返回核心模块，并停止查找，比如：path、http等</p><p><strong>情况二</strong>：xxx以<code>./</code>(当前目录)、<code>../</code>(上一级目录)、<code>/</code>(根目录)开头的，会将xxx作 为文件在对应目录进行查找，查找规则如下：</p><ul><li><p>有后缀名，按照当前后缀名查找对应的文件</p></li><li><p>没有后缀名，会按照如下顺序查找：</p><ol><li><p>直接查找文件xxx</p></li><li><p>查找 xxx.js文件</p></li><li><p>查找 xxx.json文件</p></li><li><p>查找 xxx.node文件</p></li></ol></li><li><p>如果依然没找到，则会将xxx作为目录查找，查找规则如下：</p><ol><li><p>查找 xxx/index.js</p></li><li><p>查找 xxx/index.json</p></li><li><p>查找 xxx/index.node</p></li></ol></li><li><p>如果还没找到，则抛出异常：not found</p></li><li><p>如果找到，则会使用<code>JSON.parse()</code>方法解析该目录下的<code>package.json</code>文件的内容来得到描述对象，然后根据对象中main属性( 默认为index.js )指定的<strong>模块标识符</strong>来查找文件</p></li><li><p>如果没找到，则抛出异常：not found</p></li></ul><p><strong>情况三</strong>：如果 xxx是一个单词(不包含特殊符号，如：<code>./</code>、<code>/</code>、空格等)，并且xxx不是一个核心模块，则会将其作为一个包( 目录 )来查找，查找规则如下：</p><p>从当前模块的<code>module.paths</code>属性中的所有路径以及全局路径下<strong>依次</strong>查找名为 xxx的目录</p><p><code>require()</code> 函数加载文件模块时采用同步加载，为了提高效率，Node.js 运行时会缓存已经加载过的文件，当发现某个文件已加载过了，则直接从缓存中加载，不会重复加载同一个文件模块</p><p>查看已缓存的模块：<code>console.log(require.cache)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Node.js" scheme="https://www.timeic.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6教程（上）</title>
    <link href="https://www.timeic.top/posts/1f1de31d.html"/>
    <id>https://www.timeic.top/posts/1f1de31d.html</id>
    <published>2024-02-12T04:35:31.000Z</published>
    <updated>2025-03-30T03:14:55.592Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ES6 是 ECMAScript 的第 6 个版本。它与 2015 年 6 月正式发布，正式名称为 ECMAScript 2015，通常 ES6 泛指 ECMAScript 2015 及其后续的版本</p><blockquote><p>ECMAScript 是一种由 ECMA 国际（前身为欧洲计算机制造商协会，英文：European Computer ManufacturersAssociation）通过 <a href="https://tc39.es/ecma262/">ECMA-262</a> 标准化的脚本程序设计语言，它定义了该脚本语言的各种元素、结构、语法、运算符等等。而 JavaScript 则是该标准的具体实现</p></blockquote><h2 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h2><p><strong><code>let</code></strong> 允许你声明一个作用域被限制在<strong>块</strong>( <code>&#123;&#125;</code> )中的变量。与 <code>var</code> 关键字不同的是，<code>let</code> 声明的变量不会在作用域中被提升</p><p>let 声明与 var 声明的区别：</p><table><thead><tr><th>特点</th><th><code>var</code> 声明</th><th><code>let</code> 声明</th></tr></thead><tbody><tr><td>变量提升</td><td>Yes</td><td>No</td></tr><tr><td>作用域</td><td>函数级作用域</td><td>块级作用域</td></tr><tr><td>重复声明</td><td>Yes</td><td>No</td></tr><tr><td>全局对象</td><td>Yes</td><td>No</td></tr></tbody></table><p><strong>变量提升：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 无变量提升 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//报错：ReferenceError: age is not defined</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">38</span>;</span><br></pre></td></tr></table></figure><p><strong>作用域：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 块级作用域 */</span></span><br><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">666</span>; <span class="comment">// 我是局部变量a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 666</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 报错：ReferenceError: b is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>()</span><br></pre></td></tr></table></figure><p><strong>重复声明：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 同一个变量不可重复声明(同一作用域内) */</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">//报错：SyntaxError: Identifier &#x27;num&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><p><strong>全局对象：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不会在全局对象中创建属性或方法 */</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>, a) <span class="comment">//输出：undefined 666</span></span><br></pre></td></tr></table></figure><h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p><code>const</code> 关键字用于声明一个常量，其特点和 <code>let</code> 声明一样（存在块作用域），但常量的值是无法（通过重新赋值）改变的</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fav = <span class="number">7</span>;</span><br><span class="line">fav = <span class="number">20</span>; <span class="comment">//报错：TypeError: Assignment to constant variable</span></span><br><span class="line"><span class="comment">//如果重新声明也会报错</span></span><br><span class="line"><span class="keyword">const</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//SyntaxError: Identifier &#x27;fav&#x27; has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>; <span class="comment">//可以读写对象或数组中的属性</span></span><br><span class="line">obj = &#123;&#125;; <span class="comment">//改变obj的值(原始值 or 引用值)还是会报错</span></span><br></pre></td></tr></table></figure><h2 id="模版字符串（Template-strings）"><a href="#模版字符串（Template-strings）" class="headerlink" title="模版字符串（Template strings）"></a>模版字符串（<em>Template strings</em>）</h2><p>模板字符串 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mutLineStr = <span class="string">`string line1</span></span><br><span class="line"><span class="string">string line2`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mutLineStr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">string line1</span></span><br><span class="line"><span class="comment">string line2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> author = <span class="string">&quot;李白&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> mustache = <span class="string">`</span></span><br><span class="line"><span class="string">静夜思</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;author&#125;</span></span></span><br><span class="line"><span class="string">xxx</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mustache)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静夜思</span></span><br><span class="line"><span class="comment">    李白</span></span><br><span class="line"><span class="comment">xxx</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="对象字面量增强"><a href="#对象字面量增强" class="headerlink" title="对象字面量增强"></a>对象字面量增强</h2><p>相对于 ES5，ES6 的对象字面量得到了很大程度的增强。这些改进使 JavaScript 代码更加简洁同时更易于理解</p><h3 id="对象属性简写"><a href="#对象属性简写" class="headerlink" title="对象属性简写"></a>对象属性简写</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  <span class="attr">type</span>: type,</span><br><span class="line">  <span class="attr">heat</span>: heat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music);  <span class="comment">// Object &#123;type: &quot;rock&quot;, heat: &quot;50%&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6改写 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  type,</span><br><span class="line">  heat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music);  <span class="comment">// Object &#123;type: &quot;rock&quot;, heat: &quot;50%&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象方法简写"><a href="#对象方法简写" class="headerlink" title="对象方法简写"></a>对象方法简写</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  <span class="attr">type</span>: type,</span><br><span class="line">  <span class="attr">heat</span>: heat,</span><br><span class="line">  <span class="attr">description</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;当前音乐风格为&#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27;,&#x27;</span> + <span class="variable language_">this</span>.<span class="property">heat</span> + <span class="string">&#x27;都喜欢&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music.<span class="title function_">description</span>()); <span class="comment">// 当前音乐风格为rock,50%都喜欢</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6改写 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  type,</span><br><span class="line">  heat,</span><br><span class="line">  <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`当前音乐风格为<span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.heat&#125;</span>都喜欢`</span>; <span class="comment">//使用模板字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music.<span class="title function_">description</span>()); <span class="comment">// 当前音乐风格为rock,50%都喜欢</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：使用 ES6 简写的方法不能作为构造函数来调用( <code>new</code> )，否则将会报错</p></blockquote><h3 id="展开语法（Spread-syntax）"><a href="#展开语法（Spread-syntax）" class="headerlink" title="展开语法（Spread syntax）"></a>展开语法（<em>Spread syntax</em>）</h3><p>展开语法 可以在创建<strong>字面量</strong>对象/数组时，将对象/数组在语法层面展开</p><p><strong>1.对象展开：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> chinese = &#123;</span><br><span class="line">    <span class="attr">skin</span>: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    <span class="attr">hair</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you ok?&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">CXK</span> = &#123;</span><br><span class="line">    <span class="attr">slill</span>: <span class="string">&quot;jump sing rap and play basketball&quot;</span>,</span><br><span class="line">    <span class="attr">song</span>: <span class="string">&quot;啊哈哈哈&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> linge = &#123;</span><br><span class="line">    ...chinese,</span><br><span class="line">    ...<span class="variable constant_">CXK</span>,</span><br><span class="line">    <span class="comment">// 展开语法 等同于下面写法</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    skin: &quot;yellow&quot;,</span></span><br><span class="line"><span class="comment">    hair: &quot;black&quot;,</span></span><br><span class="line"><span class="comment">    sayHi() &#123;</span></span><br><span class="line"><span class="comment">      console.log(&quot;Are you eat?&quot;);</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    slill: &quot;jump sing rap and play basketball&quot;,</span></span><br><span class="line"><span class="comment">    song: &quot;啊哈哈哈&quot;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(linge);</span><br></pre></td></tr></table></figure><p><strong>2.数组展开：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2, <span class="number">70</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// [10, 20, 30, 40, 50, 60, 70]</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">23</span>, <span class="number">54</span>, <span class="number">446</span>, <span class="number">56</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 446</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值（Destructuring）"><a href="#解构赋值（Destructuring）" class="headerlink" title="解构赋值（Destructuring）"></a>解构赋值（<em>Destructuring</em>）</h3><p><strong>解构赋值</strong> 可以将属性/值从对象/数组中取出，并赋值给其它变量</p><p><strong>1.数组的解构赋值：</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//a, b, c是从右边数组中按照 位置(,逗号分隔) 提取并赋值的3个变量(位置匹配)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">//输出：1 2 3</span></span><br><span class="line"><span class="keyword">let</span> [ , y, z] = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z) <span class="comment">// undefined (z在右边数组中没有元素对应，则会将 undefined 赋值给变量z)</span></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]; <span class="comment">//等号(=)两边的结构要保持一致，才能取到嵌套的数组中的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, d) <span class="comment">// 1 2 4</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x]; <span class="comment">//交换变量的值</span></span><br><span class="line"><span class="comment">/* 例3 */</span></span><br><span class="line"><span class="keyword">let</span> [a=<span class="number">5</span>, b=<span class="number">7</span>] = [<span class="number">1</span>]; <span class="comment">//a=5, b=7为变量a, b的默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 7 (b在右边数组中没有元素对应，所以使用默认值 7 赋值给变量b，而不是undefined)</span></span><br><span class="line"><span class="comment">/* 例4 */</span></span><br><span class="line"><span class="keyword">let</span> [v, m, n] = <span class="string">&quot;大前端&quot;</span>;</span><br><span class="line"><span class="comment">//如果等号右边的是一个字符串，则字符串会作为一个 类数组对象(String类型对象) 进行解构赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v, m, n); <span class="comment">// 大 前 端</span></span><br></pre></td></tr></table></figure><p><strong>2.对象的解构赋值：</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> &#123;x, y, z = <span class="number">100</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">//x, y, z是从右边对象中按照 名称 提取并赋值的3个变量(名称匹配)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z) <span class="comment">// 100 (z在右边对象中没有属性对应，则会使用默认值 100 赋值给变量z)</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="comment">//在上一个例子中变量必须与属性同名，才能取到正确的值，如果要单独指定变量名，可以使用下面的语法</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">a</span>: num1 = <span class="number">10</span>, <span class="attr">b</span>: num2 = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;; <span class="comment">//指定变量名并提供默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">/* 例3 */</span></span><br><span class="line"><span class="comment">//对于嵌套结构的对象，可以使用下面的语法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">p</span>: [</span><br><span class="line">    <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// &quot;World&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p) <span class="comment">// [&quot;Hello&quot;, &#123;y: &quot;World&quot;&#125;]</span></span><br><span class="line"><span class="comment">/* 例4 */</span></span><br><span class="line"><span class="comment">//如果等号右边的是一个数值或布尔值，则会将其先转成对象，再进行解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>; <span class="comment">//Number类型对象</span></span><br><span class="line">s === <span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>; <span class="comment">//Boolean类型对象</span></span><br><span class="line">s === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>4.函数参数的解构赋值：</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">&#123; name, age, gender, height = <span class="number">180</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, gender, height);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;波波&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">test2</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;波波&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">160</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>PS：解构赋值语法实际上是一种 模式匹配 + 变量赋值 的混合，只要等号两边的模式相同，左边的变量就会被赋予对应的值</p><p>如：<code>p: [x, &#123; y &#125;]</code> 模式中 p 是模式匹配，但不是变量赋值，而 x 和 y 是模式匹配 + 变量赋值</p><h2 id="箭头函数（Arrow-function）"><a href="#箭头函数（Arrow-function）" class="headerlink" title="箭头函数（Arrow function）"></a>箭头函数（<em>Arrow function</em>）</h2><p>箭头函数 是对函数表达式( 匿名函数 )的一种简写形式</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 函数名 = <span class="function">(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span> ... 形参N</span>) =&gt;</span> &#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">简写规则：</span></span><br><span class="line"><span class="comment">  1. function 关键字改成 =&gt;</span></span><br><span class="line"><span class="comment">  2. 如果只有一个形参，那就可以省略形参小括号 ()</span></span><br><span class="line"><span class="comment">  3. 如果不只一个形参( 0 个或多个 )，那就不能省略形参小括号</span></span><br><span class="line"><span class="comment">  4. 如果函数体只有一句话，那就可以省略函数体的大括号 &#123;&#125;</span></span><br><span class="line"><span class="comment">  5. 如果函数体只有一句话，并且这一句话是 return 语句，那 return 关键字也可以省略</span></span><br><span class="line"><span class="comment">  6. 如果函数体不是一句话，那就不能省略这个大括号</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> name + <span class="string">&quot;你好吗?&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = name =&gt; name + <span class="string">&quot;你好吗?&quot;</span>;</span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">let</span> fn5 = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> age + <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn5</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> age + <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>函数形参可以指定一个初始值，当该形参没有传递实参时则该参数的值就是初始值( 默认值 )</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b = <span class="number">10</span></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">10</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数（Rest-Parameters）"><a href="#剩余参数（Rest-Parameters）" class="headerlink" title="剩余参数（Rest Parameters）"></a>剩余参数（<em>Rest Parameters</em>）</h3><p>如果函数的最后一个形参以<code>...</code>为前缀，则它将成为一个由剩余参数组成的数组</p><p>在箭头函数中不能通过 <code>arguments</code> 来获取实参</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params">...theArgs</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(theArgs.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">multiplier, ...theArgs</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> theArgs.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> multiplier * element;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h3 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h3><p>箭头函数中的 <code>this</code> 变量由上下文环境决定，而不是由 <code>new</code> 关键字来决定，因此箭头函数不能做为构造函数( new )来调用</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Fn</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="string">&#x27;超哥&#x27;</span>, <span class="number">20</span>) <span class="comment">// TypeError: Fn is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">persons</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;波波&#x27;</span>,</span><br><span class="line">        <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是1：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">            <span class="comment">// 上文环境</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是2：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是3：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">                &#125;, <span class="number">1000</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">            <span class="comment">// 下文环境</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><h2 id="class-关键字"><a href="#class-关键字" class="headerlink" title="class 关键字"></a>class 关键字</h2><p>ES6 提供了 class 关键字，用来定义一个类</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用class声明语句来定义一个类 */</span></span><br><span class="line"><span class="keyword">class</span> 名称 [<span class="keyword">extends</span>] &#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用class表达式来定义一个类 */</span></span><br><span class="line"><span class="keyword">const</span> 名称 = <span class="keyword">class</span> [名称] [<span class="keyword">extends</span>] &#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle2</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>); <span class="comment">// Rectangle2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class 表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Rectangle</span> = <span class="keyword">class</span> &#123; <span class="comment">// 匿名类必须赋值到变量，变量名将成为匿名类的名称</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>); <span class="comment">// Rectangle</span></span><br></pre></td></tr></table></figure><h3 id="类-class"><a href="#类-class" class="headerlink" title="类( class )"></a>类( class )</h3><p>JavaScript 语言中，创建实例对象的传统方法是通过构造函数，如果要实现继承则需要借助原型</p><p>而 ES6 中的 class 依然是建立在原型上的，因此 ES6 中的 class 可以看作是一个语法糖，它使 JavaScript 在语法上更像面向对象</p><p>Js 中使用 class 声明的类，实质上是一种特殊的函数，它只能使用 <code>new</code> 关键字来调用，并且 class 声明不会有提升</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Point</span>); <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span> === <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面的案例可以看出Point类指向该类的构造函数</span></span><br><span class="line"><span class="comment">并且typeof检查Point类时也返回 function</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>PS：class 中的代码都执行在严格模式( strict mode )下。比如，构造函数，静态方法，原型方法，getter 和 setter 都在严格模式下执行</p><h3 id="构造方法-constructor"><a href="#构造方法-constructor" class="headerlink" title="构造方法( constructor )"></a>构造方法( constructor )</h3><p>constructor 是类中的一个特殊的方法，该方法用于创建和初始化一个由<code>class</code>创建的对象</p><p>一个类中只能有一个名为 “constructor” 的特殊方法。类中出现多个构造函数( constructor )方法将会抛出一个 SyntaxError 错误</p><p>如果没有指定构造函数( constructor )方法，则会使用一个默认的构造函数( constructor )来初始化实例</p><h3 id="实例属性-原型方法"><a href="#实例属性-原型方法" class="headerlink" title="实例属性 / 原型方法"></a>实例属性 / 原型方法</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  bar = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 实例属性bar</span></span><br><span class="line">  baz = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 实例属性baz</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123; <span class="comment">// 原型方法，该方法会添加在原型prototype中</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.bar&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.baz&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>).<span class="title function_">print</span>(); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>在 ES5 中要给实例对象添加属性需要在构造函数或方法内使用 this 来添加，如果要添加方法则会将方法添加构造函数的原型prototype上。而上面的写法相比 ES5 的写法更加简洁，一眼就能看出，<code>Foo</code>类有两个实例属性和一个原型方法</p><h3 id="getter-amp-setter-存取值方法"><a href="#getter-amp-setter-存取值方法" class="headerlink" title="getter &amp; setter ( 存取值方法 )"></a>getter &amp; setter ( 存取值方法 )</h3><p>在“类”的内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line">inst.<span class="property">prop</span> = <span class="number">123</span>; <span class="comment">// setter: 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inst.<span class="property">prop</span>) <span class="comment">// &#x27;getter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">  v = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">getV</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">v</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">setV</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">getV</span>); <span class="comment">// 100</span></span><br><span class="line">obj.<span class="property">setV</span> = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">getV</span>); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><h3 id="静态属性-静态方法"><a href="#静态属性-静态方法" class="headerlink" title="静态属性 / 静态方法"></a>静态属性 / 静态方法</h3><p>如果在一个属性或方法前，加上<code>static</code>关键字，则该属性或方法将不会被添加到实例上，它是直接通过类来访问或调用</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">prop</span> = <span class="number">1</span> <span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">classMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property">prop</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> prop = <span class="number">1</span>; <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123; <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">prop</span>) <span class="comment">// 静态方法中的 this 指向该类</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">foo.<span class="title function_">classMethod</span>() <span class="comment">// 报错：实例上找不到该方法</span></span><br></pre></td></tr></table></figure><h2 id="extends-关键字"><a href="#extends-关键字" class="headerlink" title="extends 关键字"></a>extends 关键字</h2><p>extends 关键字 用于创建一个类作为另一个类的一个子类</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;&#125; <span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123; <span class="comment">// 子类继承父类</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">// 调用父类的构造函数constructor，用来初始化子类</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>class 可以通过<code>extends</code>关键字实现继承，让子类继承父类的属性和方法</p><p>当子类继承某个父类时，子类必须先在<code>constructor</code>方法中使用<code>super()</code>来调用父类构造函数，否则就会报错</p><p>这是因为<code>extends</code>关键字在继承时，子类的实例需要通过父类得到。在调用<code>super()</code>方法时，会先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，因此如果不调用<code>super()</code>方法，子类就得不到自己的<code>this</code>对象</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> s = <span class="string">&#x27;static&#x27;</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="variable language_">super</span>(x, y);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color; <span class="comment">// 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ColorPoint</span>.<span class="property">s</span>, <span class="title class_">ColorPoint</span>.<span class="property">__proto__</span> === <span class="title class_">Point</span>) <span class="comment">// static true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DOS命令</title>
    <link href="https://www.timeic.top/posts/ba611fe6.html"/>
    <id>https://www.timeic.top/posts/ba611fe6.html</id>
    <published>2021-10-02T07:48:09.000Z</published>
    <updated>2025-03-30T03:14:55.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>DOS是<strong>Disk Operating System</strong>(磁盘操作系统)的缩写，常见的DOS有两种：IBM公司的<a href="https://baike.baidu.com/item/PC-DOS">PC-DOS</a>和微软公司的<a href="https://baike.baidu.com/item/MS-DOS">MS-DOS</a></p><p><strong>MS-DOS</strong> 它是由美国微软公司发展的操作系统，运行在<strong>Intel x86</strong>个人电脑上。自微软图形界面操作系统<a href="https://baike.baidu.com/item/Windows%20NT">Windows NT</a>问世以来，DOS就作为一个后台程序的形式出现，我们可以通过键盘快捷键<kbd>Win</kbd> + <kbd>R</kbd> 打开运行窗口-在里面输入 <code>cmd</code> 回车即可进入DOS界面。</p><p><img src="https://cdn.jsdelivr.net/gh/k34869/images/image/20220728132900" alt="cmd"></p><blockquote><p><em>DOS命令，计算机术语，是指DOS操作系统(单任务的操作系统)的命令，是一种面向磁盘的操作命令，主要包括目录操作类命令、磁盘操作类命令、文件操作类命令和其它命令。</em></p></blockquote><h2 id="内部命令与外部命令"><a href="#内部命令与外部命令" class="headerlink" title="内部命令与外部命令"></a>内部命令与外部命令</h2><p>内部命令，是指在DOS启动之后，自动通过<code>command.com</code>文件导入内存的命令。在执行这些命令的时候，直接从内存进行调用。<code>command.com</code>文件是DOS的核心程序，也就是说内部命令是由DOS自身提供。而外部命令是一条单独的<strong>可执行文件</strong>。</p><p>外部命令需要保证程序的可执行文件(.exe或.com)在当前的目录中，或在环境变量<code>PATH</code>中。</p><p>DOS的外部命令就是一些应用程序，这些外部命令都是以文件的形式存在。</p><p>内部命令相比于外部命令其特点就是执行速度快且无需额外安装在任何时候都可以使用。</p><h2 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">calc</td><td align="center">启动计算器</td><td align="center">diskmgmt.msc</td><td align="center">磁盘管理实用程序</td></tr><tr><td align="center">certmgr.msc</td><td align="center">证书管理实用程序</td><td align="center">dvdplay</td><td align="center">DVD播放器</td></tr><tr><td align="center">charmap</td><td align="center">启动字符映射表</td><td align="center">dxdiag</td><td align="center">检查DirectX信息</td></tr><tr><td align="center">chkdsk.exe</td><td align="center">Chkdsk磁盘检查</td><td align="center">eudcedit</td><td align="center">造字程序</td></tr><tr><td align="center">cmd.exe</td><td align="center">CMD命令提示符</td><td align="center">eventvwr</td><td align="center">事件查看器</td></tr><tr><td align="center">compmgmt.msc</td><td align="center">打开计算机管理</td><td align="center">explorer</td><td align="center">打开资源管理器</td></tr><tr><td align="center">cliconfg</td><td align="center">SQL SERVER 客户端网络实用程序</td><td align="center">fsmgmt.msc</td><td align="center">共享文件夹管理器</td></tr><tr><td align="center">dcomcnfg</td><td align="center">打开系统组件服务</td><td align="center">gpedit.msc</td><td align="center">组策略</td></tr><tr><td align="center">devmgmt.msc</td><td align="center">设备管理器</td><td align="center">netplwiz</td><td align="center">用户账户</td></tr><tr><td align="center">logoff</td><td align="center">注销命令</td><td align="center">ntmsmgr.msc</td><td align="center">移动存储管理器</td></tr><tr><td align="center">lusrmgr.msc</td><td align="center">本机用户和组</td><td align="center">ntmsoprq.msc</td><td align="center">移动存储管理员操作请求</td></tr><tr><td align="center">magnify</td><td align="center">放大镜实用程序</td><td align="center">odbcad32</td><td align="center">ODBC数据源管理器</td></tr><tr><td align="center">mmc</td><td align="center">打开控制台</td><td align="center">osk</td><td align="center">打开屏幕键盘</td></tr><tr><td align="center">mobsync</td><td align="center">同步命令</td><td align="center">perfmon.msc</td><td align="center">计算机性能监测程序</td></tr><tr><td align="center">Msconfig.exe</td><td align="center">系统配置实用程序</td><td align="center">regedit.exe</td><td align="center">注册表</td></tr><tr><td align="center">mspaint</td><td align="center">画图板</td><td align="center">regedt32</td><td align="center">注册表编辑器</td></tr><tr><td align="center">mstsc</td><td align="center">远程桌面连接</td><td align="center">rononce -p</td><td align="center">15秒关机</td></tr><tr><td align="center">narrator</td><td align="center">屏幕“讲述人”</td><td align="center">regsvr32 /u zipfldr.dll</td><td align="center">取消ZIP支持</td></tr><tr><td align="center">netstat -an</td><td align="center">(TC)命令检查接口</td><td align="center">regsvr32 /u *.dll</td><td align="center">停止dll文件运行</td></tr><tr><td align="center">notepad</td><td align="center">打开记事本</td><td align="center">rsop.msc</td><td align="center">组策略结果集</td></tr><tr><td align="center">Nslookup</td><td align="center">IP地址侦测器</td><td align="center">secpol.msc</td><td align="center">本地安全策略</td></tr><tr><td align="center">ntbackup</td><td align="center">系统备份和还原</td><td align="center">services.msc</td><td align="center">本地服务设置</td></tr><tr><td align="center">sfc /scannow</td><td align="center">windows文件保护</td><td align="center">taskmgr</td><td align="center">任务管理器</td></tr><tr><td align="center">sysdm.cpl</td><td align="center">系统属性</td><td align="center">msinfo32</td><td align="center">系统信息</td></tr><tr><td align="center">sfc.exe</td><td align="center">系统文件检查器</td><td align="center">tsshutdn</td><td align="center">60秒倒计时关机命令</td></tr><tr><td align="center">shrpubw</td><td align="center">创建共享文件夹</td><td align="center">utilman</td><td align="center">辅助工具管理器</td></tr><tr><td align="center">sigverif</td><td align="center">文件签名验证程序</td><td align="center">wiaacmgr</td><td align="center">扫描仪和照相机向导</td></tr>    <tr><td align="center">winver</td><td align="center">检查Windows版本</td><td align="center">wmimgmt.msc</td><td align="center">打开windows管理体系结构(WMI)</td></tr><tr><td align="center">write</td><td align="center">写字板</td><td align="center">wscript</td><td align="center">windows脚本宿主设置</td></tr></tbody></table><h2 id="内部命令"><a href="#内部命令" class="headerlink" title="内部命令"></a>内部命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">assoc</td><td align="center">显示或修改文件扩展名关联。</td><td align="center">attrib</td><td align="center">显示或更改文件属性。</td></tr><tr><td align="center">break</td><td align="center">设置或清除扩展式CTRL+C检查。</td><td align="center">bootcfg</td><td align="center">设置boot.ini文件的属性以便控制启动加载。</td></tr><tr><td align="center">cacls</td><td align="center">显示或修改文件的访问控制列表(ACL)。</td><td align="center">call</td><td align="center">从另一个批处理程序调用这一个。</td></tr><tr><td align="center">cd</td><td align="center">显示当前目录的名称或将其更改。</td><td align="center">chcp</td><td align="center">显示或设置活动代码页数。</td></tr><tr><td align="center">chdir</td><td align="center">显示当前目录的名称或将其更改。</td><td align="center">color</td><td align="center">设置默认控制台前景和背景颜色。</td></tr><tr><td align="center">chkdsk</td><td align="center">检查磁盘并显示状态报告。</td><td align="center">comp</td><td align="center">比较两个或两套文件的内容。</td></tr><tr><td align="center">chkntfs</td><td align="center">显示或修改启动时间磁盘检查。</td><td align="center">compact</td><td align="center">显示或更改NTFS分区上文件的压缩。</td></tr><tr><td align="center">cls</td><td align="center">清除屏幕。</td><td align="center">convert</td><td align="center">将FAT卷转换成NTFS。您不能转换当前驱动器。</td></tr><tr><td align="center">cmd</td><td align="center">打开另一个Windows命令解释程序窗口。</td><td align="center">copy</td><td align="center">将至少一个文件复制到另一个位置。</td></tr><tr><td align="center">date</td><td align="center">显示或设置日期。</td><td align="center">MOVE</td><td align="center">将一个或多个文件从一个目录移动到另一个目录。</td></tr><tr><td align="center">del</td><td align="center">删除至少一个文件。</td><td align="center">OPENFILES</td><td align="center">显示远程用户为了文件共享而打开的文件。</td></tr><tr><td align="center">dir</td><td align="center">显示一个目录中的文件和子目录。</td><td align="center">PAGEFILECONFIG</td><td align="center">显示或配置页面文件的属性。</td></tr><tr><td align="center">DISKCOMP</td><td align="center">比较两个软盘的内容。</td><td align="center">path</td><td align="center">为可执行文件显示或设置搜索路径。</td></tr><tr><td align="center">DISKCOPY</td><td align="center">将一个软盘的内容复制到另一个软盘。</td><td align="center">pause</td><td align="center">停止批处理文件的处理并显示信息。</td></tr><tr><td align="center">DISKPART</td><td align="center">显示或配置磁盘分区属性。</td><td align="center">POPD</td><td align="center">还原由PUSHD保存的当前目录上一次的值。</td></tr><tr><td align="center">DOSKEY</td><td align="center">编辑命令行、调用Windows命令并创建宏。</td><td align="center">PRINT</td><td align="center">打印一个文本文件。</td></tr><tr><td align="center">DRIVERQUERY</td><td align="center">显示当前设备驱动程序状态和属性。</td><td align="center">PROMPT</td><td align="center">改变Windows命令提示。</td></tr><tr><td align="center">echo</td><td align="center">显示消息，或将命令回显打开或关上。</td><td align="center">PUSHD</td><td align="center">保存当前目录，然后对其进行更改。</td></tr><tr><td align="center">ENDLOCAL</td><td align="center">结束批文件中环境更改的本地化。</td><td align="center">rd</td><td align="center">删除目录。</td></tr><tr><td align="center">ERASE</td><td align="center">删除一个或多个文件。</td><td align="center">RECOVER</td><td align="center">从损坏的磁盘中恢复可读取的信息。</td></tr><tr><td align="center">EVENTQUERY</td><td align="center">显示指定准则的事件日志项目。</td><td align="center">rem</td><td align="center">记录批处理文件或CONFIG.SYS中的注释。</td></tr><tr><td align="center">exit</td><td align="center">退出CMD.EXE程序(命令解释程序)。</td><td align="center">ren</td><td align="center">重新命名文件。</td></tr><tr><td align="center">fc</td><td align="center">比较两个文件或两个文件集并显示它们之间的不同。</td><td align="center">rename</td><td align="center">重新命名文件。</td></tr><tr><td align="center">find</td><td align="center">在一个或多个文件中搜索一个文字字符串。</td><td align="center">REPLACE</td><td align="center">替换文件。</td></tr><tr><td align="center">FINDSTR</td><td align="center">在多个文件中搜索字符串。</td><td align="center">rmdir</td><td align="center">删除目录。</td></tr><tr><td align="center">for</td><td align="center">为一套文件中的每个文件运行一个指定的命令。</td><td align="center">set</td><td align="center">显示、设置或删除Windows环境变量。</td></tr><tr><td align="center">FORMAT</td><td align="center">格式化磁盘，以便跟Windows使用。</td><td align="center">SETLOCAL</td><td align="center">开始用批文件改变环境的本地化。</td></tr><tr><td align="center">FSUTIL</td><td align="center">显示或配置文件系统的属性。</td><td align="center">sc</td><td align="center">显示或配置服务(后台处理)。</td></tr><tr><td align="center">ftype</td><td align="center">显示或修改用在文件扩展名关联的文件类型。</td><td align="center">SCHTASKS</td><td align="center">安排命令和程序在一部计算机上按计划运行。</td></tr><tr><td align="center">goto</td><td align="center">将Windows命令解释程序指向批处理程序</td><td align="center">SHIFT</td><td align="center">调整批处理文件中可替换参数的位置。</td></tr><tr><td align="center">GPRESULT</td><td align="center">显示机器或用户的组策略信息。</td><td align="center">SHUTDOWN</td><td align="center">让机器在本地或远程正确关闭。</td></tr><tr><td align="center">GRAFTABL</td><td align="center">启用Windows在图形模式显示扩展字符集。</td><td align="center">sort</td><td align="center">将输入排序。</td></tr><tr><td align="center">help</td><td align="center">提供Windows命令的帮助信息。</td><td align="center">start</td><td align="center">打开单独视窗运行指定程序或命令。</td></tr><tr><td align="center">if</td><td align="center">在批处理程序中执行有条件的处理过程。</td><td align="center">subst</td><td align="center">将驱动器号与路径关联。</td></tr><tr><td align="center">label</td><td align="center">创建、更改或删除磁盘的卷标。</td><td align="center">SYSTEMINFO</td><td align="center">显示机器的具体的属性和配置。</td></tr><tr><td align="center">md</td><td align="center">创建一个目录。</td><td align="center">tasklist</td><td align="center">显示包括服务的所有当前运行的任务。</td></tr><tr><td align="center">mkdir</td><td align="center">创建一个目录。</td><td align="center">taskkill</td><td align="center">终止正在运行的进程或应用程序。</td></tr><tr><td align="center">mode</td><td align="center">配置系统设备。</td><td align="center">time</td><td align="center">显示或设置系统时间。</td></tr><tr><td align="center">more</td><td align="center">逐屏显示输出。</td><td align="center">title</td><td align="center">设置CMD.EXE会话的窗口标题。</td></tr><tr><td align="center">wmic</td><td align="center">在交互命令外壳里显示WMI信息。</td><td align="center">verify</td><td align="center">告诉Windows验证文件是否正确写入磁盘。</td></tr><tr><td align="center">xcopy</td><td align="center">复制文件和目录树。</td><td align="center">ver</td><td align="center">显示Windows的版本。</td></tr><tr><td align="center">vol</td><td align="center">显示磁盘卷标和序列号。</td><td align="center">type</td><td align="center">显示文本文件的内容。</td></tr><tr><td align="center">tree</td><td align="center">以图形显示启动器或路径的目录结构。</td><td align="center">ping</td><td align="center">网络命令</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.timeic.top/categories/Windows/"/>
    
    
    <category term="命令行" scheme="https://www.timeic.top/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
</feed>
