<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Timeicの博客</title>
  
  
  <link href="https://www.timeic.top/atom.xml" rel="self"/>
  
  <link href="https://www.timeic.top/"/>
  <updated>2025-09-07T23:17:01.006Z</updated>
  <id>https://www.timeic.top/</id>
  
  <author>
    <name>Timeic</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue.js (三) 进阶API</title>
    <link href="https://www.timeic.top/posts/d32b8cc8.html"/>
    <id>https://www.timeic.top/posts/d32b8cc8.html</id>
    <published>2024-11-11T16:00:00.000Z</published>
    <updated>2025-09-07T23:17:01.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Attributes-透传"><a href="#Attributes-透传" class="headerlink" title="Attributes 透传"></a>Attributes 透传</h2><p><strong>透传 Attributes</strong> 指的是组件中未被显式声明(定义)为 <code>props</code> 的属性（如 <code>id</code>、<code>class</code>、<code>style</code>、自定义属性等）会自动传递到组件的根元素或通过手动设置传递到指定的 DOM 元素的一种行为</p><p>这功能依赖于 Vue 的 <strong><code>$attrs</code></strong> 对象，它存储了所有未被组件声明为 <code>props</code> 的属性</p><h3 id="默认透传"><a href="#默认透传" class="headerlink" title="默认透传"></a>默认透传</h3><p>如果父组件向子组件传递了某些属性，而子组件没有在 <code>props</code> 中声明这些属性，那么这些属性会自动添加到子组件的根元素上</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="手动透传"><a href="#手动透传" class="headerlink" title="手动透传"></a>手动透传</h3><p>如果组件有多个根节点，或者需要将透传的属性应用到某个特定的元素上，可以使用 <code>$attrs</code></p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 将属性绑定到指定元素 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useAttrs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>(); <span class="comment">// 获取 $attrs 对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(attrs); <span class="comment">// &#123; id: &quot;main&quot;, class: &quot;highlight&quot;, custom-attr: &quot;test&quot; &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> <span class="attr">custom-attr</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    Child Content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止默认透传"><a href="#阻止默认透传" class="headerlink" title="阻止默认透传"></a>阻止默认透传</h3><p>如果不希望未声明的属性透传到组件的根元素，可以通过 <code>inheritAttrs: false</code> 禁止默认透传</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">inheritAttrs</span>: <span class="literal">false</span>, <span class="comment">// 禁止默认透传, Vue 不会自动将 $attrs 应用到根元素上, 但 $attrs 本身仍然可以手动使用</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM渲染结果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 尽管父组件传递了 id 和 class，但它们不会出现在子组件中 --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>用途：</strong></p><ul><li><strong>HTML属性透传：</strong> 动态传递 HTML 元素属性</li><li><strong>事件透传：</strong> 配合 <code>v-on=&quot;$attrs&quot;</code>，可以将所有未声明的事件绑定到子组件的元素上</li><li><strong>透传到指定元素上：</strong> 如果组件需要将父组件的传递属性分发到非根节点，可以结合 <code>$attrs</code> 和 <code>v-bind</code> 使用</li></ul><p>透传机制增强了组件的灵活性，避免了硬编码特定的 <code>props</code>，同时也提供了精细化的透传控制</p><h2 id="Slots-插槽"><a href="#Slots-插槽" class="headerlink" title="Slots 插槽"></a>Slots 插槽</h2><p>Vue <strong>插槽 (Slot)</strong> 是用来让父组件向子组件中传递结构化的 DOM 内容。它的作用就像“占位符”，父组件可以把内容填充到子组件的指定位置</p><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>例：</p><p>子组件中定义插槽位置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>我是默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="comment">&lt;!-- 占位符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件传递过来的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染 DOM 结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是父组件传递过来的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>通过 <code>&lt;slot&gt;</code> 上的 <strong>name</strong> 属性区分插槽，通过 <code>v-slot:&lt;插槽名&gt;</code> 将 html 插入到指定插槽</p><p>例：</p><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="comment">&lt;!-- 默认插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span> <span class="comment">&lt;!-- 简写: &lt;template #header&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是头部<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是主要内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span> <span class="comment">&lt;!-- 简写: &lt;template #footer&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是底部<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>插槽不仅能传结构，还能传数据。子组件可以向插槽暴露一些数据，父组件可以接收并渲染</p><p>例：</p><p>子组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="string">&quot;这是子组件传递的数据&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; msg &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件接收到：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染 DOM 结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>父组件接收到：这是子组件传递的数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Lifecycle-组件生命周期"><a href="#Lifecycle-组件生命周期" class="headerlink" title="Lifecycle 组件生命周期"></a>Lifecycle 组件生命周期</h2><p>组件生命周期是指组件从创建、挂载、更新到卸载的一系列过程。每个阶段都有特定的生命周期<strong>钩子函数</strong>( <em>Hooks Function</em> )供开发者执行相关逻辑</p><p>简单的说生命周期函数就是会在某一时刻由 Vue 自动执行的函数</p><p>组件生命周期分为以下几个阶段：</p><table><thead><tr><th>阶段</th><th>钩子函数( 选项式API | 组合式API )</th><th>描述</th></tr></thead><tbody><tr><td>创建阶段</td><td><code>beforeCreate</code> | 无</td><td>组件实例创建之前执行，此时无法访问到 <code>props</code> 和 <code>data</code></td></tr><tr><td></td><td><code>created</code> | <code>setup</code></td><td>组件实例创建完成后执行，此时可以访问到 <code>props</code> 和 <code>data</code></td></tr><tr><td>挂载阶段</td><td><code>beforeMount</code> | <code>onBeforeMount</code></td><td>组件挂载到 DOM 之前执行，此时组件实例已经生成了虚拟DOM，但还没有被渲染到实际的DOM元素上</td></tr><tr><td></td><td><code>mounted</code> | <code>onMounted</code></td><td>组件挂载到 DOM 之后执行，此时组件实例已经被渲染到了实际的DOM元素上</td></tr><tr><td>更新阶段</td><td><code>beforeUpdate</code> | <code>onBeforeUpdate</code></td><td>组件更新之前执行，在此阶段，组件的数据(响应式数据)已经发生了变化，但是DOM节点还没有被重新渲染(未更新视图)</td></tr><tr><td></td><td><code>updated</code> | <code>onUpdated</code></td><td>组件更新完成后执行，在此阶段，组件的数据(响应式数据)发生了变化，也已经重新渲染了DOM节点(已更新视图)。</td></tr><tr><td>卸载阶段</td><td><code>beforeUnmount</code> | <code>onBeforeUnmount</code></td><td>组件卸载之前执行，在此阶段，组件即将被销毁</td></tr><tr><td></td><td><code>unmounted</code> | <code>onUnmounted</code></td><td>组件卸载完成后执行，在此阶段，组件已经被销毁，无法访问到组件实例和DOM元素</td></tr></tbody></table><h3 id="生命周期钩子使用场景"><a href="#生命周期钩子使用场景" class="headerlink" title="生命周期钩子使用场景"></a>生命周期钩子使用场景</h3><p>例1 数据初始化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 created 或 onMounted 钩子中执行数据初始化，例如发送网络请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = <span class="title function_">ref</span>([]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">value</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例2 操作DOM：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果需要操作真实DOM，我们可以在 mounted 或 onMounted 狗子中进行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&#x27;Clicked!&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例3 事件监听与清理：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 mounted 或 onMounted 中添加事件监听器，在 unmounted 或 onUnmounted 中清理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, onResize);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, onResize);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onResize</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口尺寸发生变化&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例4 清理定时器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 beforeUnmount 或 onUnmounted 中清理定时器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, onUnmounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span>++, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开发中应根据场景选择合适的钩子，并在适当阶段清理资源，避免内存泄漏</p><h2 id="Composables-组合式函数"><a href="#Composables-组合式函数" class="headerlink" title="Composables 组合式函数"></a>Composables 组合式函数</h2><p>组合式函数是一个利用 Vue 的组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数，通常也被称为 Vue Hooks 函数。组合式函数允许将组件内的逻辑拆分并以独立的单元进行复用和组合</p><p>例：</p><p>封装鼠标位置监听：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useMousePosition.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMousePosition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">updateMouse</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">    x.<span class="property">value</span> = event.<span class="property">clientX</span>;</span><br><span class="line">    y.<span class="property">value</span> = event.<span class="property">clientY</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, updateMouse);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, updateMouse);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useMousePosition &#125; <span class="keyword">from</span> <span class="string">&#x27;./useMousePosition.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMousePosition</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>鼠标位置：X=&#123;&#123; x &#125;&#125;, Y=&#123;&#123; y &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组合式函数最佳实践"><a href="#组合式函数最佳实践" class="headerlink" title="组合式函数最佳实践"></a>组合式函数最佳实践</h3><ol><li><p><strong>优先封装逻辑到组合式函数</strong>：</p><ul><li>如果某段逻辑可能被多处使用（如窗口监听、数据请求、定时器管理），优先封装为组合式函数</li><li>保持组件内的代码精简，集中于组件本身的职责</li></ul></li><li><p><strong>清晰命名</strong>：</p><ul><li>组合式函数通常以 <code>useXxx</code> 的命名规范命名</li><li>组合式函数的名称应体现其用途，如 <code>useMousePosition</code></li></ul></li><li><p><strong>避免滥用</strong>：</p><ul><li>组合式函数应用于逻辑复用或复杂功能，不适合将简单逻辑（如计算属性）过度抽象</li></ul></li></ol><h2 id="Custom-Directive-自定义指令"><a href="#Custom-Directive-自定义指令" class="headerlink" title="Custom Directive 自定义指令"></a>Custom Directive 自定义指令</h2><p>Vue 提供了自定义指令的功能，用于给 HTML 元素添加额外的行为。自定义指令可以在模板中直接使用，并在指令的生命周期中执行相应的操作</p><p>指令的生命周期函数：</p><ul><li><code>beforeMount</code>: 在指令绑定的元素挂载 DOM 之前被调用</li><li><code>mounted</code>: 在指令绑定的元素被插入到 DOM 中后被调用</li><li><code>beforeUpdate</code>: 在指令所在的组件更新之前被调用</li><li><code>updated</code>: 在指令所在的组件更新之后被调用</li><li><code>beforeUnmount</code>: 在指令所在的组件卸载之前被调用</li><li><code>unmounted</code>: 在指令所在的组件卸载之后被调用</li></ul><p>每个钩子函数都包含以下参数：</p><ul><li><code>el</code>: 指令所绑定的元素</li><li><code>binding</code>: 值为一个对象，用于获取指令绑定的相关信息，其中包括：<ul><li><code>binding.value</code>: 指令绑定的值，该值就是指令等于号( = )后面的值，语法：<code>v-xxx=&quot;值&quot;</code></li><li><code>binding.oldValue</code>: 指令上一次绑定的值( = )</li><li><code>binding.arg</code>: 指令绑定的参数, 参数就是指令冒号( : )后面的内容，语法：<code>v-xxx:参数=&quot;值&quot;</code></li><li><code>binding.modifiers</code>: 指令绑定的修饰符，修饰符是以点开头的特殊后缀，用于给指令添加额外功能和修改行为，语法：<code>v-xxx.修饰符=&quot;值&quot;</code> or <code>v-xxx:参数.修饰符=&quot;值&quot;</code></li><li><code>binding.instance</code>: 值为指令绑定时所在组件的组件实例</li></ul></li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/main.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局 focus 指令</span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span><br><span class="line"><span class="comment">// 将焦点设置到 el 元素上</span></span><br><span class="line">el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自定义指令的命名</span></span><br><span class="line"><span class="comment">kebab-case命名 - 如：global-focus</span></span><br><span class="line"><span class="comment">    CamelCase命名 - 如：globalFocus</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在模板中使用 focus 指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- input 元素自动获取焦点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Plugins-插件"><a href="#Plugins-插件" class="headerlink" title="Plugins 插件"></a>Plugins 插件</h2><p>插件是用来增强 Vue 应用功能的一种机制，它不是单纯的一个组件或函数，而是一种批量注册功能，全局注入能力的工具</p><h3 id="插件的作用"><a href="#插件的作用" class="headerlink" title="插件的作用"></a>插件的作用</h3><p>插件通常用来为 Vue 添加全局功能，如：</p><ul><li>全局注册组件（不需要在每个文件里 import）</li><li>全局指令（如 v-focus、v-permission）</li><li>全局方法 / 属性（如 <code>$message</code>、<code>$confirm</code>）</li></ul><p>Vue 的官方库或部分第三方库都是基于 Vue 插件机制封装的，如：</p><ul><li>官方：Vue Router、Vuex</li><li>第三方：国际化 i18n、Element Plus、Axios</li></ul><h3 id="插件的结构"><a href="#插件的结构" class="headerlink" title="插件的结构"></a>插件的结构</h3><p>一个 Vue 插件只要暴露一个 install 方法就行，Vue 在 <code>app.use()</code> 时会调用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myPlugin.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 注册全局组件</span></span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">`&lt;button&gt;&lt;slot /&gt;&lt;/button&gt;`</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 注册全局指令</span></span><br><span class="line">    app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">      <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">        el.<span class="title function_">focus</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 添加全局方法</span></span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$sayHello</span> = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> myPlugin <span class="keyword">from</span> <span class="string">&#x27;./myPlugin.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用插件（会自动调用 install）</span></span><br><span class="line">app.<span class="title function_">use</span>(myPlugin, &#123; <span class="comment">/* 可传配置参数 */</span> &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这样：</span></span><br><span class="line"><span class="comment">&lt;MyButton&gt; 组件全局可用</span></span><br><span class="line"><span class="comment">所有模板都能用 v-focus</span></span><br><span class="line"><span class="comment">所有实例里都能用 this.$sayHello(&#x27;Jack&#x27;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="ref-模板引用"><a href="#ref-模板引用" class="headerlink" title="ref 模板引用"></a>ref 模板引用</h2><p><code>ref</code> 是模板上的一个特殊 attribute，用于从模板中访问对应的 DOM 元素或子组件实例</p><h3 id="DOM-元素引用"><a href="#DOM-元素引用" class="headerlink" title="DOM 元素引用"></a>DOM 元素引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;myInput&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useTemplateRef, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获取模板中 ref=myInput 引用的 DOM 元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> myInput = <span class="title function_">useTemplateRef</span>(<span class="string">&#x27;myInput&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 必须挂载之后才能访问</span></span></span><br><span class="line"><span class="language-javascript">  myInput.<span class="property">value</span>?.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>nextTick 响应式数据更新到 DOM 后的等待函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> show = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">openAndFocus</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  show.<span class="property">value</span> = <span class="literal">true</span> <span class="comment">// 更新数据</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">nextTick</span>() <span class="comment">// 等待 DOM 更新完, 再向下执行</span></span><br><span class="line">  myInput.<span class="property">value</span>?.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子组件实例引用（配合-defineExpose-宏）"><a href="#子组件实例引用（配合-defineExpose-宏）" class="headerlink" title="子组件实例引用（配合 defineExpose 宏）"></a>子组件实例引用（配合 defineExpose 宏）</h3><p>在子组件使用 <code>&lt;script setup&gt;</code> 时，<strong>默认是私有的</strong>；父组件想通过 <code>ref</code> 调用其方法，必须由子组件用 <code>defineExpose()</code> 显式暴露。并且要在任何 <code>await</code> 语法之前调用 <code>defineExpose()</code>，否则会报错</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件 Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;myInput&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, useTemplateRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> myInput = <span class="title function_">useTemplateRef</span>(<span class="string">&#x27;useTemplateRef&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">focus</span> = (<span class="params"></span>) =&gt; myInput.<span class="property">value</span>?.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123; focus &#125;) <span class="comment">// 暴露给父组件（必须在 await 语法前调用）</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;childRef&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;focusChild&quot;</span>&gt;</span>聚焦子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useTemplateRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> childRef = <span class="title function_">useTemplateRef</span>(<span class="string">&#x27;childRef&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">focusChild</span> = (<span class="params"></span>) =&gt; childRef.<span class="property">value</span>?.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Tips：</p><ul><li><strong>只能在挂载后</strong>访问模板引用，在挂载之前访问结果会是 <code>null/undefined</code></li><li><code>v-if</code> 切换为 <code>false</code> 会把元素/子组件<strong>卸载</strong>，对应引用会回到 <code>null</code>，可以使用 ES6 可选链 ( <code>.?</code> ) 防止空值报错</li></ul><h2 id="动态组件（-lt-component-gt-）"><a href="#动态组件（-lt-component-gt-）" class="headerlink" title="动态组件（&lt;component&gt;）"></a>动态组件（<code>&lt;component&gt;</code>）</h2><h3 id="缓存组件（KeepAlive）"><a href="#缓存组件（KeepAlive）" class="headerlink" title="缓存组件（KeepAlive）"></a>缓存组件（<em>KeepAlive</em>）</h3><h2 id="过度与动画"><a href="#过度与动画" class="headerlink" title="过度与动画"></a>过度与动画</h2><p>当一个元素进入/离开页面，或者某个状态发生变化时，我们希望它<strong>平滑变化</strong>，而不是瞬间切换，Vue 为了让这种效果更简单，内置了 <code>&lt;transition&gt;</code> 和 <code>&lt;transition-group&gt;</code> 组件，它可以实现元素 <strong>进入/离开时的过渡/动画</strong> 和 <strong>列表的过渡/动画</strong></p><ul><li><code>&lt;Transition&gt;</code> 组件：包裹需要动画效果的<strong>单个</strong>元素</li><li> <code>&lt;transition-group&gt;</code>：包裹需要动画效果的<strong>多个</strong>元素，每个元素都需要配置 <strong>Key</strong> 属性</li></ul><p>Vue 在元素 <strong>插入、移除</strong> 时，会自动给它加上不同阶段的 class ( 类名 )，你只需要定义对应的 CSS 即可</p><p><strong>不同时刻样式类名：</strong>  </p><ul><li><p>控制元素<strong>进入</strong>的样式</p><ol><li><code>v-enter-from</code> 进入的起点</li><li><code>v-enter-active</code> 进入过程中</li><li><code>v-enter-to</code> 进入的终点</li></ol></li><li><p>控制元素<strong>离开</strong>的样式</p><ol><li><code>v-leave-from</code> 离开的起点</li><li><code>v-leave-active</code> 离开过程中</li><li><code>v-leave-to</code> 离开的终点</li></ol></li></ul><p>例1 <em>transition</em> 过度：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>你好，过渡！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 定义 transition 过度 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-active</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: opacity <span class="number">0.5s</span> ease;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 元素进入到离开是的样式 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-enter-from</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.fade-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例2 <em>animation</em> 动画：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;bounce&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>你好，动画！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 定义元素进入过程动画 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-enter-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in <span class="number">0.8s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 定义元素离开过程动画 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bounce-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation</span>: bounce-in <span class="number">0.8s</span> reverse;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 定义关键帧 */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> bounce-in &#123;</span></span><br><span class="line"><span class="language-css">  <span class="number">0%</span>   &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>); &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">50%</span>  &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>); &#125;</span></span><br><span class="line"><span class="language-css">  <span class="number">100%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>); &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过度-动画的区别与联系"><a href="#过度-动画的区别与联系" class="headerlink" title="过度/动画的区别与联系"></a>过度/动画的区别与联系</h3><ul><li><strong>过渡</strong>：适合简单的“从 A 到 B”变化（淡入、移动、缩放等），依赖 CSS 的 <code>transition</code></li><li><strong>动画</strong>：适合复杂的连续动作，可以自定义关键帧（CSS <code>@keyframes</code>），依赖 CSS 的 <code>animation</code> / <code>@keyframes</code></li><li>Vue <code>Transition</code> 组件同时支持过渡和动画，只要你写对应的 CSS 即可</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue.js" scheme="https://www.timeic.top/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js (二) 基础API</title>
    <link href="https://www.timeic.top/posts/95ce540.html"/>
    <id>https://www.timeic.top/posts/95ce540.html</id>
    <published>2024-11-01T12:25:16.000Z</published>
    <updated>2025-09-07T23:17:01.015Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="v-bind-指令"><a href="#v-bind-指令" class="headerlink" title="v-bind 指令"></a><code>v-bind</code> 指令</h2><p>描述：用于动态地将数据绑定到 HTML 元素的属性上，当数据发生变化时，其对应的属性值也会自动更新变化</p><p>语法：<code>v-bind:attrName=&quot;expression&quot;</code> or <code>:attrName=&quot;expression&quot;</code></p><p><code>attrName</code> 为要绑定的属性名，<code>expression</code> 为要绑定的数据，它可以是任意的 Vue 表达式</p><h3 id="1-动态绑定元素属性"><a href="#1-动态绑定元素属性" class="headerlink" title="1. 动态绑定元素属性"></a>1. 动态绑定元素属性</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- disabled 如果为 true, 则启用该属性, 反之则移除该属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态绑定多个属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:</span>=<span class="string">&quot;attrs&quot;</span>&gt;</span>Hello!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> url = <span class="title function_">ref</span>(<span class="string">&#x27;https://www.baidu.com&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> title = <span class="title function_">ref</span>(<span class="string">&#x27;百度&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> disabled = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> attrs = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: <span class="string">&#x27;Hello!!!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">id</span>: <span class="string">&#x27;title&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- disabled 如果为 true, 则启用该属性, 反之则移除该属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态绑定多个属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:</span>=<span class="string">&quot;attrs&quot;</span>&gt;</span>Hello!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;https://www.baidu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&#x27;百度&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">disabled</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">attrs</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">title</span>: <span class="string">&#x27;Hello!!!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">id</span>: <span class="string">&#x27;title&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="2-动态绑定元素class-对象语法"><a href="#2-动态绑定元素class-对象语法" class="headerlink" title="2. 动态绑定元素class, 对象语法"></a>2. 动态绑定元素class, 对象语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据对象属性的 value 是否为 true, 来选择是否将其属性的 key 作为该元素 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; content: isStat &#125;&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isStat = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据对象属性的 value 是否为 true, 来选择是否将其属性的 key 作为该元素 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; content: isStat &#125;&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isStat</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="3-动态绑定元素class-数组语法"><a href="#3-动态绑定元素class-数组语法" class="headerlink" title="3. 动态绑定元素class, 数组语法"></a>3. 动态绑定元素class, 数组语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组中每个 item 都将成为该元素的 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[className, &#x27;style2&#x27;]&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> className = <span class="title function_">ref</span>(<span class="string">&#x27;content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: chartreuse</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组中每个 item 都将成为该元素的 className --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[className, &#x27;style2&#x27;]&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">className</span>: <span class="string">&#x27;content&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blueviolet</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.style2</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: chartreuse</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="4-动态绑定元素style-对象语法"><a href="#4-动态绑定元素style-对象语法" class="headerlink" title="4. 动态绑定元素style, 对象语法"></a>4. 动态绑定元素style, 对象语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> content = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果不加引号, 则要用驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Adipisci, fugit. Voluptatem pariatur incidunt nihil saepe perspiciatis est dolor dolorum, praesentium dignissimos tempore facere facilis sequi fugit asperiores vel aperiam maxime!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果不加引号, 则要用驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="5-动态绑定元素style-数组语法"><a href="#5-动态绑定元素style-数组语法" class="headerlink" title="5. 动态绑定元素style, 数组语法"></a>5. 动态绑定元素style, 数组语法</h3><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[content, style2]&quot;</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates enim architecto rem nostrum, aliquam corporis. Maiores vel magni exercitationem. Odit vitae dicta ipsam earum delectus aliquid velit ipsum vel deleniti?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> content = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> style2 = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">border</span>: <span class="string">&#x27;2px solid black&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">padding</span>: <span class="string">&#x27;10px 15px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">backgroundColor</span>: <span class="string">&#x27;chartreuse&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[content, style2]&quot;</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptates enim architecto rem nostrum, aliquam corporis. Maiores vel magni exercitationem. Odit vitae dicta ipsam earum delectus aliquid velit ipsum vel deleniti?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">content</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;22px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontWeight</span>: <span class="string">&#x27;bold&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;blueviolet&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">style2</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">border</span>: <span class="string">&#x27;2px solid black&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">padding</span>: <span class="string">&#x27;10px 15px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">backgroundColor</span>: <span class="string">&#x27;chartreuse&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="v-model-指令"><a href="#v-model-指令" class="headerlink" title="v-model 指令"></a><code>v-model</code> 指令</h2><p>描述：用于实现表单元素( 如 input、textarea、select 等 )和 Vue 实例数据的双向绑定，它会根据表单的类型来动态的将表单输入的内容与 Vue 组件实例的数据进行双向绑定</p><p>语法：<code>v-model=&quot;data&quot;</code></p><p>data 为要绑定的数据，必须是响应式数据</p><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例1. text类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .trim 为 v-model 修饰符, 可以过滤首尾的空格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的内容是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例2. radio类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123; sex &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- radio 类型表单需要显示的指定 value 的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例3. checkbox类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>喜好：&#123;&#123; likes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用了一组 checkbox 类型表单, 需要显示的指定 value 的值, 同时要将 v-model 绑定为一个数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 乒乓球</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> sex = <span class="title function_">ref</span>(<span class="string">&#x27;男&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> likes = <span class="title function_">reactive</span>([<span class="string">&#x27;乒乓球&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例1. text类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .trim 为 v-model 修饰符, 可以过滤首尾的空格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的内容是：&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例2. radio类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：&#123;&#123; sex &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- radio 类型表单需要显示的指定 value 的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>例3. checkbox类型表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>喜好：&#123;&#123; likes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用了一组 checkbox 类型表单, 需要显示的指定 value 的值, 同时要将 v-model 绑定为一个数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;like&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span> 乒乓球</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">likes</span>: [<span class="string">&#x27;乒乓球&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><code>v-model</code> 修饰符：</p><ul><li><p><code>.lazy</code> 失去焦点或按下回车键时才更新绑定数据</p></li><li><p><code>.number</code> 输入字符串转换为有效的数字</p></li><li><p><code>.trim</code> 过滤首尾的空格</p></li></ul><h2 id="v-on-指令"><a href="#v-on-指令" class="headerlink" title="v-on 指令"></a><code>v-on</code> 指令</h2><p>描述：用于监听 DOM 事件，并在事件触发时执行指定的方法或表达式</p><p>语法：<code>v-on:eventName=&quot;handler&quot;</code> or <code>@:eventName=&quot;handler&quot;</code></p><p>eventName 为事件名，handler 为事件触发时要执行的函数或 Vue表达式</p><p>例1：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      如果事件处理函数中无需传递参数可以不加小括号()</span></span><br><span class="line"><span class="comment">      这样的话在事件触发时 Vue 会自动添加事件对象(event)作为第1个参数</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>Button-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;Button-2 was clicked&#x27;)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- &#x27;Button-2 was clicked&#x27; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      你也可以在事件处理函数参数中显示的指定事件对象</span></span><br><span class="line"><span class="comment">      $event 为触发该事件的事件对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler($event)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">arg</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      如果事件处理函数中无需传递参数可以不加小括号()</span></span><br><span class="line"><span class="comment">      这样的话在事件触发时 Vue 会自动添加事件对象(event)作为第1个参数</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>Button-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler(&#x27;Button-2 was clicked&#x27;)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- &#x27;Button-2 was clicked&#x27; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      你也可以在事件处理函数参数中显示的指定事件对象</span></span><br><span class="line"><span class="comment">      $event 为触发该事件的事件对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handler($event)&quot;</span>&gt;</span>Button-2<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- PointerEvent --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">arg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>另外，<code>v-on</code> 还支持修饰符，用来对事件进行额外的处理，如 阻止默认行为、阻止事件冒泡等</p><p>常用事件修饰符列表：</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td><code>.prevent</code></td><td>阻止默认行为</td></tr><tr><td><code>.stop</code></td><td>阻止事件冒泡</td></tr><tr><td><code>.capture</code></td><td>事件在捕获阶段触发</td></tr><tr><td><code>.self</code></td><td>只当事件在该元素本身触发时才处理</td></tr><tr><td><code>.once</code></td><td>事件只执行一次</td></tr><tr><td><code>.passive</code></td><td>提升页面滚动性能</td></tr><tr><td><code>.left</code></td><td>按下键盘左键</td></tr><tr><td><code>.right</code></td><td>按下键盘右键</td></tr><tr><td><code>.up</code></td><td>按下键盘上键</td></tr><tr><td><code>.down</code></td><td>按下键盘下键</td></tr><tr><td><code>.enter</code></td><td>按下键盘 回车 键</td></tr><tr><td><code>.delete</code></td><td>按下键盘 Delete 键</td></tr><tr><td><code>.esc</code></td><td>按下键盘 ESC 键</td></tr><tr><td><code>.space</code></td><td>按下键盘 空格 键</td></tr><tr><td><code>.tab</code></td><td>按下键盘 Tab 键</td></tr><tr><td><code>.capsLock</code></td><td>按下键盘 CapsLock 键</td></tr><tr><td><code>.ctrl</code></td><td>组合键，按下键盘 Ctrl 键 + Other</td></tr><tr><td><code>.alt</code></td><td>组合键，按下键盘 Alt 键 + Other</td></tr><tr><td><code>.shift</code></td><td>组合键，按下键盘 Shift 键 + Other</td></tr><tr><td><code>.meta</code></td><td>组合键，按下键盘 Win 键 + Other</td></tr></tbody></table><p>例2：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;alert1&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 阻止默认行为同时阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.timeic.top&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;alert2&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">alert1</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;alert 1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">alert2</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;alert 2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;alert1&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 阻止默认行为同时阻止事件冒泡 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.timeic.top&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;alert2&quot;</span>&gt;</span>click me!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;alert 1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;alert 2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: tomato;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>例3：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当按下 Ctrl + Enter 键时执行 handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.enter</span>=<span class="string">&quot;handler&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">`您输入的是 &#x27;<span class="subst">$&#123;text.value&#125;</span>&#x27;`</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当按下 Ctrl + Enter 键时执行 handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.ctrl.enter</span>=<span class="string">&quot;handler&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 事件处理函数写在 methods 中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">`您输入的是 &#x27;<span class="subst">$&#123;<span class="variable language_">this</span>.text&#125;</span>&#x27;`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a><code>computed</code> 计算属性</h2><p>Vue 的 computed 用于定义一些基于现有数据计算得出的属性。它可以将逻辑与模板分离，使代码更加简洁、易读、易于维护。同时计算属性会通过缓存和依赖跟踪机制提供响应式和高效的性能</p><p>特点：</p><ul><li><strong>缓存：</strong>计算属性会根据其依赖的响应式数据进行缓存( 缓存计算结果 )，只有当它所依赖的<strong>响应式数据</strong>发生变化时才会重新计算，这意味着在模板中多次访问同一个计算属性时，只会计算一次</li></ul><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// computed 函数返回一个 RefImpl 类型 Proxy 对象( Vue 响应式数据 )</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;王&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;五&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里可以使用简写形式: const fullName = computed(() =&gt; &#123; //访问 fullName.value 时，执行此处 &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> fullName = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问 fullName.value 时，执行 get()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// get 中 return 的值为计算结果，它会根据其依赖的数据进行缓存</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> firstName.<span class="property">value</span> + <span class="string">&#x27; &#x27;</span> + lastName.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 修改 fullName.value 时，执行 set()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> [newFirstName, newLastName] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        firstName.<span class="property">value</span> = newFirstName;</span></span><br><span class="line"><span class="language-javascript">        lastName.<span class="property">value</span> = newLastName;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;王&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;五&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fullName 可以简写为一个函数, 例如：fullName() &#123; //访问 fullName 时，执行此处 &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 访问 fullName 时，执行 get()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// get 中 return 的值为计算结果，它会根据其依赖的数据进行缓存</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 修改 fullName 时，执行 set()</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> [firstName, lastName] = value.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/main.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 fullName</span></span><br><span class="line"><span class="comment">// vm.fullName = &#x27;李 四&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="watch-侦听器"><a href="#watch-侦听器" class="headerlink" title="watch 侦听器"></a><code>watch</code> 侦听器</h2><p>Vue 的 <code>watch</code> API 可以用来监听某个属性的变化，并在属性变化时执行相应的操作</p><p>当你需要在数据发生变化时执行<strong>异步</strong>或复杂的操作( <em>副作用操作</em> )，或者需要在数据变化后执行一些特定的逻辑时，可以使用 <code>watch</code></p><h3 id="watch-选项式-API"><a href="#watch-选项式-API" class="headerlink" title="watch 选项式 API"></a><code>watch</code> 选项式 API</h3><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气很&#123;&#123; info &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">info</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeWeather</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// isHot 可以简写为一个函数, 例如：isHot() &#123; //isHot 发生变化时执行此处 &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isHot</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 当 isHot 被修改时执行 handler 函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配置选项...</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在选项式 API 中，还可以通过组件实例上的 <code>$watch</code> 方法来监听数据变化：</p><p>语法：<code>$watch(监听属性, 回调函数, 配置选项)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $watch 函数会返回停止监听函数 stop</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> stop = <span class="variable language_">this</span>.$watch(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">count++; <span class="comment">// 修改 count</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">stop</span>(); <span class="comment">// 停止监听</span></span></span><br><span class="line"><span class="language-javascript">count++; <span class="comment">// 不再触发监听</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="watch-组合式-API"><a href="#watch-组合式-API" class="headerlink" title="watch 组合式 API"></a><code>watch</code> 组合式 API</h3><p>Vue3 组合式 API 中提供了 <code>watch</code> 函数，用于监听 <strong>响应式数据</strong>( 包括 <code>ref</code>、<code>reactive</code>、计算属性 等… ) 的变化</p><ol><li>同时监听多个数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;张&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;三&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用数组的方式同时监听多个数据</span></span><br><span class="line"><span class="title function_">watch</span>([firstName, lastName], <span class="function">(<span class="params">[newFirst, newLast], [oldFirst, oldLast]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`名字变化: <span class="subst">$&#123;oldFirst&#125;</span><span class="subst">$&#123;oldLast&#125;</span> → <span class="subst">$&#123;newFirst&#125;</span><span class="subst">$&#123;newLast&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">firstName.<span class="property">value</span> = <span class="string">&#x27;李&#x27;</span>; <span class="comment">// 输出：名字变化: 张三 → 李三</span></span><br><span class="line">lastName.<span class="property">value</span> = <span class="string">&#x27;四&#x27;</span>;  <span class="comment">// 输出：名字变化: 李三 → 李四</span></span><br></pre></td></tr></table></figure><ol start="2"><li>监听复杂类型的响应式数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认会监听对象内部属性的变化( 隐式深度监听 )，而不是监听对象的引用变化</span></span><br><span class="line"><span class="title function_">watch</span>(person, <span class="function">(<span class="params">newPerson, oldPerson</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 由于对象的引用关系，这里的新值 newPerson 和 旧值 oldPerson 是相同(相等)的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`对象变化:`</span>, newPerson);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>停止监听</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// watch 函数会返回停止监听函数 stop</span></span><br><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count 变化: <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span> = <span class="number">1</span>; <span class="comment">// 触发监听</span></span><br><span class="line"><span class="title function_">stop</span>(); <span class="comment">// 停止监听</span></span><br><span class="line">count.<span class="property">value</span> = <span class="number">2</span>; <span class="comment">// 不再触发监听</span></span><br></pre></td></tr></table></figure><p><code>watch</code> 侦听器配置选项：</p><ul><li><p><code>immediate</code>: 值为 <code>true</code> 时，会在组件初始化时会先调用一次回调 / handler 函数。默认值为 <code>false</code></p></li><li><p><code>deep</code>: 深层监听，值为 <code>true</code> 时，会递归( 逐层遍历 )监听数组或对象内部所有值的变化。默认值为 <code>false</code></p><ul><li>在选项式 API 中，默认监听复杂类型(如 数组、对象)的响应式数据，只会监听其引用值是否产生变化，而不会监听其内部属性的变化，如要监听内部属性的变化则需要配置 <code>deep: true</code></li><li>在组合式 API 中，用 <code>reactive</code> 函数创建的复杂类型响应式数据，默认会监听对象内部属性的变化，而不会监听对象的引用变化</li></ul></li><li><p><code>once</code>: 一次性监听。值为 <code>true</code> 时，数据变化时只会触发一次</p></li></ul><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">组合式API</button></li><li class="tab"><button type="button" data-href="#events-2">选项式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">&#125;, &#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;) <span class="comment">// once: true 一次性监听器</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count 被修改了&#x27;</span>, newValue, <span class="string">&#x27;-&gt;&#x27;</span>, oldValue);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">once</span>: <span class="literal">true</span> <span class="comment">// once: true 一次性监听器</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a><code>watchEffect</code></h2><p>Vue3 的 <code>watchEffect</code> 是 <strong>一种自动收集依赖的响应式监听器</strong>，与 <code>watch</code> 不同，它<strong>不需要手动指定监听的变量</strong>，而是会在<strong>回调函数执行时，自动收集依赖</strong>，并在依赖变化时重新执行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>: <span class="number">25</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`用户信息变化: <span class="subst">$&#123;user.name&#125;</span> - <span class="subst">$&#123;user.age&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeUser</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    user.<span class="property">age</span> = <span class="number">28</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄：&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeUser&quot;</span>&gt;</span>修改用户信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>清理副作用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// watchEffect 的回调函数可以接收一个 onCleanup 参数，用来清理上一次副作用，避免重复执行逻辑</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">(<span class="params">onCleanup</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器运行中...&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当副作用重新执行或组件卸载时，自动清理</span></span><br><span class="line">  <span class="title function_">onCleanup</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>watch</code> 和 <code>watchEffect</code> 的区别：</p><table><thead><tr><th>特性</th><th><code>watchEffect</code></th><th><code>watch</code></th></tr></thead><tbody><tr><td>执行时机</td><td>立即执行一次</td><td>默认不会立即执行（除非 <code>immediate: true</code>）</td></tr><tr><td>依赖收集</td><td>自动收集（用到的响应式数据都会被监听）</td><td>必须手动指定监听哪个数据</td></tr><tr><td>用途</td><td>适合逻辑简单、依赖不确定的副作用</td><td>适合精确监听某个/多个数据变化，写更复杂的逻辑</td></tr></tbody></table><h2 id="v-show-指令"><a href="#v-show-指令" class="headerlink" title="v-show 指令"></a><code>v-show</code> 指令</h2><p>描述：用于根据条件动态的显示与隐藏元素，当表达式的值为 <code>false</code> 时元素的 style 就会加上 <code>display: none</code></p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isVisible&quot;</span>&gt;</span>I am visible<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isVisible = <span class="title function_">ref</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    isVisible.<span class="property">value</span> = !isVisible.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-if-指令"><a href="#v-if-指令" class="headerlink" title="v-if 指令"></a><code>v-if</code> 指令</h2><p>描述：用于根据条件动态地渲染/销毁元素或组件。它根据表达式的值来决定是否渲染元素，它的语法为：<code>v-if=&quot;条件&quot;</code></p><p><code>v-if</code> 还可以配合 <code>v-else-if</code> 和 <code>v-else</code> 指令来实现多条件处理</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 type 为 A 时渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>这是类型 A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 type 为 B 时渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span>这是类型 B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 type 既不为 A 也不为 B 时渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>这是其他类型<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切换 type 的按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;A&#x27;)&quot;</span>&gt;</span> A <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;B&#x27;)&quot;</span>&gt;</span> B <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeType(&#x27;O&#x27;)&quot;</span>&gt;</span> O <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> type = <span class="title function_">ref</span>(<span class="string">&#x27;A&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeType</span> = (<span class="params">type</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    type.<span class="property">value</span> = type;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for-指令"><a href="#v-for-指令" class="headerlink" title="v-for 指令"></a><code>v-for</code> 指令</h2><p>描述：用于渲染列表数据，它可以将一个数组或一个对象在页面中响应式的渲染为多个相同结构的元素</p><p>语法：<code>v-for=&quot;value in items&quot;</code> or <code>v-for=&quot;(value, key) in items&quot;</code></p><p>例1：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        如果数组元素的顺序发生变化, 可能会导致重复渲染, 甚至出现错位渲染的情况</span></span><br><span class="line"><span class="comment">        因此遍历数组时, :key 值建议为数组成员中的唯一值(id)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- element 为数组的每个元素, index 为数组的索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(element, index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;element.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; element.name &#125;&#125;-&#123;&#123; element.age &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- value 为对象属性的值, key 为对象中属性的名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; key &#125;&#125;-&#123;&#123; value &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历一个字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- char 为字符串中的每个字符, index 为每个字符的索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char, index) in string&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; char &#125;&#125;-&#123;&#123; index &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历指定次数（5次）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遍历数字 1-5, number 为遍历的数字, index 为该数字的索引 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number, index) in 5&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; number &#125;&#125;-&#123;&#123; index &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> persons = <span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span></span><br><span class="line"><span class="language-javascript">]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> car = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;宝马xxx&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">price</span>: <span class="string">&#x27;xx万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>: <span class="string">&#x27;白色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> string = <span class="title function_">ref</span>(<span class="string">&#x27;HelloVue&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>key</code> <strong>属性的作用：</strong></p><p>Vue 默认按照“就地更新”的策略来更新通过 <code>v-for</code> 渲染的元素列表。当数据项的顺序改变时，Vue 不会随之移动 DOM 元素的顺序，而是就地更新所有的元素，确保它们在原本指定的索引位置上渲染。默认模式是高效的，但<strong>只适用于列表渲染输出的结果不依赖子组件状态或者临时 DOM 状态 (例如表单输入值) 的情况</strong></p><p><code>key</code> 属性可以帮助 Vue 在列表项更新时准确、高效地识别每个元素，避免不必要的重新渲染。具体来说，<code>key</code> 提供了一个唯一标识，使 Vue 在数据变化时能更智能地对比新旧元素，从而进行最小化的 DOM 渲染</p><p>例2：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;e in filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;e.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; e.name &#125;&#125; - &#123;&#123; e.age &#125;&#125; - &#123;&#123; e.sex &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, reactive, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> keyWord = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> sortType = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> persons = <span class="title function_">reactive</span>([</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Patricia&#x27;</span>, <span class="attr">age</span>: <span class="number">28</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Jennifer&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="string">&#x27;女&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;James&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;Robert&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">]);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> filPersons = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr = persons.<span class="title function_">filter</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(keyWord.<span class="property">value</span>) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (sortType.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> sortType.<span class="property">value</span> === <span class="number">1</span> ? (p2.<span class="property">age</span> - p1.<span class="property">age</span>) : (p1.<span class="property">age</span> - p2.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-text-amp-v-html-指令"><a href="#v-text-amp-v-html-指令" class="headerlink" title="v-text &amp; v-html 指令"></a><code>v-text</code> &amp; <code>v-html</code> 指令</h2><p>描述：用于更新 HTML 元素的内容</p><ul><li><p><code>v-text</code> 是将元素的 <code>textContent</code> 设置为指定的值</p></li><li><p><code>v-html</code> 是将元素的 <code>innerHTML</code> 设置为指定的值</p></li></ul><p>注意：由于 <code>v-html</code> 指令将字符串作为 HTML 直接解析，因此要确保绑定的数据是可信的。在使用 <code>v-html</code> 指令时，应该避免将用户输入的内容直接插入到 HTML 中，以防止 XSS( 跨站脚本攻击 ) 等安全问题</p><h2 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a><code>v-cloak</code> 指令</h2><p>描述：用于解决 Vue 编译过程出现的闪烁问题。通常与 CSS 配合使用，可以确保在 Vue 实例完全编译之前，元素不会出现 Vue 插值表达式( <code>&#123;&#123;xxx&#125;&#125;</code> )</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当 Vue.js 加载完成并创建应用实例完成挂载后 v-cloak 属性会被 Vue 自动删掉 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;v-cloak&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a><code>v-pre</code> 指令</h2><p>描述：用于跳过当前元素和其子元素的模板编译过程。这意味着你不能在 <code>v-pre</code> 标记的元素上使用 Vue指令和插值语法</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 跳过静态元素(没有使用Vue指令和模板语法的元素)的模板编译过程, 可以加快编译速度 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-pre</span>&gt;</span>public element<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a><code>v-once</code> 指令</h2><p>描述：用于指定一个元素及其子元素在首次渲染后不在响应式更新。这对于静态内容( 数据不变动 )非常有用，可以有效地提高性能，避免不必要的 DOM 操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue.js" scheme="https://www.timeic.top/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js (一) 项目创建与基本概念</title>
    <link href="https://www.timeic.top/posts/c037ead1.html"/>
    <id>https://www.timeic.top/posts/c037ead1.html</id>
    <published>2024-06-27T14:25:16.000Z</published>
    <updated>2025-09-07T23:17:01.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vue 是一个<strong>渐进式</strong>现代 JavaScript 框架，用于构建用户界面( UI )。它的目标是通过尽可能简单的 Api 实现响应式数据绑定和组合的视图集合( 组件 )</p><p>Vue 的核心只关注视图层，如果需要其它高级功能可以逐步引入( 如 路由、状态管理 等 )</p><p>Vue 起源于开源项目，由前 Google 员工<a href="https://zh.wikipedia.org/zh-hans/%E5%B0%A4%E9%9B%A8%E6%BA%AA">尤雨溪</a>开发并维护，它在开源社区中极具人气，尤其在亚洲地区广泛流行</p><h2 id="MVVM-架构"><a href="#MVVM-架构" class="headerlink" title="MVVM 架构"></a>MVVM 架构</h2><p>MVVM 是一种软件架构模式，它将应用程序分成三层：模型（Model）、视图（View）、视图模型（ViewModel）</p><p>Vue.js 参照了 MVVM 架构的思想设计</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/20240627/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE+2023-10-26+151205.9gwfu67rb0.webp" alt="2023-10-26 151205"></p><ul><li><p>模型（Model）</p><ul><li>代表应用程序的数据和业务逻辑</li><li>它是应用的核心部分，包含了所有的数据处理、验证以及对数据的操作</li></ul></li><li><p>视图（View）</p><ul><li>代表应用程序的用户界面( UI )。它呈现模型中的数据给用户，并通过用户交互反馈数据的变化</li><li>在 Web前端中，通常由 HTML、CSS 组成，用于表示界面的结构和样式</li></ul></li><li><p>视图模型（ViewModel）</p><ul><li>连接模型( Model )和视图( View )。它是一个中间层，负责处理视图和模型之间的双向数据绑定</li><li>将模型中的数据转换成视图可识别的格式( HTML DOM )，并将视图的操作反馈给模型</li></ul></li></ul><h2 id="创建-Vue-工程项目"><a href="#创建-Vue-工程项目" class="headerlink" title="创建 Vue 工程项目"></a>创建 Vue 工程项目</h2><p>确保你的机器上安装了 Node.js，之后我们使用 Vite 脚手架来创建项目，它会帮我们生成项目所需的依赖，以及构建工具相关的配置等…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">npm init vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">npx create-vite</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">之后根据提示输入项目名称和选择项目模版( Vue + TypeScript 或 Vue + JavaScript )</span></span><br></pre></td></tr></table></figure><p><strong><code>npm create</code> 命令：</strong></p><p><code>npm create</code> 命令是用来运行远程的<strong>项目生成器</strong>( 脚手架 )的命令</p><p>它会自动下载并执行远程的 <code>create-&lt;package-name&gt;</code> 命名的包来创建一个项目</p><p><strong>Vue 项目结构：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">├── node_modules/        # npm 包依赖目录</span><br><span class="line">├── public/              # 静态资源目录（例如 index.html 和静态文件）</span><br><span class="line">├── src/                 # 源代码目录</span><br><span class="line">│   ├── assets/          # 资源文件（图片、样式等）</span><br><span class="line">│   ├── components/      # Vue 组件目录</span><br><span class="line">│   ├── App.vue          # 主应用组件</span><br><span class="line">│   ├── main.js          # 应用入口文件</span><br><span class="line">├── .gitignore           # Git 忽略文件</span><br><span class="line">├── package.json         # 项目的依赖和脚本配置</span><br><span class="line">├── package-lock.json    # 锁定的依赖版本信息</span><br><span class="line">├── vite.config.js       # Vite 构建工具的项目配置文件</span><br><span class="line">└── README.md            # 项目说明文件</span><br></pre></td></tr></table></figure><h2 id="Vue-的基本概念"><a href="#Vue-的基本概念" class="headerlink" title="Vue 的基本概念"></a>Vue 的基本概念</h2><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p><strong>响应式</strong>是 Vue 中的一种机制，指的是当数据发生变化时，Vue 会自动检测到这个变化并更新相关的视图。这种自动的同步更新被称为“响应式系统”。Vue 的响应式系统主要依赖于“依赖追踪”和“数据劫持”技术</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.2a52r1jygn.webp" alt="image"></p><p>组件化指的是将应用程序拆分为多个<strong>独立的、可复用的模块</strong>（组件），每个模块负责特定的功能或界面部分。组件化开发能够提升代码的组织性、复用性和可维护性，尤其适合开发大型的前端应用</p><p>在 Vue 中组件可以用 <code>.vue</code> 文件( 单文件组件SFC )表示，每个组件都封装了自己独立的<strong>模板</strong>、<strong>逻辑</strong>（如数据和方法）、以及<strong>样式</strong>。它包含以下三个部分：</p><ul><li><strong>template</strong>：定义了组件的 HTML 结构</li><li><strong>script</strong>：定义了组件的逻辑，包括数据、方法、生命周期钩子等</li><li><strong>style</strong>：定义了组件的样式</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/CountBtn.vue 计数器按钮组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/App.vue 根组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CountBtn</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">CountBtn</span> <span class="keyword">from</span> <span class="string">&#x27;./components/CountBtn.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">CountBtn</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/main.js 应用程序的入口文件 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>组件命名：</strong></p><ul><li><p>kebab-case命名: school / my-school</p></li><li><p>CamelCase命名: School / MySchool</p></li><li><p>组件名不能用 HTML 已有元素的名称</p></li></ul><p><strong>注册组件：</strong></p><ul><li><p>局部注册</p><p>局部注册的组件只在指定的 Vue 实例或组件中可用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Header组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Header组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- scoped 局部CSS样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">75px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">55px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用Header组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入Header组件(注册前需先导入对应组件)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册Header组件, 只能在当前组件中使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Header</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局注册</p><p>全局注册的组件可以在任何地方使用，通常在 <code>main.js</code>( 程序入口文件 ) 中进行全局注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* src/main.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入Header组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;Header&#x27;</span>, <span class="title class_">Header</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>在 Vue 中全局注册使用相对较少，主要原因如下：</p><ul><li>命名冲突：全局注册的组件在整个应用中可见，容易与其它组件名称冲突</li><li>难以维护：如果大量组件都全局注册，可能会造成组件引用混乱，管理维护变得复杂</li><li>性能开销：全局注册的组件在应用加载时就被解析( 不管是否使用 )，可能会增加应用的初始加载时间</li></ul><h3 id="Vue-createApp-方法"><a href="#Vue-createApp-方法" class="headerlink" title="Vue.createApp 方法"></a><code>Vue.createApp</code> 方法</h3><p>描述：用来创建 Vue 应用实例的方法，它接收一个对象作为参数，该对象是当前 Vue 应用实例的<strong>根组件</strong>( <em>Root Component</em> )</p><p>组件中包含很多配置选项，常见的包括：</p><ul><li><p><code>template</code>：用于定义组件的模板</p></li><li><p><code>data</code>：用于定义组件的数据，可以在模板中使用</p></li><li><p><code>methods</code>：用于定义组件的方法，可以在模板中调用</p></li><li><p>……</p></li></ul><p>在实际开发中我们会在单个 Vue 应用实例中使用<strong>组件</strong>来构建复杂的单页面应用</p><h3 id="app-mount-方法"><a href="#app-mount-方法" class="headerlink" title="app.mount 方法"></a><code>app.mount</code> 方法</h3><p>描述：将 Vue 应用实例挂载到指定的 DOM 元素上以使 Vue 应用实例在页面中生效。Vue 应用实例挂在后，它会<strong>响应式</strong>地去渲染页面</p><p>语法：<code>app.mount(挂载点)</code></p><p>挂载点可以是一个 DOM元素 或是一个 CSS 选择器，它会返回根组件的实例</p><h3 id="模板-template"><a href="#模板-template" class="headerlink" title="模板 template"></a>模板 <code>template</code></h3><p>Vue 模板是一种描述视图的语法结构。它允许你将 HTML 和 Vue 的特殊语法结合在一起，创建动态的、响应式的用户界面</p><p>Vue 模板主要增加了以下几种语法：</p><p><strong>插值( <em>Mustache</em> )：</strong></p><ul><li><p>语法：<code>&#123;&#123; expression &#125;&#125;</code> | 只能在元素内容中使用，不能在元素属性中使用</p></li><li><p>双大括号( <code>&#123;&#123; &#125;&#125;</code> )中的内容是 Vue 表达式，它可以访问组件实例中的数据</p></li><li><p>作用：用于在模板中插入组件实例中的数据，实现数据的动态渲染，即数据发生变化时，视图自动更新变化</p></li></ul><p><strong>指令( <em>Directive</em> )：</strong></p><ul><li>指令是带有特殊功能的 Vue 模板属性，它通常以 <code>v-</code> 开头，用于在 DOM 元素中添加特定行为和功能</li></ul><p><strong>Vue 表达式：</strong></p><ul><li>Vue表达式可以使用 JavaScript 表达式和一些常用 JavaScript 内置对象( 如 Date, Object 等 )，最重要的是它能访问组件实例上的属性</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过 cdn 链接来使用 Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      data 函数返回的对象会被 Vue 代理(new Proxy) -&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      当 data 中的数据发生变化时, Vue 会重新解析模板, 从而使页面与数据保持同步</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&#x27;Hello, Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方法中的 this 指向组件的实例(被 Vue 代理的对象, this === vm)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">text</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义组件的模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// template 属性中的内容会被 Vue 解析( to Virtual DOM )</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果不指定 template 属性，挂载元素的内容就会成为 Vue 模板</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;button v-on:click=&quot;alert&quot;&gt;click me!&lt;/button&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 挂载 Vue 应用实例，返回根组件的实例(被 Vue 代理的对象)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="style-scoped（局部样式）"><a href="#style-scoped（局部样式）" class="headerlink" title="style scoped（局部样式）"></a>style scoped（局部样式）</h3><p>局部样式是指组件内的 CSS样式只在该组件内有效，而不会影响到其他组件的样式</p><p>要使用局部样式只需要在 <code>&lt;style&gt;</code> 标签上添加 <code>scoped</code> 属性即可：</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 局部样式, 如果去除 scoped, 则样式会对所有组件有效(全局样式) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>style scoped 的原理：</strong></p><p>Vue 会在组件的每个元素上添加一个自动生成的属性（如 <code>data-v-xxxx</code>），并将 <code>style scoped</code> 样式中的选择器转换为只匹配带有该属性的元素。例如，上面的 <code>.box</code> 样式会被编译为类似以下的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* data-v-xxxx 相当于一个身份标识, 每个组件生成的都不相同, 这样确保了组件中的样式只在该组件中有效 */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-attr">[data-v-xxxx]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Composition-API（组合式-API）"><a href="#Composition-API（组合式-API）" class="headerlink" title="Composition API（组合式 API）"></a>Composition API（组合式 API）</h3><p>Vue3 引入了<strong>组合式 API（Composition API）</strong>，以便更灵活地组织和复用组件逻辑</p><p>Vue2 中使用 <code>data</code>、<code>methods</code> 等选项来定义组件状态和方法。Vue3 的组合式 API 则不再强制划分这些选项，可以自由组合和组织逻辑，使代码结构更清晰、复用性更强</p><h3 id="setup-函数"><a href="#setup-函数" class="headerlink" title="setup 函数"></a><code>setup</code> 函数</h3><p>在组合式 API 中，<code>setup</code> 函数是组件的入口。它在组件实例创建前调用。<code>setup</code> 函数返回的内容会暴露给模板使用</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  setup 是一个钩子函数, 会被 Vue 调用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  Vue 调用时会将 this 指定为 undefined, 因此无法使用 this 来访问组件实例</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义响应式数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    返回模板中使用的变量和方法, 如果不返回对象, 组件不会暴露任何内容给模板</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    Vue 在模板编译时，会优先从组件的 setupState 对象中访问，也就是这里返回的对象中访问，如果访问不到，则会从组件实例中访问</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; count, increment &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a><code>ref</code> 函数</h3><ul><li><code>ref</code> 函数用于创建响应式数据的工具</li><li>它会将数据包裹在一个名为 RefImpl 类型的代理( Proxy )对象中返回。在 <code>setup</code> 函数中要访问响应式数据必须通过对象中的 <code>value</code> 属性来访问，但在模版中无需通过 <code>value</code> 来访问，Vue 会<strong>自动解包</strong>( 在模板编译时, Vue 会自动将 <code>RefImpl</code> 类型对象转换为 <code>ref.value</code> )访问</li><li><code>value</code> 属性的操作会被 Vue 拦截(<code>get</code> &amp; <code>set</code>)，当修改 <code>value</code> 属性的值为基本数据类型时，Vue 会响应式的更新，如果将其值修改为复杂数据类型(如 数组、对象)时，Vue 会调用 <code>reactive</code> 函数来创建复杂数据类型的响应式数据</li></ul><h3 id="reactive-函数"><a href="#reactive-函数" class="headerlink" title="reactive 函数"></a><code>reactive</code> 函数</h3><p><code>reactive</code> 函数用于创建复杂数据类型(如 数组、对象)的响应式数据，它会通过创建代理(<code>new Proxy</code>)的方式来实现响应式，这种方式可以实现数组或对象的深层响应式，但不能实现基本数据类型的响应式</p><h3 id="toRefs-函数"><a href="#toRefs-函数" class="headerlink" title="toRefs 函数"></a><code>toRefs</code> 函数</h3><p><code>toRefs</code> 是 Vue3 中提供的一个工具函数，用于将一个响应式对象中的每个属性转换为单独的 <code>ref</code> 对象( <code>RefImpl</code> )。它的主要用途是解决直接解构响应式对象丢失响应性的问题</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; person.gender &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">22</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// toRefs 函数会自动调用 ref 函数, 将对象中的属性全部转换成 RefImpl 类型对象, 并且保持其响应性。如果不用 toRefs 函数直接解构, 则会丢失响应性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123; name, age &#125; = <span class="title function_">toRefs</span>(person)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 解构出来的数据通过 value 属性来访问, 当修改 value 属性时, 源对象中对应的属性也会同时被修改(这里源对象就是 person)</span></span></span><br><span class="line"><span class="language-javascript">    name.<span class="property">value</span> = <span class="string">&#x27;李四&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    age.<span class="property">value</span> = <span class="number">19</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; person &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="script-setup（组合式-API-语法糖）"><a href="#script-setup（组合式-API-语法糖）" class="headerlink" title="script setup（组合式 API 语法糖）"></a>script setup（组合式 API 语法糖）</h3><p><code>script setup</code> 是 Vue3 提供的一个<strong>开发编译时</strong>的语法糖，用来代替传统的 <code>setup</code> 函数。它直接把 <code>setup</code> 的逻辑写在 <code>&lt;script setup&gt;</code> 标签内，无需显式定义 <code>setup</code> 函数</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- setup 启用组合式 API 语法糖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// script setup 语法不支持 export 导出</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>无需显示的将变量或函数通过 return 暴露给模板，Vue 会在开发编译时自动将顶层的变量或函数暴露给模板( <code>setupState</code> )</li><li>导入的组件无需注册，Vue 会自动注册</li></ul><h3 id="props-组件间通信"><a href="#props-组件间通信" class="headerlink" title="props 组件间通信"></a>props 组件间通信</h3><p><code>props</code> 是 Vue 中的一种机制，用于在父组件中向子组件传递数据。父组件可以在模板中给子组件添加属性将数据传递给子组件，而子组件则通过 <code>props</code> 接收这些数据，从而实现父子组件之间的通信</p><p>例：</p><div class="tabs" id="props"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#props-1">选项式API</button></li><li class="tab"><button type="button" data-href="#props-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="props-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里 : 是 Vue 的指令, 用于动态绑定数据, 如果去除 : 则是直接传递一个静态的字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">parentMessage</span>: <span class="string">&#x27;Hello from Parent&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 定义 props, 被定义的 props 将会被 Vue 代理到组件实例上, 我们可以直接通过 this 访问</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="title class_">String</span>, <span class="comment">// 接收字符串类型的数据, 如果父组件传递数据类型不同, 则会提示警告</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="comment">// 接收数字类型的数据, 可以通过数组来指定多个类型, 如: [Object, Array, Number]</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 设置默认值, 对于数组和对象类型需要通过函数返回默认值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  数组写法定义 props, 无默认值和类型限定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    props: [&#x27;message&#x27;, &#x27;count&#x27;]</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="props-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里 : 是 Vue 的指令, 用于动态绑定数据, 如果去除 : 则是直接传递一个静态的字符串 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:message</span>=<span class="string">&quot;parentMessage&quot;</span> <span class="attr">:count</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> parentMessage = <span class="title function_">ref</span>(<span class="string">&#x27;Hello from Parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">defineProps 是 Vue 的宏函数(开发编译时运行, 仅限顶层使用), 用来定义 props，它无需 import 可以直接在 script setup 中使用</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">返回定义的 props, 等同于组件实例上的 $props</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>: <span class="title class_">String</span>, <span class="comment">// 接收字符串类型的数据, 如果父组件传递数据类型不同, 则会提示警告</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">count</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Number</span>, <span class="comment">// 接收数字类型的数据, 可以通过数组来指定多个类型, 如: [Object, Array, Number]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 设置默认值, 对于数组和对象类型需要通过函数返回默认值</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  数组写法定义 props, 无默认值和类型限定</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    defineProps([&#x27;message&#x27;, &#x27;count&#x27;])</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><code>props</code> 可以通过 :指令(v-bind) 动态的传递数据，这意味着当父组件传递的 <code>props</code> 数据变化时，子组件会立即<strong>响应式</strong>的更新</p><p><code>props</code> 在子组件中是只读的，不能直接修改，否则会提示警告</p><p><strong>单向数据流：</strong></p><p><strong>单向数据流</strong>是指数据在组件之间的传递方向：<strong>从父组件流向子组件</strong>，但子组件不能直接修改从父组件传递过来的数据( props 只读 )。单向数据流确保了数据流向的单一性和可预测性，避免了数据状态的混乱导致状态管理变得复杂。如果需要更新 <code>props</code>( 修改 props ) 时，可以使用事件通知父组件</p><p>例：</p><div class="tabs" id="事件通知"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#事件通知-1">选项式API</button></li><li class="tab"><button type="button" data-href="#事件通知-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="事件通知-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span> @<span class="attr">increment</span>=<span class="string">&quot;increaseCount&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Child</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">parentCount</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increaseCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">parentCount</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;increment&#x27;)&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;count&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="事件通知-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件: src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:count</span>=<span class="string">&quot;parentCount&quot;</span> @<span class="attr">increment</span>=<span class="string">&quot;increaseCount&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> parentCount = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">increaseCount</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    parentCount.<span class="property">value</span> += <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件: src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;increment&#x27;)&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>([<span class="string">&#x27;count&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="events-组件间通信"><a href="#events-组件间通信" class="headerlink" title="events 组件间通信"></a>events 组件间通信</h3><p>events 即组件事件，它是指组件之间通过自定义事件实现的通信方式。组件事件允许子组件向父组件发送消息，使父组件能够响应子组件中的操作。这种机制在 Vue 中主要是通过 <code>$emit</code>、<code>v-on</code>（缩写 <code>@</code>）来实现</p><p><strong>通过自定义事件实现子组件向父组件传递数据：</strong></p><p>在 Vue 中，子组件可以使用组件实例上的 <code>$emit</code> 方法触发一个自定义事件，并可将数据传递给父组件。父组件通过 <code>v-on</code>（或 <code>@</code>）监听该事件，并在事件发生时接收数据和执行回调函数</p><p>例：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">选项式API</button></li><li class="tab"><button type="button" data-href="#events-2">组合式API</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击 button 时执行 handleChangeParent 方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChangeParent&quot;</span>&gt;</span>Change Parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleChangeParent</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 触发 changeMsg 事件, 并传递数据给父组件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;changeMsg&#x27;</span>, <span class="string">&#x27;Hello from child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当子组件触发 changeMsg 事件时, 父组件执行 handleChangeMsg 方法, 用来接收子组件传递的数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">changeMsg</span>=<span class="string">&quot;handleChangeMsg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Perent.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data 参数由子组件通过 $emit 函数传递</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleChangeMsg</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">msg</span> = data</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Child.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击 button 时执行 handleChangeParent 函数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleChangeParent&quot;</span>&gt;</span>Change Parent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// defineEmits 宏函数, 用来定义事件, 它返回 emits 函数, 用来触发定义的事件, 等同于 $emit</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;changeMsg&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleChangeParent</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 触发 changeMsg 事件, 并传递数据给父组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emits</span>(<span class="string">&#x27;changeMsg&#x27;</span>, <span class="string">&#x27;Hello from child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/components/Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当子组件触发 changeMsg 事件时, 父组件执行 handleChangeMsg 方法, 用来接收子组件传递的数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">changeMsg</span>=<span class="string">&quot;changeMsg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;Hello Perent.vue&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// data 参数由子组件通过 emits 函数传递</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = data =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    msg.<span class="property">value</span> = data</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>Vue 推荐事件及 props 的名称都使用 “<code>kebab-case</code>” 的命名方式，比如 <code>child-click</code>、<code>submit-form</code>。这样格式更统一，可读性也更强</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Vue.js" scheme="https://www.timeic.top/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 安装使用与CommanJS模块化</title>
    <link href="https://www.timeic.top/posts/cca2ffbf.html"/>
    <id>https://www.timeic.top/posts/cca2ffbf.html</id>
    <published>2024-02-12T05:45:23.000Z</published>
    <updated>2025-09-07T23:17:01.134Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Node.js 是基于谷歌 V8( 一种JavaScript 引擎 )构建的一种 JavaScript 运行环境，由 Ryan Dahl 开发</p><p>Node.js 使 JavaScript 脱离了浏览器，可以实现服务器开发的一种 JavaScript 运行环境</p><h2 id="Node-js-的安装"><a href="#Node-js-的安装" class="headerlink" title="Node.js 的安装"></a>Node.js 的安装</h2><p>官方地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>安装完成后，输入 <code>node -v</code> 命令检测是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v <span class="comment">#显示node版本号</span></span></span><br><span class="line">v17.6.0</span><br></pre></td></tr></table></figure><p>通常 nodejs 安装时会自动安装 <code>npm</code>（node package manager）。输入 <code>npm -v</code> 检查 npm 是否安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v <span class="comment">#显示npm版本号</span></span></span><br><span class="line">8.5.1</span><br></pre></td></tr></table></figure><h2 id="Node-js-版本管理"><a href="#Node-js-版本管理" class="headerlink" title="Node.js 版本管理"></a>Node.js 版本管理</h2><p>推荐下面这款工具来管理 Node.js 的版本</p><ul><li><p>fnm: <a href="https://kkgithub.com/Schniz/fnm">https://github.com/Schniz/fnm</a>（推荐!!）</p><ul><li>特点: 基于 Rust、快速、简单、垮平台</li></ul></li></ul><p><strong>fnm 的使用：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已安装的所有版本及版本别名(包括系统内安装的版本)</span></span><br><span class="line">fnm ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看官方发布的所有可用版本</span></span><br><span class="line">fnm ls-remote</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定版本</span></span><br><span class="line">fnm install 21.6.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装最新的 LTS 版本</span></span><br><span class="line">fnm install --lts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用国内源安装最新的 LTS 版本</span></span><br><span class="line">fnm install --lts --node-dist-mirror=https://npmmirror.com/mirrors/node</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定版本</span></span><br><span class="line">fnm use 21.6.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前正在使用的版本</span></span><br><span class="line">fnm current</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置已安装版本的别名</span></span><br><span class="line">fnm alias 20.8.1 dev # fnm use dev 切换至 20.8.1 版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认版本</span></span><br><span class="line">fnm default 18.21.1 # fnm use default 切换至 18.21.1 版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载指定版本, 可以使用别名</span></span><br><span class="line">fnm uninstall 18.21.1 # 不指定版本号则会卸载当前正在使用的版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定版本来执行某个全局命令</span></span><br><span class="line">fnm exec --using=18 node -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在应用目录写入文件，指定特定版本</span></span><br><span class="line">echo &#x27;16.20.2&#x27; &gt; .node-version # fnm use . 使用 .node-version 文件中指定版本</span><br><span class="line"></span><br><span class="line">fnm env</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取 fnm 所有环境变量, 用于删除 fnm</span></span><br></pre></td></tr></table></figure><h2 id="模块（Module）"><a href="#模块（Module）" class="headerlink" title="模块（Module）"></a>模块（Module）</h2><p>Node.js 是基于 CommonJS 模块化规范实现的<strong>模块系统</strong></p><p>在 CommonJS 模块化规范中一个文件就是一个模块，每个模块都有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见</p><p>每个模块中必须有一个变量 <code>module</code>，它是一个对象，代表当前模块自身，通过 <code>module.exports</code> 或 <code>exports</code> 对象可以导出当前模块的方法或者变量</p><p>exports 和 module.exports 默认为相等关系：<code>exports === module.exports</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">thyName</span>)&#123;</span><br><span class="line">  name = thyName</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>module.require()</code> 方法 或 <code>require()</code> 函数来引入某个模块，函数会返回被引入模块中的 <code>module.exports</code> 对象</p><p>require 和 module.require 默认为相等关系：<code>require === module.require</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getModule.js</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">&#x27;./module&#x27;</span>);</span><br><span class="line">myModule.<span class="title function_">setName</span>(<span class="string">&#x27;Timeic&#x27;</span>);</span><br><span class="line">myModule.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><p>在模块中，变量this <strong>默认</strong>指向当前模块的导出对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> == <span class="variable language_">module</span>.<span class="property">exports</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> == <span class="built_in">exports</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在Node.js中，模块分为两类：</p><p>一类是Node.js自身提供的模块，称为核心模块；另一类是用户编写的模块，称为文件模块</p><p>核心模块部分在Node 源代码的编译过程中，被编译成了二进制执行文件。在Node 进程启动时，核心模块就被直接加载进内存中，所以核心模块的加载速度是最快的，如：http、fs、url等</p><p>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程。速度相比核心模块稍微慢一些</p><h2 id="包（Package）"><a href="#包（Package）" class="headerlink" title="包（Package）"></a>包（Package）</h2><p>包是实现模块系统的重要规范，Node.js 中包就是一个目录，一个包中包含了模块所需的所有文件，符合 CommonJS 模块化规范的包目录，应该包含以下文件：</p><ul><li><p>package.json：包的描述文件(必要文件‼️)，必须在包的根目录下</p></li><li><p>bin：可执行二进制文件放在该目录下</p></li><li><p>lib：JavaScript代码放在该目录下</p></li><li><p>doc：文档放在该目录下</p></li><li><p>test：单元测试放在该目录下</p></li></ul><h2 id="npm-命令行工具"><a href="#npm-命令行工具" class="headerlink" title="npm 命令行工具"></a>npm 命令行工具</h2><p>npm 是一个命令行工具，它是 JavaScript 的包管理工具，借助 npm 我们可以实现 JavaScript 模块的发布，安装和依赖等</p><p><strong>使用 npm 工具创建一个JavaScript项目：</strong></p><p>1.新建一个名为 test 的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><p>2.并在该目录下执行 <code>npm init</code> 命令，之后根据提示输入信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm init</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出：</span></span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">...</span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (test)  # 输入包名/项目名称</span><br><span class="line">version: (1.0.0)  # 输入项目版本号</span><br><span class="line">description:  # 输入项目描述</span><br><span class="line">entry point: (index.js)  # 输入模块的入口文件</span><br><span class="line">test command:  # 输入测试命令</span><br><span class="line">git repository:  # 输入git仓库地址</span><br><span class="line">keywords:  # 输入项目关键词</span><br><span class="line">author:  # 输入作者</span><br><span class="line">license: (ISC)  # 输入开源协议</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package.json的创建内容：</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot;: &quot;test&quot;,</span><br><span class="line">&quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">&quot;description&quot;: &quot;一个测试项目&quot;,</span><br><span class="line">&quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"> &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;author&quot;: &quot;Timeic&quot;,</span><br><span class="line">&quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Is this OK? (yes)  # 会车即可确认创建package.json</span><br></pre></td></tr></table></figure><h3 id="npm-常用命令"><a href="#npm-常用命令" class="headerlink" title="npm 常用命令"></a>npm 常用命令</h3><ul><li><p>初始化项目: <code>npm init</code></p><ul><li><code>-y</code>: 使用默认配置</li></ul></li><li><p>搜索包: <code>npm search &lt;包名&gt;</code></p></li><li><p>安装包: <code>npm install/i &lt;包名&gt;</code></p><ul><li><code>--save</code>：默认参数，将下载或本地的包文件解压到当前目录下的<code>node_modules</code>目录( 安装 )，并将其添加到项目依赖中</li></ul></li><li><p>卸载包: <code>npm uninstall &lt;包名&gt;</code></p><ul><li>别名：<code>npm remove/rm/r &lt;包名&gt;</code></li></ul></li><li><p>安装指定版本的npm: <code>npm install npm@x.x.x -g</code></p><ul><li><code>@latest</code>：最新版</li></ul></li><li><p>设置淘宝镜像源: <code>npm config set registry https://registry.npmmirror.com</code></p></li><li><p>设置官方镜像源: <code>npm config set registry https://registry.npmjs.org</code></p></li><li><p>查看当前镜像源: <code>npm config get registry</code></p></li></ul><h2 id="模块的实现"><a href="#模块的实现" class="headerlink" title="模块的实现"></a>模块的实现</h2><p>Node.js 运行时会将每个模块中代码包装到一个函数内执行，Node.js 会将模块所需要的接口作为该函数的参数传入，函数代码大致如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">    <span class="comment">// 模块中的代码</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">exports 用于导出当前模块中的变量或方法的对象</span></span><br><span class="line"><span class="comment">require 用于引入某个模块的函数</span></span><br><span class="line"><span class="comment">module 表示当前模块的对象</span></span><br><span class="line"><span class="comment">__filename 表示当前文件的完整名称</span></span><br><span class="line"><span class="comment">__dirname 表示当前目录的完整名称</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>模块标识符：</strong></p><p>模块标识符是用来查找和定位模块的一个字符串</p><h3 id="文件模块的查找规则"><a href="#文件模块的查找规则" class="headerlink" title="文件模块的查找规则"></a>文件模块的查找规则</h3><p>在使用 require() 函数加载文件模块时，Node.js 会根据传入的参数，即模块标识符，对文件进行查找，查找规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>情况一</strong>：xxx是一个核心模块，则直接返回核心模块，并停止查找，比如：path、http等</p><p><strong>情况二</strong>：xxx以<code>./</code>(当前目录)、<code>../</code>(上一级目录)、<code>/</code>(根目录)开头的，会将xxx作 为文件在对应目录进行查找，查找规则如下：</p><ul><li><p>有后缀名，按照当前后缀名查找对应的文件</p></li><li><p>没有后缀名，会按照如下顺序查找：</p><ol><li><p>直接查找文件xxx</p></li><li><p>查找 xxx.js文件</p></li><li><p>查找 xxx.json文件</p></li><li><p>查找 xxx.node文件</p></li></ol></li><li><p>如果依然没找到，则会将xxx作为目录查找，查找规则如下：</p><ol><li><p>查找 xxx/index.js</p></li><li><p>查找 xxx/index.json</p></li><li><p>查找 xxx/index.node</p></li></ol></li><li><p>如果还没找到，则抛出异常：not found</p></li><li><p>如果找到，则会使用<code>JSON.parse()</code>方法解析该目录下的<code>package.json</code>文件的内容来得到描述对象，然后根据对象中main属性( 默认为index.js )指定的<strong>模块标识符</strong>来查找文件</p></li><li><p>如果没找到，则抛出异常：not found</p></li></ul><p><strong>情况三</strong>：如果 xxx是一个单词(不包含特殊符号，如：<code>./</code>、<code>/</code>、空格等)，并且xxx不是一个核心模块，则会将其作为一个包( 目录 )来查找，查找规则如下：</p><p>从当前模块的<code>module.paths</code>属性中的所有路径以及全局路径下<strong>依次</strong>查找名为 xxx的目录</p><p><code>require()</code> 函数加载文件模块时采用同步加载，为了提高效率，Node.js 运行时会缓存已经加载过的文件，当发现某个文件已加载过了，则直接从缓存中加载，不会重复加载同一个文件模块</p><p>查看已缓存的模块：<code>console.log(require.cache)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Node.js" scheme="https://www.timeic.top/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6教程（上）</title>
    <link href="https://www.timeic.top/posts/1f1de31d.html"/>
    <id>https://www.timeic.top/posts/1f1de31d.html</id>
    <published>2024-02-12T04:35:31.000Z</published>
    <updated>2025-09-07T23:17:01.032Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ES6 是 ECMAScript 的第 6 个版本。它与 2015 年 6 月正式发布，正式名称为 ECMAScript 2015，通常 ES6 泛指 ECMAScript 2015 及其后续的版本</p><blockquote><p>ECMAScript 是一种由 ECMA 国际（前身为欧洲计算机制造商协会，英文：European Computer ManufacturersAssociation）通过 <a href="https://tc39.es/ecma262/">ECMA-262</a> 标准化的脚本程序设计语言，它定义了该脚本语言的各种元素、结构、语法、运算符等等。而 JavaScript 则是该标准的具体实现</p></blockquote><h2 id="let-关键字"><a href="#let-关键字" class="headerlink" title="let 关键字"></a>let 关键字</h2><p><strong><code>let</code></strong> 允许你声明一个作用域被限制在<strong>块</strong>( <code>&#123;&#125;</code> )中的变量。与 <code>var</code> 关键字不同的是，<code>let</code> 声明的变量不会在作用域中被提升</p><p>let 声明与 var 声明的区别：</p><table><thead><tr><th>特点</th><th><code>var</code> 声明</th><th><code>let</code> 声明</th></tr></thead><tbody><tr><td>变量提升</td><td>Yes</td><td>No</td></tr><tr><td>作用域</td><td>函数级作用域</td><td>块级作用域</td></tr><tr><td>重复声明</td><td>Yes</td><td>No</td></tr><tr><td>全局对象</td><td>Yes</td><td>No</td></tr></tbody></table><p><strong>变量提升：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 无变量提升 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//报错：ReferenceError: age is not defined</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">38</span>;</span><br></pre></td></tr></table></figure><p><strong>作用域：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 块级作用域 */</span></span><br><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">666</span>; <span class="comment">// 我是局部变量a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 666</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 报错：ReferenceError: b is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>()</span><br></pre></td></tr></table></figure><p><strong>重复声明：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 同一个变量不可重复声明(同一作用域内) */</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">//报错：SyntaxError: Identifier &#x27;num&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><p><strong>全局对象：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不会在全局对象中创建属性或方法 */</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">666</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>, a) <span class="comment">//输出：undefined 666</span></span><br></pre></td></tr></table></figure><h2 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h2><p><code>const</code> 关键字用于声明一个常量，其特点和 <code>let</code> 声明一样（存在块作用域），但常量的值是无法（通过重新赋值）改变的</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fav = <span class="number">7</span>;</span><br><span class="line">fav = <span class="number">20</span>; <span class="comment">//报错：TypeError: Assignment to constant variable</span></span><br><span class="line"><span class="comment">//如果重新声明也会报错</span></span><br><span class="line"><span class="keyword">const</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> fav = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//SyntaxError: Identifier &#x27;fav&#x27; has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;;</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>; <span class="comment">//可以读写对象或数组中的属性</span></span><br><span class="line">obj = &#123;&#125;; <span class="comment">//改变obj的值(原始值 or 引用值)还是会报错</span></span><br></pre></td></tr></table></figure><h2 id="模版字符串（Template-strings）"><a href="#模版字符串（Template-strings）" class="headerlink" title="模版字符串（Template strings）"></a>模版字符串（<em>Template strings</em>）</h2><p>模板字符串 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mutLineStr = <span class="string">`string line1</span></span><br><span class="line"><span class="string">string line2`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mutLineStr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">string line1</span></span><br><span class="line"><span class="comment">string line2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> author = <span class="string">&quot;李白&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> mustache = <span class="string">`</span></span><br><span class="line"><span class="string">静夜思</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;author&#125;</span></span></span><br><span class="line"><span class="string">xxx</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mustache)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静夜思</span></span><br><span class="line"><span class="comment">    李白</span></span><br><span class="line"><span class="comment">xxx</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="对象字面量增强"><a href="#对象字面量增强" class="headerlink" title="对象字面量增强"></a>对象字面量增强</h2><p>相对于 ES5，ES6 的对象字面量得到了很大程度的增强。这些改进使 JavaScript 代码更加简洁同时更易于理解</p><h3 id="对象属性简写"><a href="#对象属性简写" class="headerlink" title="对象属性简写"></a>对象属性简写</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  <span class="attr">type</span>: type,</span><br><span class="line">  <span class="attr">heat</span>: heat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music);  <span class="comment">// Object &#123;type: &quot;rock&quot;, heat: &quot;50%&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6改写 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  type,</span><br><span class="line">  heat</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music);  <span class="comment">// Object &#123;type: &quot;rock&quot;, heat: &quot;50%&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="对象方法简写"><a href="#对象方法简写" class="headerlink" title="对象方法简写"></a>对象方法简写</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  <span class="attr">type</span>: type,</span><br><span class="line">  <span class="attr">heat</span>: heat,</span><br><span class="line">  <span class="attr">description</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;当前音乐风格为&#x27;</span> + <span class="variable language_">this</span>.<span class="property">type</span> + <span class="string">&#x27;,&#x27;</span> + <span class="variable language_">this</span>.<span class="property">heat</span> + <span class="string">&#x27;都喜欢&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music.<span class="title function_">description</span>()); <span class="comment">// 当前音乐风格为rock,50%都喜欢</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6改写 */</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="string">&#x27;rock&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> heat = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> music = &#123;</span><br><span class="line">  type,</span><br><span class="line">  heat,</span><br><span class="line">  <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`当前音乐风格为<span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.heat&#125;</span>都喜欢`</span>; <span class="comment">//使用模板字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(music.<span class="title function_">description</span>()); <span class="comment">// 当前音乐风格为rock,50%都喜欢</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：使用 ES6 简写的方法不能作为构造函数来调用( <code>new</code> )，否则将会报错</p></blockquote><h3 id="展开语法（Spread-syntax）"><a href="#展开语法（Spread-syntax）" class="headerlink" title="展开语法（Spread syntax）"></a>展开语法（<em>Spread syntax</em>）</h3><p>展开语法 可以在创建<strong>字面量</strong>对象/数组时，将对象/数组在语法层面展开</p><p><strong>1.对象展开：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> chinese = &#123;</span><br><span class="line">    <span class="attr">skin</span>: <span class="string">&quot;yellow&quot;</span>,</span><br><span class="line">    <span class="attr">hair</span>: <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Are you ok?&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">CXK</span> = &#123;</span><br><span class="line">    <span class="attr">slill</span>: <span class="string">&quot;jump sing rap and play basketball&quot;</span>,</span><br><span class="line">    <span class="attr">song</span>: <span class="string">&quot;啊哈哈哈&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> linge = &#123;</span><br><span class="line">    ...chinese,</span><br><span class="line">    ...<span class="variable constant_">CXK</span>,</span><br><span class="line">    <span class="comment">// 展开语法 等同于下面写法</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    skin: &quot;yellow&quot;,</span></span><br><span class="line"><span class="comment">    hair: &quot;black&quot;,</span></span><br><span class="line"><span class="comment">    sayHi() &#123;</span></span><br><span class="line"><span class="comment">      console.log(&quot;Are you eat?&quot;);</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    slill: &quot;jump sing rap and play basketball&quot;,</span></span><br><span class="line"><span class="comment">    song: &quot;啊哈哈哈&quot;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(linge);</span><br></pre></td></tr></table></figure><p><strong>2.数组展开：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [...arr1, ...arr2, <span class="number">70</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// [10, 20, 30, 40, 50, 60, 70]</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="comment">// 求最大值</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">23</span>, <span class="number">54</span>, <span class="number">446</span>, <span class="number">56</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 446</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值（Destructuring）"><a href="#解构赋值（Destructuring）" class="headerlink" title="解构赋值（Destructuring）"></a>解构赋值（<em>Destructuring</em>）</h3><p><strong>解构赋值</strong> 可以将属性/值从对象/数组中取出，并赋值给其它变量</p><p><strong>1.数组的解构赋值：</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">//a, b, c是从右边数组中按照 位置(,逗号分隔) 提取并赋值的3个变量(位置匹配)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">//输出：1 2 3</span></span><br><span class="line"><span class="keyword">let</span> [ , y, z] = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z) <span class="comment">// undefined (z在右边数组中没有元素对应，则会将 undefined 赋值给变量z)</span></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]; <span class="comment">//等号(=)两边的结构要保持一致，才能取到嵌套的数组中的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, d) <span class="comment">// 1 2 4</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x]; <span class="comment">//交换变量的值</span></span><br><span class="line"><span class="comment">/* 例3 */</span></span><br><span class="line"><span class="keyword">let</span> [a=<span class="number">5</span>, b=<span class="number">7</span>] = [<span class="number">1</span>]; <span class="comment">//a=5, b=7为变量a, b的默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 7 (b在右边数组中没有元素对应，所以使用默认值 7 赋值给变量b，而不是undefined)</span></span><br><span class="line"><span class="comment">/* 例4 */</span></span><br><span class="line"><span class="keyword">let</span> [v, m, n] = <span class="string">&quot;大前端&quot;</span>;</span><br><span class="line"><span class="comment">//如果等号右边的是一个字符串，则字符串会作为一个 类数组对象(String类型对象) 进行解构赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v, m, n); <span class="comment">// 大 前 端</span></span><br></pre></td></tr></table></figure><p><strong>2.对象的解构赋值：</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> &#123;x, y, z = <span class="number">100</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="comment">//x, y, z是从右边对象中按照 名称 提取并赋值的3个变量(名称匹配)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z) <span class="comment">// 100 (z在右边对象中没有属性对应，则会使用默认值 100 赋值给变量z)</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="comment">//在上一个例子中变量必须与属性同名，才能取到正确的值，如果要单独指定变量名，可以使用下面的语法</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">a</span>: num1 = <span class="number">10</span>, <span class="attr">b</span>: num2 = <span class="number">5</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">3</span>&#125;; <span class="comment">//指定变量名并提供默认值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">/* 例3 */</span></span><br><span class="line"><span class="comment">//对于嵌套结构的对象，可以使用下面的语法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">p</span>: [</span><br><span class="line">    <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// &quot;World&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p) <span class="comment">// [&quot;Hello&quot;, &#123;y: &quot;World&quot;&#125;]</span></span><br><span class="line"><span class="comment">/* 例4 */</span></span><br><span class="line"><span class="comment">//如果等号右边的是一个数值或布尔值，则会将其先转成对象，再进行解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>; <span class="comment">//Number类型对象</span></span><br><span class="line">s === <span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>; <span class="comment">//Boolean类型对象</span></span><br><span class="line">s === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>4.函数参数的解构赋值：</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params">&#123; name, age, gender, height = <span class="number">180</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, gender, height);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test2</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;波波&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">test2</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;波波&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">38</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">160</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>PS：解构赋值语法实际上是一种 模式匹配 + 变量赋值 的混合，只要等号两边的模式相同，左边的变量就会被赋予对应的值</p><p>如：<code>p: [x, &#123; y &#125;]</code> 模式中 p 是模式匹配，但不是变量赋值，而 x 和 y 是模式匹配 + 变量赋值</p><h2 id="箭头函数（Arrow-function）"><a href="#箭头函数（Arrow-function）" class="headerlink" title="箭头函数（Arrow function）"></a>箭头函数（<em>Arrow function</em>）</h2><p>箭头函数 是对函数表达式( 匿名函数 )的一种简写形式</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 函数名 = <span class="function">(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span> ... 形参N</span>) =&gt;</span> &#123;</span><br><span class="line">  函数体</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">简写规则：</span></span><br><span class="line"><span class="comment">  1. function 关键字改成 =&gt;</span></span><br><span class="line"><span class="comment">  2. 如果只有一个形参，那就可以省略形参小括号 ()</span></span><br><span class="line"><span class="comment">  3. 如果不只一个形参( 0 个或多个 )，那就不能省略形参小括号</span></span><br><span class="line"><span class="comment">  4. 如果函数体只有一句话，那就可以省略函数体的大括号 &#123;&#125;</span></span><br><span class="line"><span class="comment">  5. 如果函数体只有一句话，并且这一句话是 return 语句，那 return 关键字也可以省略</span></span><br><span class="line"><span class="comment">  6. 如果函数体不是一句话，那就不能省略这个大括号</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> fn1 = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> name + <span class="string">&quot;你好吗?&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = name =&gt; name + <span class="string">&quot;你好吗?&quot;</span>;</span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">let</span> fn5 = <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> age + <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn5</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;你好吗&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> age + <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>函数形参可以指定一个初始值，当该形参没有传递实参时则该参数的值就是初始值( 默认值 )</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b = <span class="number">10</span></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">10</span>) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数（Rest-Parameters）"><a href="#剩余参数（Rest-Parameters）" class="headerlink" title="剩余参数（Rest Parameters）"></a>剩余参数（<em>Rest Parameters</em>）</h3><p>如果函数的最后一个形参以<code>...</code>为前缀，则它将成为一个由剩余参数组成的数组</p><p>在箭头函数中不能通过 <code>arguments</code> 来获取实参</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params">...theArgs</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(theArgs.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">multiplier, ...theArgs</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> theArgs.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">element</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> multiplier * element;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h3 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h3><p>箭头函数中的 <code>this</code> 变量由上下文环境决定，而不是由 <code>new</code> 关键字来决定，因此箭头函数不能做为构造函数( new )来调用</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Fn</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="string">&#x27;超哥&#x27;</span>, <span class="number">20</span>) <span class="comment">// TypeError: Fn is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">persons</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;波波&#x27;</span>,</span><br><span class="line">        <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是1：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">            <span class="comment">// 上文环境</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是2：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是3：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>) <span class="comment">// 我的名字是： 波波</span></span><br><span class="line">                &#125;, <span class="number">1000</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">            <span class="comment">// 下文环境</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><h2 id="空值合并运算符"><a href="#空值合并运算符" class="headerlink" title="?? 空值合并运算符"></a>?? 空值合并运算符</h2><h2 id="？链判断运算符"><a href="#？链判断运算符" class="headerlink" title="？链判断运算符"></a>？链判断运算符</h2><h2 id="class-关键字"><a href="#class-关键字" class="headerlink" title="class 关键字"></a>class 关键字</h2><p>ES6 提供了 class 关键字，用来定义一个类</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用class声明语句来定义一个类 */</span></span><br><span class="line"><span class="keyword">class</span> 名称 [<span class="keyword">extends</span>] &#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用class表达式来定义一个类 */</span></span><br><span class="line"><span class="keyword">const</span> 名称 = <span class="keyword">class</span> [名称] [<span class="keyword">extends</span>] &#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle2</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>); <span class="comment">// Rectangle2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class 表达式</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Rectangle</span> = <span class="keyword">class</span> &#123; <span class="comment">// 匿名类必须赋值到变量，变量名将成为匿名类的名称</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">height, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">name</span>); <span class="comment">// Rectangle</span></span><br></pre></td></tr></table></figure><h3 id="类-class"><a href="#类-class" class="headerlink" title="类( class )"></a>类( class )</h3><p>JavaScript 语言中，创建实例对象的传统方法是通过构造函数，如果要实现继承则需要借助原型</p><p>而 ES6 中的 class 依然是建立在原型上的，因此 ES6 中的 class 可以看作是一个语法糖，它使 JavaScript 在语法上更像面向对象</p><p>Js 中使用 class 声明的类，实质上是一种特殊的函数，它只能使用 <code>new</code> 关键字来调用，并且 class 声明不会有提升</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Point</span>); <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Point</span> === <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面的案例可以看出Point类指向该类的构造函数</span></span><br><span class="line"><span class="comment">并且typeof检查Point类时也返回 function</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>PS：class 中的代码都执行在严格模式( strict mode )下。比如，构造函数，静态方法，原型方法，getter 和 setter 都在严格模式下执行</p><h3 id="构造方法-constructor"><a href="#构造方法-constructor" class="headerlink" title="构造方法( constructor )"></a>构造方法( constructor )</h3><p>constructor 是类中的一个特殊的方法，该方法用于创建和初始化一个由<code>class</code>创建的对象</p><p>一个类中只能有一个名为 “constructor” 的特殊方法。类中出现多个构造函数( constructor )方法将会抛出一个 SyntaxError 错误</p><p>如果没有指定构造函数( constructor )方法，则会使用一个默认的构造函数( constructor )来初始化实例</p><h3 id="实例属性-原型方法"><a href="#实例属性-原型方法" class="headerlink" title="实例属性 / 原型方法"></a>实例属性 / 原型方法</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  bar = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 实例属性bar</span></span><br><span class="line">  baz = <span class="string">&#x27;world&#x27;</span>; <span class="comment">// 实例属性baz</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123; <span class="comment">// 原型方法，该方法会添加在原型prototype中</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.bar&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.baz&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>).<span class="title function_">print</span>(); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><p>在 ES5 中要给实例对象添加属性需要在构造函数或方法内使用 this 来添加，如果要添加方法则会将方法添加构造函数的原型prototype上。而上面的写法相比 ES5 的写法更加简洁，一眼就能看出，<code>Foo</code>类有两个实例属性和一个原型方法</p><h3 id="getter-amp-setter-存取值方法"><a href="#getter-amp-setter-存取值方法" class="headerlink" title="getter &amp; setter ( 存取值方法 )"></a>getter &amp; setter ( 存取值方法 )</h3><p>在“类”的内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line">inst.<span class="property">prop</span> = <span class="number">123</span>; <span class="comment">// setter: 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inst.<span class="property">prop</span>) <span class="comment">// &#x27;getter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">  v = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">getV</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">v</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">setV</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">v</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">getV</span>); <span class="comment">// 100</span></span><br><span class="line">obj.<span class="property">setV</span> = <span class="number">200</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">getV</span>); <span class="comment">// 200</span></span><br></pre></td></tr></table></figure><h3 id="静态属性-静态方法"><a href="#静态属性-静态方法" class="headerlink" title="静态属性 / 静态方法"></a>静态属性 / 静态方法</h3><p>如果在一个属性或方法前，加上<code>static</code>关键字，则该属性或方法将不会被添加到实例上，它是直接通过类来访问或调用</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ES5 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">prop</span> = <span class="number">1</span> <span class="comment">// 静态属性</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">classMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property">prop</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ES6 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> prop = <span class="number">1</span>; <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123; <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">prop</span>) <span class="comment">// 静态方法中的 this 指向该类</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">foo.<span class="title function_">classMethod</span>() <span class="comment">// 报错：实例上找不到该方法</span></span><br></pre></td></tr></table></figure><h2 id="extends-关键字"><a href="#extends-关键字" class="headerlink" title="extends 关键字"></a>extends 关键字</h2><p>extends 关键字 用于创建一个类作为另一个类的一个子类</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;&#125; <span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123; <span class="comment">// 子类继承父类</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">// 调用父类的构造函数constructor，用来初始化子类</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>class 可以通过<code>extends</code>关键字实现继承，让子类继承父类的属性和方法</p><p>当子类继承某个父类时，子类必须先在<code>constructor</code>方法中使用<code>super()</code>来调用父类构造函数，否则就会报错</p><p>这是因为<code>extends</code>关键字在继承时，子类的实例需要通过父类得到。在调用<code>super()</code>方法时，会先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，因此如果不调用<code>super()</code>方法，子类就得不到自己的<code>this</code>对象</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> s = <span class="string">&#x27;static&#x27;</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color; <span class="comment">// ReferenceError</span></span><br><span class="line">    <span class="variable language_">super</span>(x, y);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color; <span class="comment">// 正确</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ColorPoint</span>.<span class="property">s</span>, <span class="title class_">ColorPoint</span>.<span class="property">__proto__</span> === <span class="title class_">Point</span>) <span class="comment">// static true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (十一) 垃圾回收与闭包</title>
    <link href="https://www.timeic.top/posts/5aacc580.html"/>
    <id>https://www.timeic.top/posts/5aacc580.html</id>
    <published>2023-10-24T09:15:09.000Z</published>
    <updated>2025-09-07T23:17:01.116Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="内存管理（Memory-Management）"><a href="#内存管理（Memory-Management）" class="headerlink" title="内存管理（Memory Management）"></a>内存管理（<em>Memory Management</em>）</h2><p>内存管理是指程序运行时的所需内存的管理。在编程语言中内存管理是在高级抽象层次上进行的，通常由编程语言的运行时环境或虚拟机来处理。它隐藏了底层计算机系统的细节，使开发人员能够更方便地分配和释放内存，而不需要考虑底层硬件和操作系统的具体实现</p><p>在编程语言中内存管理对于避免内存泄漏和提高程序性能至关重要。如果程序无法正确地管理内存，可能会导致内存泄漏、内存溢出和代码错误等问题</p><h2 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h2><p>内存生命周期是指程序运行时为其分配的内存从创建到最终释放所经历的过程，不管什么编程语言，内存生命周期基本是一致的，它可分为以下阶段：</p><ol><li>分配内存（allocate memory）：在程序中为变量、对象或某种数据结构分配内存空间</li><li>使用内存（use memory）：将数据写入已分配的内存空间，并读取存储在其中的数据( 内存的读和写 )</li><li>释放内存（free up memory）：不再需要此处内存时，将其<strong>返回/归还</strong>给操作系统以便其他程序使用</li></ol><blockquote><h3 id="JavaScript-中的内存管理"><a href="#JavaScript-中的内存管理" class="headerlink" title="JavaScript 中的内存管理"></a>JavaScript 中的内存管理</h3><h4 id="1-内存分配"><a href="#1-内存分配" class="headerlink" title="1. 内存分配"></a>1. 内存分配</h4><p>JavaScript 在定义变量（对象，字符串等）时自动进行了<strong>分配内存</strong>( allocate memory )</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>; <span class="comment">// 给数值变量分配内存</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;azerty&quot;</span>; <span class="comment">// 给字符串分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="literal">null</span></span><br><span class="line">&#125;; <span class="comment">// 给对象及其包含的值分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给数组及其包含的值分配内存（就像对象一样）</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;abra&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">// 给函数（可调用的对象）分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 分配一个 Date 对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>); <span class="comment">// 分配一个 DOM 元素</span></span><br></pre></td></tr></table></figure><h4 id="2-使用值"><a href="#2-使用值" class="headerlink" title="2. 使用值"></a>2. 使用值</h4><p>使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数</p><h4 id="3-当内存不在需要使用时释放"><a href="#3-当内存不在需要使用时释放" class="headerlink" title="3. 当内存不在需要使用时释放"></a>3. 当内存不在需要使用时释放</h4><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“哪些被分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它</p><p>高级语言解释器嵌入了“垃圾回收器”，它的主要工作是找到那些不在使用的内存，并自动将其释放。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的（无法通过某种算法解决）</p></blockquote><h2 id="垃圾回收（Garbage-Collection）"><a href="#垃圾回收（Garbage-Collection）" class="headerlink" title="垃圾回收（Garbage Collection）"></a>垃圾回收（<em>Garbage Collection</em>）</h2><p><strong>垃圾回收</strong>( Garbage Collection )是指一种自动的内存管理机制。像 C/C++ 这样的底层语言一般都会提供相应的内存管理接口来手动管理内存，而 JavaScript/Python/Go 这类语言都有自己的垃圾回收机制来自动管理内存</p><p>垃圾回收的核心就是查找哪些对象在未来的程序执行中，将不会被访问，并释放这些对象所占用的内存</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><p>垃圾回收算法主要依赖于引用的概念。在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。例如，一个 JavaScript 对象具有对它原型的引用（隐式引用）和对它属性的引用（显式引用）</p><h3 id="引用计数（Reference-Counting）"><a href="#引用计数（Reference-Counting）" class="headerlink" title="引用计数（Reference Counting）"></a>引用计数（<em>Reference Counting</em>）</h3><p>这是最初级的垃圾收集算法。它通过跟踪每个对象被引用的次数来确定何时可以释放对象所占用的内存</p><p>当一个对象被引用时，其引用计数值加一。当一个对象的引用被取消/删除时，其引用计数值减一。当引用计数值为零时，表示该对象没有被引用( 不再被使用 )，可以安全地释放其内存</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 两个对象被创建，一个被变量 o 引用，另一个则被 “这个对象” 的属性引用</span></span><br><span class="line"><span class="comment">// 很显然，两个对象都不会被垃圾回收</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = o; <span class="comment">// 变量 o2 是对 “这个对象” 的第 2 次引用</span></span><br><span class="line"></span><br><span class="line">o = <span class="number">1</span>; <span class="comment">// 现在，“这个对象” 只有一个变量 o2 的引用了，“这个对象” 的原始引用 o 已经没有了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oa = o2.<span class="property">a</span>; <span class="comment">// 引用 “这个对象” 的 a 属性所引用的对象</span></span><br><span class="line"></span><br><span class="line">o2 = <span class="string">&quot;yo&quot;</span>; <span class="comment">// “这个对象” 的引用数已经为零了，可以被垃圾回收了</span></span><br><span class="line">           <span class="comment">// 但是 “这个对象” 的属性 a 所引用的对象还在被 oa 引用，所以它还不会回收</span></span><br><span class="line"></span><br><span class="line">oa = <span class="literal">null</span>; <span class="comment">// 现在 a 属性所引用的对象为零引用了，可以被垃圾回收了</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="限制：循环引用（Circular-Reference）"><a href="#限制：循环引用（Circular-Reference）" class="headerlink" title="限制：循环引用（Circular Reference）"></a>限制：循环引用（<em>Circular Reference</em>）</h4><p>该算法有个限制：无法处理循环引用的事例。在下面的例子中，两个对象被创建，并互相引用，形成了一个循环。它们被调用之后会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> o2 = &#123;&#125;;</span><br><span class="line">  o.<span class="property">a</span> = o2; <span class="comment">// o 引用 o2</span></span><br><span class="line">  o2.<span class="property">a</span> = o; <span class="comment">// o2 引用 o</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure></blockquote><h3 id="标记-清除（Mark-and-Sweep）"><a href="#标记-清除（Mark-and-Sweep）" class="headerlink" title="标记 - 清除（Mark and Sweep）"></a>标记 - 清除（<em>Mark and Sweep</em>）</h3><p>这个算法把“对象是否不再需要”简化定义为“对象是否可获得”( 对象可达性 )</p><p><img src="https://cdn3.tianli0.top/gh/k34869/images/s/20230629155157" alt="根可达性"></p><p>标记清除算法主要包括两个阶段：标记阶段和清除阶段</p><p>在标记阶段，算法从根对象开始，遍历可访问的对象并标记为活动对象。在 JavaScript 里，根对象就是全局对象。这样，所有与根对象直接或间接相关的对象都会被标记为活动对象，而未被标记的对象则被认为是垃圾对象</p><p>在清除阶段，垃圾回收器会扫描整个堆内存，回收未被标记的垃圾对象所占用的内存空间，并将其释放供下次使用</p><p>标记清除算法是周期执行的，通常，在程序运行过程中，当达到一定条件（例如内存占用超过某个阈值）或特定时间间隔时，垃圾回收器会触发标记-清除算法进行垃圾回收操作</p><p>标记清除算法可以有效地找到并清除不再使用的垃圾对象，但它也有一些缺点。考虑到内存安全，标记清除算法必须停止应用程序的执行以进行垃圾回收操作，这可能会引起一定的停顿时间，对于实时应用或需要快速响应的系统来说，这可能会产生明显的延迟，并且可能影响用户体验。其次，标记清除算法在清除阶段需要遍历整个堆内存，这个过程的时间复杂度与存活对象的数量成正比，因此对于大规模的内存空间和活跃对象较多的程序，可能会带来较高的开销</p><p>从 2012 年起，所有现代浏览器都使用了标记 - 清除垃圾回收算法。所有对 JavaScript 垃圾回收算法的改进都是基于标记 - 清除算法的改进，并没有改进标记 - 清除算法本身和它对“对象是否不再需要”的简化定义</p><blockquote><h4 id="循环引用不再是问题了"><a href="#循环引用不再是问题了" class="headerlink" title="循环引用不再是问题了"></a>循环引用不再是问题了</h4><p>在上面的示例中，函数调用返回之后，两个对象从全局对象出发无法获取。因此，他们将会被垃圾回收器回收</p></blockquote><h2 id="闭包（Closure）"><a href="#闭包（Closure）" class="headerlink" title="闭包（Closure）"></a>闭包（<em>Closure</em>）</h2><p>闭包是 JavaScript 语言中强大而又神秘的特性之一</p><p>通常闭包是指一个能够访问自由变量的函数，这里的自由变量是指作用域外的变量。简单的说，闭包是一个内部函数，它可以访问外部函数作用域中的数据</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="comment">// 外部函数</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123; <span class="comment">// 内部函数</span></span><br><span class="line">count++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ff = <span class="title function_">fn</span>() <span class="comment">// 此时这个ff函数代表的就是fn1函数</span></span><br><span class="line"><span class="comment">// 执行ff函数</span></span><br><span class="line"><span class="title function_">ff</span>() <span class="comment">// 11</span></span><br><span class="line"><span class="title function_">ff</span>() <span class="comment">// 12</span></span><br><span class="line"><span class="title function_">ff</span>() <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p>在上面的案例中内部函数引用了外部函数的变量，并将内部函数返回到外部调用</p><p>即使外部函数执行结束，内部函数仍能访问外部函数的变量</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>闭包的主要目的是实现状态的保留和封装。它提供了一种机制，可以在函数内部创建一个包含函数及其相关状态（变量）的封闭环境，并将其作为一个整体返回或传递给其他函数</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>闭包可以防止变量或参数被外部污染( 变量只在闭包内可访问 )</p><p>闭包中的变量不会被垃圾回收( 变量持久化 )。如果变量一直被引用，无法被垃圾回收，可能会导致内存泄漏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (十) 正则表达式</title>
    <link href="https://www.timeic.top/posts/658fafcf.html"/>
    <id>https://www.timeic.top/posts/658fafcf.html</id>
    <published>2023-09-26T03:15:02.000Z</published>
    <updated>2025-09-07T23:17:01.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>正则表达式（Regular Expression）</strong> 由具有特定规则的字符组合而成（规则字符串），用来描述一系列符合该规则的字符串的筛选逻辑</p><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><p>RegExp 对象是 js 的内置对象，用于将文本与一个模式匹配</p><p><strong>1.使用 正则表达式字面量 来创建一个RegExp类型对象</strong></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/模式/</span>选项</span><br></pre></td></tr></table></figure><p><strong>2.使用 构造函数 来创建一个RegExp类型对象</strong></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(模式, 选项)</span><br></pre></td></tr></table></figure><p>属性：</p><ul><li><code>global</code> 判断是否设置了 “g” 选项（true / false）</li><li><code>ignoreCase</code> 判断是否设置了 “i” 选项（true / false）</li><li><code>multiline</code> 判断是否设置了 “m” 选项（true / false）</li><li><code>dotAll</code> 判断是否设置了 “s” 选项（true / false）</li><li><code>lastIndex</code> 用于规定下次匹配的起始位置（索引），该属性的值需要正则表达式设置了 g 选项才有效，否则该值一直为 0</li><li><code>source</code> 返回正则表达式模式（一个字符串）</li><li><code>flags</code> 返回正则表达式选项（一个字符串）</li></ul><p>方法：</p><ul><li><p><code>exec()</code> 在输入字符串中搜索一个匹配的字符串，搜索到则返回一个结果数组</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正则表达式.<span class="title function_">exec</span>(输入字符串)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回值：结果数组</span></span><br><span class="line"><span class="comment">- [下标]: 索引0为匹配结果字符串，索引1-任意数字为被捕获的字符串</span></span><br><span class="line"><span class="comment">- input: 输入字符串</span></span><br><span class="line"><span class="comment">- index: 匹配结果在输入字符串中的位置(索引)</span></span><br><span class="line"><span class="comment">- groups: 捕获命名组对象</span></span><br><span class="line"><span class="comment">如果正则表达式设置了 g 选项，则会根据RegExp类型对象中的lastIndex属性值，来决定下一次匹配的位置，</span></span><br><span class="line"><span class="comment">即在下1次调用该方法时，返回下1个匹配结果及其相关属性和捕获组，直到最后一个结果为止</span></span><br><span class="line"><span class="comment">如果正则表达式没设置 g 选项，则会在每次调用时都返回第1个匹配结果及其相关属性和捕获组</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p><code>test()</code> 检测正则表达式与输入字符串是否匹配，匹配则返回 true，不匹配则返回 false</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正则表达式.<span class="title function_">test</span>(输入字符串)</span><br></pre></td></tr></table></figure></li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;table football&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;foo*&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> globalRegex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;foo*&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">test</span>(str)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalRegex.<span class="property">lastIndex</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalRegex.<span class="title function_">test</span>(str));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalRegex.<span class="property">lastIndex</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalRegex.<span class="title function_">test</span>(str));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式模式（RegexPattern）"><a href="#正则表达式模式（RegexPattern）" class="headerlink" title="正则表达式模式（RegexPattern）"></a>正则表达式模式（<em>RegexPattern</em>）</h2><p>正则表达式模式可以使用任何普通字符串进行匹配，如：abc、123</p><p>正则表达式模式还可以使用一些具有特殊意义的字符（元字符）进行匹配，如：[A-z]、{4,8}</p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>描述：与一组字符中的任何一个字符匹配</p><table><thead><tr><th>字符类</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><code>[字符组]</code></td><td>匹配 字符组 中的任何单一字符</td><td><code>[abc]</code></td><td><code>&quot;rgba&quot;</code> 匹配结果：<code>&quot;b&quot;</code>、<code>&quot;a&quot;</code></td></tr><tr><td><code>[^字符组]</code></td><td>求反：匹配不在 字符组 中的任何字符</td><td><code>[^aei]</code></td><td><code>&quot;reign&quot;</code> 匹配结果：<code>&quot;r&quot;</code>、<code>&quot;g&quot;</code> 和 <code>&quot;n&quot;</code></td></tr><tr><td><code>[first-last]</code></td><td>字符范围：匹配从第一个至最后一个的范围内的任何字符</td><td><code>[A-Z]</code></td><td><code>&quot;AB123&quot;</code> 匹配结果：<code>&quot;A&quot;</code> 和 <code>&quot;B&quot;</code></td></tr><tr><td><code>.</code></td><td>通配符：匹配除 <code>\n</code>(换行符) 之外的任何字符</td><td><code>a.e</code></td><td><code>&quot;water&quot;</code> 匹配结果：<code>&quot;ate&quot;</code></td></tr><tr><td><code>\w</code></td><td>匹配任何 单词字符(字母 数字 _)</td><td><code>\w</code></td><td><code>&quot;ID A1.3&quot;</code> 匹配结果：<code>&quot;I&quot;</code>、<code>&quot;D&quot;</code>、<code>&quot;A&quot;</code>、<code>&quot;1&quot;</code> 和 <code>&quot;3&quot;</code></td></tr><tr><td><code>\W</code></td><td>匹配任何 非单词字符(非字母 数字 _)</td><td><code>\W</code></td><td><code>&quot;ID A1.3&quot;</code> 匹配结果：<code>&quot; &quot;</code> 和 <code>.</code></td></tr><tr><td><code>\s</code></td><td>匹配任何 空白字符(空格 换行)</td><td><code>\w\s</code></td><td><code>&quot;ID A1.3&quot;</code> 匹配结果：<code>&quot;D &quot;</code></td></tr><tr><td><code>\S</code></td><td>匹配任何 非空白字符(非空格 换行)</td><td><code>\s\S</code></td><td><code>&quot;int val&quot;</code> 匹配结果：<code>&quot; v&quot;</code></td></tr><tr><td><code>\d</code></td><td>匹配任何 十进制数字字符</td><td><code>\d</code></td><td><code>&quot;4 = IV&quot;</code> 匹配结果：<code>&quot;4&quot;</code></td></tr><tr><td><code>\D</code></td><td>匹配任何 非十进制数字字符</td><td><code>\D</code></td><td><code>&quot;4 = IV&quot;</code> 匹配结果： <code>&quot; &quot;</code>、<code>&quot;=&quot;</code>、<code>&quot; &quot;</code>、<code>&quot;I&quot;</code> 和 <code>&quot;V&quot;</code></td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>描述：上一个元素（字符、分组或字符类）必须出现指定次数才能匹配</p><table><thead><tr><th>量词（限定符）</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><code>*</code></td><td>上一个元素必须出现0次或多次</td><td><code>a.*c</code></td><td><code>&quot;abcbc&quot;</code> 匹配结果：<code>&quot;abcbc&quot;</code></td></tr><tr><td><code>+</code></td><td>上一个元素必须出现1次或多次</td><td><code>&quot;be+&quot;</code></td><td><code>&quot;been&quot;</code> 匹配结果：<code>&quot;bee&quot;</code></td></tr><tr><td><code>?</code></td><td>上一个元素必须出现0次或1次</td><td><code>&quot;rai?&quot;</code></td><td><code>&quot;rain&quot;</code> 匹配结果：<code>&quot;rai&quot;</code></td></tr><tr><td><code>&#123;n&#125;</code></td><td>上一个元素必须出现 <em>n</em> 次</td><td><code>&quot;,\d&#123;3&#125;&quot;</code></td><td><code>&quot;1,043.6&quot;</code> 匹配结果：<code>&quot;,043&quot;</code></td></tr><tr><td><code>&#123;n,&#125;</code></td><td>上一个元素必须出现 <em>n</em> 次以上</td><td><code>&quot;\d&#123;2,&#125;&quot;</code></td><td><code>&quot;166&quot;</code>, <code>&quot;29&quot;</code>, <code>&quot;1930&quot;</code></td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>上一个元素必须出现 n 到 m 次</td><td><code>&quot;\d&#123;3,5&#125;&quot;</code></td><td><code>&quot;166&quot;</code>, <code>&quot;17668&quot;</code></td></tr><tr><td><code>*?</code></td><td>惰性匹配：上一个元素必须出现0次或多次，但次数尽可能少</td><td><code>a.*?c</code></td><td><code>&quot;abcbc&quot;</code> 匹配结果：<code>&quot;abc&quot;</code></td></tr><tr><td><code>+?</code></td><td>惰性匹配：上一个元素必须出现1次或多次，但次数尽可能少</td><td><code>&quot;be+?&quot;</code></td><td><code>&quot;been&quot;</code> 匹配结果：<code>&quot;be&quot;</code></td></tr><tr><td><code>??</code></td><td>惰性匹配：上一个元素必须出现0次或1次，但次数尽可能少</td><td><code>&quot;rai??&quot;</code></td><td><code>&quot;rain&quot;</code> 匹配结果：<code>&quot;ra&quot;</code></td></tr><tr><td><code>&#123;n,&#125;?</code></td><td>惰性匹配：上一个元素必须出现 <em>n</em> 次以上，但次数尽可能少</td><td><code>&quot;\d&#123;2,&#125;?&quot;</code></td><td><code>&quot;166&quot;</code>, <code>&quot;29&quot;</code>, <code>&quot;1930&quot;</code></td></tr><tr><td><code>&#123;n,m&#125;?</code></td><td>惰性匹配：上一个元素必须出现 n 到 m 次，但次数尽可能少</td><td><code>&quot;\d&#123;3,5&#125;?&quot;</code></td><td><code>&quot;193024&quot;</code> 匹配结果：<code>&quot;193&quot;</code> 和 <code>&quot;024&quot;</code></td></tr></tbody></table><h3 id="定位点"><a href="#定位点" class="headerlink" title="定位点"></a>定位点</h3><p>描述：指定的字符串必须出现在匹配的位置</p><table><thead><tr><th>定位点</th><th>描述</th><th>模式</th><th>匹配</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配必须出现在输入字符串的开头，在多行模式下，匹配必须出现在输入字符串中所在行的开头</td><td><code>^\d&#123;3&#125;</code></td><td><code>&quot;901-333-&quot;</code> 匹配结果：<code>&quot;901&quot;</code></td></tr><tr><td><code>$</code></td><td>匹配必须出现在输入字符串的末尾，在多行模式下，匹配必须出现在输入字符串中所在行的末尾</td><td><code>-\d&#123;3&#125;$</code></td><td><code>&quot;-901-333&quot;</code> 匹配结果：<code>&quot;-333&quot;</code></td></tr><tr><td><code>\b</code></td><td>匹配必须出现在 <code>\w</code> （单词）和 <code>\W</code> （非单词）字符之间的边界上</td><td><code>\b\w+\s\w+\b</code></td><td><code>&quot;them theme them them&quot;</code> 匹配结果：<code>&quot;them theme&quot;</code> 和 <code>&quot;them them&quot;</code></td></tr><tr><td><code>\B</code></td><td>匹配不得出现在 <code>\b</code> 边界上</td><td><code>\Bend\w*\b</code></td><td><code>&quot;end sends endure lender&quot;</code> 匹配结果：<code>&quot;ends&quot;</code> 和 <code>&quot;ender&quot;</code></td></tr></tbody></table><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>描述：将组中匹配的文本作为一个整体处理</p><table><thead><tr><th>分组</th><th>描述</th><th align="left">模式</th><th>匹配</th></tr></thead><tbody><tr><td><code>(子表达式)</code></td><td>捕获组：捕获匹配的<strong>子表达式</strong>（任何正则表达式）并将其分配到一个从 1 开始的序号中</td><td align="left"><code>(\w)\1</code></td><td><code>&quot;deep&quot;</code> 匹配结果：<code>&quot;ee&quot;</code></td></tr><tr><td>`</td><td>`</td><td align="left">或运算符：匹配以竖线 (`</td><td>`) 字符分隔的任何一个元素</td></tr><tr><td><code>\数字</code></td><td>反向引用：在同一正则表达式中引用捕获组中匹配的字符串</td><td align="left"><code>(\w)\1</code></td><td><code>&quot;deep&quot;</code> 匹配结果：<code>&quot;ee&quot;</code></td></tr><tr><td><code>(?&lt; 名称&gt;子表达式)</code> 或 <code>(?&#39; 名称&#39;子表达式)</code></td><td>捕获命名组：将匹配的子表达式捕获到一个命名组中</td><td align="left"><code>(?&lt;double&gt;\w)\k&lt;double&gt;</code></td><td><code>&quot;deep&quot;</code> 匹配结果：<code>&quot;ee&quot;</code></td></tr><tr><td><code>(?:子表达式)</code></td><td>非捕获组</td><td align="left"><code>Write(?:Line)?</code></td><td><code>&quot;WriteLine()&quot;</code> 匹配结果：<code>&quot;WriteLine&quot;</code></td></tr><tr><td><code>(?=子表达式)</code></td><td>向前断言(非捕获)：上一个元素必须跟随在子表达式匹配的前面，子表达式不会作为匹配结果</td><td align="left"><code>\b\w+\b(?=.+and.+)</code></td><td><code>&quot;cats, dogs and some mice.&quot;</code> 匹配结果：<code>&quot;cats&quot;</code>, <code>&quot;dogs&quot;</code></td></tr><tr><td><code>(?!子表达式)</code></td><td>向前否定断言(非捕获)：上一个元素不能跟随在子表达式匹配的前面，子表达式不会作为匹配结果</td><td align="left"><code>\b\w+\b(?!.+and.+)</code></td><td><code>&quot;cats, dogs and some mice.&quot;</code> 匹配结果：<code>&quot;and&quot;</code>, <code>&quot;some&quot;</code>, <code>&quot;mice&quot;</code></td></tr><tr><td><code>(?&lt;=子表达式)</code></td><td>向后断言(非捕获)：上一个元素必须跟随在子表达式匹配的后面，子表达式不会作为匹配结果</td><td align="left"><code>\b\w+\b(?&lt;=.+and.+)</code></td><td><code>&quot;cats, dogs and some mice.&quot;</code> 匹配结果：<code>&quot;some&quot;</code>, <code>&quot;mice&quot;</code></td></tr><tr><td><code>(?&lt;!子表达式)</code></td><td>向后否定断言(非捕获)：上一个元素不能跟随在子表达式匹配的后面，子表达式不会作为匹配结果</td><td align="left"><code>\b\w+\b(?&lt;!.+and.+)</code></td><td><code>&quot;cats, dogs and some mice.&quot;</code> 匹配结果：<code>&quot;cats&quot;</code>, <code>&quot;dogs&quot;</code>, <code>&quot;and&quot;</code></td></tr></tbody></table><h3 id="替代属性-静态"><a href="#替代属性-静态" class="headerlink" title="替代属性 ( 静态 )"></a>替代属性 ( 静态 )</h3><p>说明：非标准属性，但大部分浏览器都进行了实现</p><table><thead><tr><th>替代属性</th><th>描述</th></tr></thead><tbody><tr><td>RegExp.$1-$9</td><td>含有分组中指定位置的字符串，可以在 <code>String.replace</code> 方法进行分组位置替换</td></tr><tr><td>RegExp.input ($_)</td><td>含有正则表达式所匹配的字符串</td></tr><tr><td>RegExp.lastMatch ($&amp;)</td><td>含有正则表达式最后匹配到的字符串</td></tr><tr><td>RegExp.lastParen ($+)</td><td>含有最后一个分组匹配到的内容</td></tr><tr><td>RegExp.leftContext ($&#x60;)</td><td>含有最新匹配的左侧字符串</td></tr><tr><td>RegExp.rightContext ($’)</td><td>含有最新匹配的右侧字符串</td></tr></tbody></table><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;快乐幸福&quot;</span></span><br><span class="line"><span class="comment">// 单词位置替换</span></span><br><span class="line"><span class="keyword">var</span> b = s.<span class="title function_">replace</span>(<span class="regexp">/(快乐)(幸福)/</span>, <span class="string">&quot;$2-$1&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//&quot;幸福-快乐&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/hi/g</span></span><br><span class="line">re.<span class="title function_">test</span>(<span class="string">&quot;hi there!&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">input</span>) <span class="comment">// &quot;hi there!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例3 */</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Name: Tom, Age: 18&quot;</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/Name: (\w+), Age: (\d+)/</span></span><br><span class="line">str.<span class="title function_">match</span>(regex)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">lastMatch</span>) <span class="comment">// 输出 &quot;Name: Tom, Age: 18&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">lastParen</span>) <span class="comment">// 输出 &quot;18&quot;（最后一个括号匹配的内容）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例4 */</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/world/g</span></span><br><span class="line">re.<span class="title function_">test</span>(<span class="string">&quot;hello world!&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">leftContext</span>) <span class="comment">// &quot;hello &quot;</span></span><br></pre></td></tr></table></figure><h3 id="贪婪匹配与惰性匹配"><a href="#贪婪匹配与惰性匹配" class="headerlink" title="贪婪匹配与惰性匹配"></a>贪婪匹配与惰性匹配</h3><p>在使用 <code>*</code>、<code>+</code>、<code>&#123;n,&#125;</code>、<code>&#123;n,m&#125;</code> 等量词进行匹配时，默认会匹配尽可能多的字符（贪婪匹配），如果在这些量词后面后加一个 <code>?</code>，就会匹配尽可能少的字符（惰性匹配）</p><h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><p>捕获是将正则表达式匹配到的字符串暂存起来，其中多个捕获组捕获的字符串会从1开始编号，\1表示第一个被捕获的字符串，\2是第二个，以此类推…</p><h3 id="嵌套组"><a href="#嵌套组" class="headerlink" title="嵌套组"></a>嵌套组</h3><p>括号可以嵌套使用，这种情况下，编号从左向右，从外向内</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;span class=&quot;my&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> regexp = <span class="regexp">/&lt;(([a-z]+)\s*([^&gt;]*))&gt;/</span>;</span><br><span class="line"><span class="keyword">let</span> result = str.<span class="title function_">match</span>(regexp);</span><br><span class="line"><span class="title function_">alert</span>(result[<span class="number">0</span>]); <span class="comment">// &lt;span class=&quot;my&quot;&gt;</span></span><br><span class="line"><span class="title function_">alert</span>(result[<span class="number">1</span>]); <span class="comment">// span class=&quot;my&quot;</span></span><br><span class="line"><span class="title function_">alert</span>(result[<span class="number">2</span>]); <span class="comment">// span</span></span><br><span class="line"><span class="title function_">alert</span>(result[<span class="number">3</span>]); <span class="comment">// class=&quot;my&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/images/image/20220810090335" alt="groups"></p><h2 id="正则表达式选项（RegexOption）"><a href="#正则表达式选项（RegexOption）" class="headerlink" title="正则表达式选项（RegexOption）"></a>正则表达式选项（<em>RegexOption</em>）</h2><ul><li><code>i</code> 匹配时不区分字母大小写</li><li><code>g</code> 全局(global)搜索，匹配时会查找输入字符串中的所有匹配结果，默认情况会在找到第一个匹配后停止</li><li><code>m</code> 多行(multiline)模式，在使用 <code>^</code>、<code>$</code> 进行位置匹配时，默认会匹配整个字符串的开头或结束位置（忽略换行），设置该选项后，则会匹配字符串中每一行的开头或结束位置</li><li><code>s</code> dotall模式，允许点 <code>.</code> 匹配换行符 <code>\n</code></li></ul><h3 id="支持正则表达式的-String-对象方法"><a href="#支持正则表达式的-String-对象方法" class="headerlink" title="支持正则表达式的 String 对象方法"></a>支持正则表达式的 String 对象方法</h3><ul><li><code>match()</code> 查找一个或多个正则表达式的匹配，并返回一个结果数组</li></ul><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="title function_">match</span>(正则表达式)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果正则表达式设置了 g 选项，则返回与正则表达式匹配的所有结果的数组列表</span></span><br><span class="line"><span class="comment">如果正则表达式没设置 g 选项，则仅返回第一个匹配结果及其相关属性和捕获组</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><code>search()</code> 搜索与正则表达式相匹配的值，并返回该值所在位置(索引)</li></ul><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="title function_">search</span>(正则表达式)</span><br></pre></td></tr></table></figure><ul><li><code>replace()</code> 将字符串中指定内容替换为新的内容，并返回替换后内容</li></ul><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="title function_">replace</span>(正则表达式|替换字符串, 被替换内容)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">被替换内容中可以使用特殊字符</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li><code>split()</code> 将字符串拆分成数组并返回</li></ul><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串.<span class="title function_">split</span>(分割字符串|正则表达式)</span><br></pre></td></tr></table></figure><p>正则表达式在线测试工具：<a href="https://regex101.com/">https://regex101.com</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (九) 异常处理与严格模式</title>
    <link href="https://www.timeic.top/posts/fe93d088.html"/>
    <id>https://www.timeic.top/posts/fe93d088.html</id>
    <published>2023-08-06T08:02:22.000Z</published>
    <updated>2025-09-07T23:17:01.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Error-对象"><a href="#Error-对象" class="headerlink" title="Error 对象"></a>Error 对象</h2><p>当代码运行时发生错误，会立刻中止当前 JavaScript 的执行，同时会创建新的 <code>Error</code> 对象，并将其<strong>抛出</strong>( throw )</p><p>错误类型：</p><ul><li><p><code>SyntaxError</code> 语法错误，当 JavaScript 引擎在解析代码时，如果遇到不符合语法规范的 tokens 或 token顺序时，就会抛出 SyntaxError</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([) <span class="comment">//SyntaxError: Unexpected token &#x27;)&#x27;</span></span><br><span class="line"><span class="keyword">var</span> = <span class="number">1</span>; <span class="comment">//SyntaxError: Unexpected token &#x27;=&#x27;</span></span><br><span class="line">&#123; <span class="comment">//SyntaxError: Unexpected end of input</span></span><br></pre></td></tr></table></figure></li><li><p><code>ReferenceError</code> 引用错误，当一个不存在的变量被引用时发生的错误</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问未声明的变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(author); <span class="comment">//ReferenceError: b is not defined</span></span><br><span class="line"><span class="comment">//给函数调用表达式赋值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title function_">fun</span>() = <span class="number">123</span>; <span class="comment">//ReferenceError: Invalid left-hand side in assignment</span></span><br></pre></td></tr></table></figure></li><li><p><code>RangeError</code> 范围错误，当一个值不在其所允许的范围中时则抛出该错误</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组长度为负数</span></span><br><span class="line">[].<span class="property">length</span> = -<span class="number">1</span>; <span class="comment">//RangeError: Invalid array length</span></span><br><span class="line"><span class="comment">//Number 对象的方法参数超出范围</span></span><br><span class="line"><span class="keyword">const</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">12.34</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(-<span class="number">1</span>)); <span class="comment">//RangeError: toFixed() digits argument must be between 0 and 20 at Number.toFixed</span></span><br><span class="line"><span class="comment">//调用栈超过最大值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//RangeError: Maximum call stack size exceeded</span></span><br></pre></td></tr></table></figure></li><li><p><code>TypeError</code> 类型错误，值的类型或参数不是预期类型时发生的错误</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用不存在的方法</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.<span class="title function_">run</span>(); <span class="comment">//TypeError: person.run is not a function</span></span><br><span class="line"><span class="comment">//new 操作符后面不是构造函数</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="number">2</span>(); <span class="comment">//TypeError: 2 is not a constructor</span></span><br></pre></td></tr></table></figure></li><li><p><code>URIError</code> URI错误，使用全局 URI 处理函数而产生的错误</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">&quot;%&quot;</span>); <span class="comment">//URIError: URI malformed</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%&quot;</span>); <span class="comment">//URIError: URI malformed</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DiyError</span>(<span class="params">message</span>) &#123;</span><br><span class="line">  <span class="comment">// 定义错误类型消息</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">message</span> = message || <span class="string">&#x27;默认信息&#x27;</span>;</span><br><span class="line">  <span class="comment">// 定义错误类型名称</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;DiyError&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserError</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line"><span class="title class_">UserError</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">DiyError</span>;</span><br></pre></td></tr></table></figure><p>上面代码自定义一个错误对象<code>DiyError</code>，让它继承<code>Error</code>对象。然后，就可以生成这种自定义类型的错误了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抛出一个 DiyError 类型错误</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DiyError</span>(<span class="string">&#x27;这是自定义的错误！&#x27;</span>);</span><br></pre></td></tr></table></figure><p>PS：<code>throw</code>语句的作用是手动中断程序执行，抛出一个错误</p><h2 id="try…catch-语句"><a href="#try…catch-语句" class="headerlink" title="try…catch 语句"></a>try…catch 语句</h2><p>一旦发生错误，程序就中止执行了。JavaScript 提供了<code>try...catch</code>语句，允许对错误进行处理，选择是否往下执行</p><p>例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// error 为错误类型对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">name</span> + <span class="string">&quot;: &quot;</span> + error.<span class="property">message</span>); <span class="comment">// Error: 出错了!</span></span><br><span class="line">  <span class="comment">// e.stack 调用栈信息，用于定位错误代码位置</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">stack</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// finally 块最后执行，可以省略</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;最后执行&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 try 块中的代码，发生错误时，会立即执行 catch 块中的代码，并将发生错误的错误对象作为 catch 块的参数传递( 可以省略 )，你可以在 catch 块中决定是否让程序继续执行。而 finally 块中的代码会在 catch 块执行结束后执行，用于做一些资源清理操作</p><p>例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  foo.<span class="title function_">bar</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 根据不同的错误类型去执行不同的操作</span></span><br><span class="line">  <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">EvalError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">name</span> + <span class="string">&quot;: &quot;</span> + e.<span class="property">message</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="title class_">RangeError</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">name</span> + <span class="string">&quot;: &quot;</span> + e.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>在ES5中增加了一种运行模式，即严格模式（strict mode），该模式可以使JavaScript在更严格的条件下运行</p><p>严格模式的目的：</p><ol><li>消除 Js 语法的一些不合理、不严谨之处，减少一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>提高编译器效率，提升执行速度</li><li>为未来新版本的 JavaScript 做好铺垫</li></ol><h3 id="开启严格模式"><a href="#开启严格模式" class="headerlink" title="开启严格模式"></a>开启严格模式</h3><p>通过 <code>&quot;use strict&quot;</code> 这个特殊语句来开启严格模式</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// &quot;use strict&quot; 语句可作用与全局和函数（作用域）</span></span><br></pre></td></tr></table></figure><h3 id="开启严格模式后的变化"><a href="#开启严格模式后的变化" class="headerlink" title="开启严格模式后的变化"></a>开启严格模式后的变化</h3><p><strong>1.禁止意外创建全局变量</strong></p><p>在非严格模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  a = <span class="number">200</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 200</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>; <span class="comment">//开启严格模式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  w = <span class="number">200</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(w); <span class="comment">//抛出异常，w is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(w); <span class="comment">//抛出异常，w is not defined</span></span><br></pre></td></tr></table></figure><p><strong>2.静默失败（不报错也没生效）转为抛出异常</strong></p><p>例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在非严格模式下为只读属性赋值 */</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&quot;x&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">obj1.<span class="property">x</span> = <span class="number">9</span>; <span class="comment">// 静默失败</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在严格模式下为只读属性赋值 */</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&quot;x&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">obj1.<span class="property">x</span> = <span class="number">9</span>; <span class="comment">// 抛出 TypeError 错误</span></span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在非严格模式下为不可扩展对象的新属性赋值 */</span> </span><br><span class="line"><span class="keyword">var</span> fixed = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(fixed);</span><br><span class="line">fixed.<span class="property">newProp</span> = <span class="string">&quot;ohai&quot;</span>; <span class="comment">// 静默失败</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在严格模式下为不可扩展对象的新属性赋值 */</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> fixed = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(fixed);</span><br><span class="line">fixed.<span class="property">newProp</span> = <span class="string">&quot;ohai&quot;</span>; <span class="comment">// 抛出 TypeError 错误</span></span><br></pre></td></tr></table></figure><p>例3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在非严格模式下使用 delete 运算符未删除成功 */</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">delete</span> x; <span class="comment">// 静默失败</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&quot;x&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">configurable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="keyword">delete</span> obj1.<span class="property">x</span>; <span class="comment">// 静默失败</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在严格模式下使用 delete 运算符未删除成功 */</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">delete</span> x; <span class="comment">// 抛出 SyntaxError 错误</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj1, <span class="string">&quot;x&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">configurable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="keyword">delete</span> obj1.<span class="property">x</span>; <span class="comment">// 抛出 TypeError 错误</span></span><br></pre></td></tr></table></figure><p><strong>3.禁止函数中出现重复的参数名</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 非严格模式 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, a, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + a + c; <span class="comment">// 3 + 3 + 4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 严格模式 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, a, c</span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> a + a + c; <span class="comment">// 这里会出错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><strong>4.禁止使用八进制数字</strong>（0开头）</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">010</span> <span class="comment">// 抛出 SyntaxError 错误</span></span><br><span class="line"><span class="comment">//可以使用ES6中新增的 0o 开头来表示八进制</span></span><br></pre></td></tr></table></figure><p><strong>5.禁止将 eval 作为标识符</strong></p><p>eval() 是全局对象中的方法，作用是将一个字符串作为 Js 代码执行，如：<code>eval(&quot;var a = 666;console.log(a)&quot;)</code>，在严格模式中 eval 不能作为标识符</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 非严格模式 */</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">17</span>; <span class="comment">// 正常声明</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;var a = 666&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 666</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 严格模式 */</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">17</span>; <span class="comment">// 抛出 SyntaxError 错误</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;var a = 666; console.log(a)&quot;</span>); <span class="comment">// 666</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//抛出异常，a is not defined</span></span><br><span class="line"><span class="comment">//变量 a 只在 eval() 作用域内有效</span></span><br></pre></td></tr></table></figure><p><strong>6.禁止将 arguments[i] 赋值给实参或实参赋值给 arguments[i]</strong></p><p>在严格模式中 arguments 不能作为标识符</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  a = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">return</span> [a, <span class="variable language_">arguments</span>[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>(<span class="number">17</span>)); <span class="comment">// [42, 17]</span></span><br></pre></td></tr></table></figure><p><strong>7.禁止使用 <code>arguments.callee()</code> 方法</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">// 抛出类型错误</span></span><br></pre></td></tr></table></figure><p><strong>8.严格模式中函数中的 this 默认值为 undefined</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9.允许通过函数的call()、apply()、bind()方法将函数中 this 的值指定为 null 或 undefined</strong>（任何值）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 未开启严格模式 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">/* 开启严格模式 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// null</span></span><br><span class="line">&#125;</span><br><span class="line">fn2.<span class="title function_">call</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><strong>10.标示符的限制</strong></p><p>未来版本的 ECMAScript 很有可能会引入新语法，ECMAScript5 中的严格模式就提早设置了一些限制来减轻之后版本改变产生的影响</p><p>在严格模式中一部分字符变成了保留的关键字。这些字符包括<code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>和<code>yield</code>。在严格模式下，你不能再用这些名字作为变量名或者形参名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (八) 内置对象</title>
    <link href="https://www.timeic.top/posts/2cfcc5d5.html"/>
    <id>https://www.timeic.top/posts/2cfcc5d5.html</id>
    <published>2023-07-24T08:02:22.000Z</published>
    <updated>2025-09-07T23:17:01.044Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>内置对象( native object )是 ECMAScript 标准中定义的对象（标准内置对象）。内置对象独立与浏览器在任何 <strong>ECMAScript实现</strong> 中都可以使用</p><h2 id="继承链"><a href="#继承链" class="headerlink" title="继承链"></a>继承链</h2><table><thead><tr><th>内置构造函数( 类 )</th><th>描述</th><th><code>__proto__</code>(原型)</th></tr></thead><tbody><tr><td>Object 类型</td><td>Js中所有的对象都是<code>Object</code>类型的实例，它们都会从<code>Object.prototype</code>继承属性和方法(如：<code>toString()</code>)</td><td><code>Function.prototype</code></td></tr><tr><td>Function 类型</td><td>Js中所有的函数都是<code>Function</code>类型的实例，它们都会从<code>Function.prototype</code>继承属性和方法(如：<code>apply()</code>、<code>call()</code>等)</td><td><code>Function.prototype</code></td></tr><tr><td>Array 类型</td><td>Js中所有的数组都是<code>Array</code>类型的实例，它们都会从<code>Array.prototype</code>继承属性和方法(如：<code>length</code>、<code>push()</code>、<code>concat()</code>等)</td><td><code>Function.prototype</code></td></tr></tbody></table><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p><strong>创建一个Array类型的对象</strong>（即创建一个数组）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="title class_">Array</span>(元素<span class="number">1</span>,元素<span class="number">2.</span>..元素N);</span><br><span class="line"><span class="comment">/* 例 */</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><strong>创建一个Function类型的对象</strong>（即创建一个函数）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">new</span> <span class="title class_">Function</span>(语句字符串);</span><br><span class="line"><span class="comment">/* 例 */</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;console.log(&quot;hello&quot;)&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>创建一个Object类型的对象</strong>（即创建一个对象）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 语法 */</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = <span class="keyword">new</span> <span class="title class_">Object</span>(表达式); <span class="comment">//参数默认值为null即空值</span></span><br><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>: <span class="title class_">Timeic</span>&#125;); <span class="comment">//创建一个Object类型的对象</span></span><br><span class="line"><span class="comment">/* 通过Object类来创建其他类型的对象 */</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Object</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">//创建Array类型对象</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)&#125;); <span class="comment">//创建Function类型对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="number">666</span>); <span class="comment">//创建一个Number类型对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//创建一个String类型对象</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="literal">true</span>); <span class="comment">//创建一个Boolean类型对象</span></span><br></pre></td></tr></table></figure><p>在 JavaScript 中字面量的创建方式只是实例化的一种简化语法</p><ul><li>如：<code>var obj = &#123;&#125;</code> 等同于 <code>var obj = new Object()</code></li></ul><p>如果不赋值只实例化则会创建一个匿名的( 临时的 )实例对象</p><ul><li>如：<code>(&#123;name: &#39;Timeic&#39;&#125;).name</code> or <code>[1, 2, 3].length</code></li></ul><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><p>在 Js 中有三种包装类型对象，分别是Number、String、Boolean</p><table><thead><tr><th>类</th><th><code>__proto__</code>(原型)</th></tr></thead><tbody><tr><td>Number 类型</td><td><code>Function.prototype</code></td></tr><tr><td>String 类型</td><td><code>Function.prototype</code></td></tr><tr><td>Boolean 类型</td><td><code>Function.prototype</code></td></tr></tbody></table><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">666</span>); <span class="comment">//创建一个Number类型的对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">//创建一个String类型的对象</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>); <span class="comment">//创建一个Boolean类型的对象</span></span><br></pre></td></tr></table></figure><p>Number、String、Boolean分别对应三种基本数据类型，即数值型、字符串、布尔型。这三种基本数据类型可以像对象一样访问属性或调用方法，当访问某个属性时 js 引擎会自动创建一个对应的匿名的( 临时的 )包装类型对象，从该对象中获取属性和方法</p><p>如：<code>&#39;abc&#39;.length</code> or <code>true.toString()</code></p><h2 id="Date-对象"><a href="#Date-对象" class="headerlink" title="Date 对象"></a>Date 对象</h2><p>Date 对象用于处理日期与时间，通过<code>new Date()</code>来创建一个Date类型的实例对象，创建的Date实例对象会显示实例化时的日期和时间</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Date类型的实例对象</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">//Sat May 20 2022 17:40:41 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getFullYear.asp">getFullYear()</a></td><td>返回一个指定的Date对象的完整年份（四位数年份）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMonth.asp">getMonth()</a></td><td>返回一个指定的Date对象为第几月</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getDate.asp">getDate()</a></td><td>返回一个指定的Date对象为一个月中的哪一日（<code>1</code>-<code>31</code>）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getDay.asp">getDay()</a></td><td>返回一个指定的Date对象为一周中的第几天，（<code>0</code>-<code>6</code>），0 表示星期天</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getHours.asp">getHours()</a></td><td>返回一个指定的Date对象的小时（<code>0</code>–<code>23</code>）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMinutes.asp">getMinutes()</a></td><td>返回一个指定的Date对象的分钟（<code>0</code>–<code>59</code>）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getSeconds.asp">getSeconds()</a></td><td>返回一个指定的Date对象的秒（<code>0</code>–<code>59</code>）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMilliseconds.asp">getMilliseconds()</a></td><td>返回一个指定的Date对象的秒（<code>0</code>–<code>999</code>）</td></tr></tbody></table><h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math 对象"></a>Math 对象</h2><p>Math 对象用于执行数学任务，Math对象不需要创建实例，直接使用即可</p><p>静态属性（常量）：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_e.asp">E</a></td><td>返回算术常量 e，即自然对数的底数（约等于2.718）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_ln2.asp">LN2</a></td><td>返回 2 的自然对数（约等于0.693）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_ln10.asp">LN10</a></td><td>返回 10 的自然对数（约等于2.302）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_log2e.asp">LOG2E</a></td><td>返回以 2 为底的 e 的对数（约等于 1.414）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_log10e.asp">LOG10E</a></td><td>返回以 10 为底的 e 的对数（约等于0.434）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_pi.asp">PI</a></td><td>返回圆周率（约等于3.14159）</td></tr></tbody></table><p>静态方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_abs.asp">abs(x)</a></td><td>返回数的绝对值</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_ceil.asp">ceil(x)</a></td><td>对数进行上舍入</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_floor.asp">floor(x)</a></td><td>对数进行下舍入</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_max.asp">max(x, y)</a></td><td>返回 x 和 y 中的最高值</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_min.asp">min(x, y)</a></td><td>返回 x 和 y 中的最低值</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_pow.asp">pow(x, y)</a></td><td>返回 x 的 y 次幂</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_random.asp">random()</a></td><td>返回 0 ~ 1 之间的随机数</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_round.asp">round(x)</a></td><td>把数四舍五入为最接近的整数</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_sqrt.asp">sqrt(x)</a></td><td>返回数的平方根</td></tr></tbody></table><h2 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h2><p>String 类型对象是一个包含一组字符序列的对象</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(字符串); <span class="comment">//创建一个String类型对象</span></span><br><span class="line"><span class="title class_">String</span>(s); <span class="comment">//将参数 s 的值转换成字符串数据类型</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">4</span>]); <span class="comment">//输出：&#x27;o&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;H&#x27;</span>)) <span class="comment">//输出：&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure><p>属性：</p><ul><li><p><strong><code>[下标]</code> 根据索引返回指定位置的一个字符</strong></p></li><li><p><code>length</code> <strong>获取字符串长度</strong></p></li></ul><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_charAt.asp">charAt()</a></td><td>根据索引，返回在指定位置的字符</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_charCodeAt.asp">charCodeAt()</a></td><td>根据索引返回指定位置字符的 Unicode 编码（十进制）</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_fromCharCode.asp">String.formCharCode()</a></td><td>根据Unicode编码创建一个字符串</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_concat_string.asp">concat()</a></td><td>连接多个字符串</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_indexOf.asp">indexOf()</a></td><td>检索一个字符串中是否含有指定内容，如果有则返回其首次出现的位置(索引)，没有则返回 -1</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_lastIndexOf.asp">lastIndexOf()</a></td><td>检索一个字符串中是否含有指定内容，如果有则返回其最后出现的位置(索引)，没有则返回 -1</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_slice_string.asp">slice()</a></td><td>截取字符串中指定的内容并返回</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_substring.asp">substring()</a></td><td>返回一个字符串在开始索引到结束索引之间的内容</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_split.asp">split()</a></td><td>将字符串拆分成数组并返回</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toUpperCase.asp">toUpperCase()</a></td><td>将字符串转换为大写形式并返回</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toLowerCase.asp">toLowerCase()</a></td><td>将字符串转换为小写形式并返回</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_search.asp">search()</a></td><td>搜索与正则表达式相匹配的值，并返回该值所在位置(索引)</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_match.asp">match()</a></td><td>查找一个或多个正则表达式的匹配，并返回一个结果数组</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_replace.asp">replace()</a></td><td>将字符串中指定内容替换为新的内容，并返回替换后内容</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_string_replaceall.asp">replaceAll()</a></td><td>将字符串中指定内容替换为新的内容，并返回替换后内容( 会替换所有匹配到的子字符串 )</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_trim_string.asp">trim()</a></td><td>去除字符串两端的空格，并返回去除后内容</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_includes.asp">includes()</a></td><td>检查一个字符串是否包指定的内容，如果包含返回 true，反之 false</td></tr></tbody></table><h2 id="Array-对象"><a href="#Array-对象" class="headerlink" title="Array 对象"></a>Array 对象</h2><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">Array.from()</a></td><td>可以从 可迭代 或 类数组对象 创建一个新的浅拷贝的数组</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of">Array.of()</a></td><td>通过可变数量的参数创建一个新的 <code>Array</code> 实例( 替代 <code>new Array</code> )，而不考虑参数的数量或类型</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin">array.copyWithin()</a></td><td>浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find">array.find()</a></td><td>查找第一个符合条件的数组成员</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex">array.findIndex()</a></td><td>查找第一个符合条件的数组成员的位置( index )</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast">array.findLast()</a></td><td>逆向查找第一个符合条件的数组成员</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex">array.findLastIndex()</a></td><td>逆向查找第一个符合条件的数组成员的位置( index )</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">array.includes()</a></td><td>检查一个数组是否包含一个指定的值，如果包含返回 true，反之 false</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">array.flat()</a></td><td>将多维数组转为一维数组并返回</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/at">array.at()</a></td><td>返回指定位置上的数组成员，允许负数( 如：-1 倒数第一个成员 )</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed">array.toReversed()</a></td><td>颠倒数组中元素的顺序，并返回颠倒后的数组( 不改变原数组 )</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted">array.toSorted()</a></td><td>对数组的元素进行排序，并返回排列后的数组( 不改变原数组 )</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced">array.toSpliced()</a></td><td>删除或替换数组中指定的元素，并将删除或替换后的数组返回( 不改变原数组 )</td></tr></tbody></table><p>高阶函数：</p><h3 id="array-forEach"><a href="#array-forEach" class="headerlink" title="array.forEach()"></a>array.forEach()</h3><p>描述：按顺序为数组中的每个元素调用一次指定的函数</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数组.<span class="title function_">forEach</span>(回调函数, 回调函数中<span class="variable language_">this</span>的值)</span><br><span class="line"><span class="comment">//回调函数的语法</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">当前元素值, 当前元素索引, 当前数组</span>)&#123;</span><br><span class="line">  <span class="comment">// xxx</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当前元素值：当前迭代的数组元素值</span></span><br><span class="line"><span class="comment">当前元素索引：当前迭代的数组元素索引值</span></span><br><span class="line"><span class="comment">当前数组：调用当前方法的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> out = [];</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">push</span>(elem * elem);</span><br><span class="line">&#125;, out);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out); <span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure><p>PS：<code>forEach()</code> 方法用于循环遍历数组，该方法不返回任何值，同时该方法不能中断执行，它总是将数组元素遍历完才结束，如果想在循环时根据条件中断执行建议使用 <code>for</code> 循环</p><h3 id="array-map"><a href="#array-map" class="headerlink" title="array.map()"></a>array.map()</h3><p>描述：按顺序为数组中的每个元素调用一次指定的函数，并将每一次调用的函数返回值组合成一个数组作为 <code>map()</code> 方法的返回值</p><p>语法：同 <code>array.forEach()</code> 方法</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = numbers.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>[e];</span><br><span class="line">&#125;, arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p>PS：<code>map()</code> 方法用于对数组中每个元素进行处理并返回一个新数组</p><h3 id="array-filter"><a href="#array-filter" class="headerlink" title="array.filter()"></a>array.filter()</h3><p>描述：将满足条件的元素组合成一个新数组返回</p><p>语法：同 <code>array.forEach()</code> 方法</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1: 将大于3的元素，作为一个新数组返回 */</span></span><br><span class="line"><span class="keyword">var</span> newArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (elem &gt; <span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [4, 5]</span></span><br><span class="line"><span class="comment">/* 例2: 将所有奇数元素，作为一个新数组返回 */</span></span><br><span class="line"><span class="keyword">var</span> newArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> index % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure><p>PS：<code>filter()</code> 方法用于过滤数组中的元素</p><h3 id="array-some-与-array-every"><a href="#array-some-与-array-every" class="headerlink" title="array.some() 与 array.every()"></a>array.some() 与 array.every()</h3><p>描述：这两个方法用于判断数组元素是否符合某种条件。返回一个布尔值</p><p>语法：同 <code>array.forEach()</code> 方法</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// true</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">elem, index, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> elem &gt;= <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><p><code>some()</code>方法是只要有一个元素的返回值是<code>true</code>，则<code>some()</code>方法的返回值就是<code>true</code>，否则返回<code>false</code></p></li><li><p><code>every()</code>方法是所有元素的返回值都是<code>true</code>，<code>every()</code>方法才返回<code>true</code>，否则返回<code>false</code></p></li></ul><h3 id="array-reduce-与-array-reduceRight"><a href="#array-reduce-与-array-reduceRight" class="headerlink" title="array.reduce() 与 array.reduceRight()"></a>array.reduce() 与 array.reduceRight()</h3><p>描述：按顺序为数组中的每个元素调用一次指定的函数，每一次执行 reduce方法都会将上一次计算结果( 函数返回值 )作为参数传入，最后将其结果汇总为单个返回值</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">数组.<span class="title function_">reduce</span>(回调函数, 回调函数中上一次返回值的初始值) <span class="comment">// 从数组第一个元素到数组最后一个元素</span></span><br><span class="line">数组.<span class="title function_">reduceRight</span>(回调函数, 回调函数中上一次元素值的初始值) <span class="comment">// 从数组最后一个元素到数组第一个元素</span></span><br><span class="line"><span class="comment">//回调函数的语法</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">上一次返回值, 当前元素值, 当前元素索引, 当前数组</span>)&#123; <span class="keyword">return</span> xxx &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上一次返回值：上一次执行回调函数的返回值，默认初始值为数组的第一个元素值</span></span><br><span class="line"><span class="comment">当前元素值：当前迭代的数组元素值，默认从数组的第二个元素( 索引为1 )开始</span></span><br><span class="line"><span class="comment">当前元素索引：当前迭代的数组元素索引值</span></span><br><span class="line"><span class="comment">当前数组：调用reduce方法的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, cur</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(prev, cur);</span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 3 3</span></span><br><span class="line"><span class="comment">// 6 4</span></span><br><span class="line"><span class="comment">// 10 5</span></span><br><span class="line">    <span class="keyword">return</span> prev + cur</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h2 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h2><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>描述：以指定对象为原型创建新的对象，同时可以为新的对象指定新的属性，并对属性进行描述</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(对象, &#123; 属性名: 属性描述符对象... &#125;) <span class="comment">//返回创建的新对象</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建一个干净的对象 */</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">/* 创建一个对象，并添加相应属性，同时对属性进行描述 */</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;Timeic&#x27;</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">//属性不允许被赋值(=)</span></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">//属性不允许从所在对象中删除(delete)</span></span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">false</span> <span class="comment">//属性不允许被枚举(for in)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">//属性允许被赋值(=)</span></span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">//属性允许从所在对象中删除(delete)</span></span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">//属性允许被枚举(for in)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br></pre></td></tr></table></figure><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p>属性描述符是 JavaScript 提供的一种<strong>内部数据结构</strong>，用于描述对象的属性值，及控制其行为( 例如该属性是否可写、是否可配置、是否可修改以及是否可枚举等 )</p><p>分类：</p><ul><li>数据描述符</li><li>存取描述符</li></ul><h3 id="数据描述符（数据属性）"><a href="#数据描述符（数据属性）" class="headerlink" title="数据描述符（数据属性）"></a>数据描述符（数据属性）</h3><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td><code>value</code></td><td>该属性对应的值，默认值 undefined</td></tr><tr><td><code>writable</code></td><td>值为 <code>true</code> 时，该属性的值( value )才能够被改变，默认值为 false</td></tr><tr><td><code>configurable</code></td><td>值为 <code>true</code> 时，该属性描述符的 configurable、enumerable 的值才能修改，同时该属性也能够从所属对象中删除，默认值为 false</td></tr><tr><td><code>enumerable</code></td><td>值为 <code>true</code> 时，该属性才会出现在对象的枚举(for in)属性中，默认值为 false</td></tr></tbody></table><h3 id="存取描述符（访问器属性）"><a href="#存取描述符（访问器属性）" class="headerlink" title="存取描述符（访问器属性）"></a>存取描述符（访问器属性）</h3><table><thead><tr><th>键</th><th>值</th></tr></thead><tbody><tr><td><code>get</code></td><td>值为一个函数。没有该函数，则默认值为undefined。当获取或访问当前属性时，会调用此方法</td></tr><tr><td><code>set</code></td><td>值为一个函数。没有该函数，则默认值为undefined。当设置当前属性值时，会调用此方法</td></tr><tr><td><code>configurable</code></td><td>值为 <code>true</code> 时，该属性描述符的 configurable、enumerable 的值才能修改，同时该属性也能够从所属对象中删除，默认值为 false</td></tr><tr><td><code>enumerable</code></td><td>值为 <code>true</code> 时，该属性才会出现在对象的枚举(for in)属性中，默认值为 false</td></tr></tbody></table><h3 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor()"></a>Object.getOwnPropertyDescriptor()</h3><p>描述：获取属性描述符</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(对象, 属性)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">text</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="comment">/* 返回一个属性描述符对象</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">value: &#x27;string&#x27;,</span></span><br><span class="line"><span class="comment">writable: true,</span></span><br><span class="line"><span class="comment">configurable: true,</span></span><br><span class="line"><span class="comment">enumerable: true</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h3><p>描述：定义指定对象的属性描述符</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(对象, 属性, 属性描述符对象)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第1个参数为目标对象</span></span><br><span class="line"><span class="comment">第2个参数为目标对象的属性名（一个字符串）</span></span><br><span class="line"><span class="comment">第3个参数为属性描述符对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 修改一个值 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;猪八戒&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;孙悟空&quot;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;孙悟空&#x27; &#125;</span></span><br><span class="line"><span class="comment">/* 新增一个值 */</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">28</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 28</span></span><br></pre></td></tr></table></figure><p>Tips：使用对象字面量（<code>&#123; 属性名: 属性值 &#125;</code>）或 <code>对象.属性名 = 值</code> 的方式添加的属性 可修改，可删除，可枚举（即属性描述符的<code>enumerable</code>、<code>configurable</code>、<code>writable</code> 的值为 true）</p><h3 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties()"></a>Object.defineProperties()</h3><p>描述：定义指定对象的<strong>多个</strong>属性描述符</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(对象, &#123; 属性名: 属性描述符对象... &#125;)</span><br></pre></td></tr></table></figure><h3 id="getter-amp-setter方法"><a href="#getter-amp-setter方法" class="headerlink" title="getter &amp; setter方法"></a>getter &amp; setter方法</h3><p><code>getter</code> 将对象属性绑定到获取该属性时将被调用的函数</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    get 属性名()&#123;</span><br><span class="line">        <span class="comment">//函数体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//get为获取属性，其后为要获取的属性名，当获取该属性时，则调用getter方法</span></span><br></pre></td></tr></table></figure><p><code>setter</code> 将对象属性绑定到设置该属性值时将被调用的函数</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    set 属性名(值)&#123;</span><br><span class="line">        <span class="comment">//函数体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set为设置属性，其后为要设置的属性名，当设置该属性值时，则调用setter方法</span></span><br><span class="line"><span class="comment">//setter方法包含一个参数，作为该属性被设置时的新值</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">&#x27;张&#x27;</span>, </span><br><span class="line"><span class="attr">lastName</span>: <span class="string">&#x27;三&#x27;</span>,</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">fullName</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">data</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> names = data.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>];</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">lastName</span> = names[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">obj.<span class="property">fullName</span> = <span class="string">&#x27;老 六&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">fullName</span>);</span><br></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames()"></a>Object.getOwnPropertyNames()</h3><p>描述：获取指定对象所有的属性名( 包括不可枚举属性 )集合( 数组 )</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(对象)</span><br></pre></td></tr></table></figure><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p>描述：获取指定对象所有可枚举的属性名集合( 数组 )</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(对象)</span><br></pre></td></tr></table></figure><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p>描述：获取指定对象所有可枚举的属性值集合( 数组 )</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(对象)</span><br></pre></td></tr></table></figure><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>描述：获取指定对象所有可枚举属性的名值对集合( 数组 )</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(对象)</span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p>描述：将一个或多个源对象中所有可枚举的自有属性复制到目标对象（Shallow Copy 拷贝）</p><p>语法：</p><h3 id="Object-preventExtensions"><a href="#Object-preventExtensions" class="headerlink" title="Object.preventExtensions()"></a>Object.preventExtensions()</h3><p>描述：不可扩展对象（不能再添加新的属性或方法）</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj); <span class="comment">//将 obj 设置成不可扩展对象</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Tom&quot;</span>; <span class="comment">//新增：静默失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// 空 Object 对象 &#123;&#125;</span></span><br><span class="line"><span class="comment">//使用 Object.defineProperty() 或 Object.defineProperties() 新增属性时会报错</span></span><br><span class="line"><span class="comment">//TypeError: Cannot define property name, object is not extensible</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Tom&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 Object.isExtensible() 方法可以判断对象是否可扩展 */</span></span><br><span class="line"><span class="comment">//返回 true表示可扩展 false表示不可扩展</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj));</span><br></pre></td></tr></table></figure><h3 id="Object-seal"><a href="#Object-seal" class="headerlink" title="Object.seal()"></a>Object.seal()</h3><p>描述：密封的对象。一旦将对象进行了密封，则不能为该对象新增属性或方法、同时该对象已有属性的描述符的 <code>configurable</code> 的值将变为 false</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person); <span class="comment">//将 person 设置成密封的对象</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">12</span>; <span class="comment">//静默失败</span></span><br><span class="line"><span class="comment">//下面修改了已有属性的描述符的 configurable、enumerable 的值</span></span><br><span class="line"><span class="comment">//抛出类型错误 TypeError: Cannot redefine property</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">//不可修改</span></span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">//不可修改</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 Object.isSealed() 方法可以判断对象是否被密封 */</span></span><br><span class="line"><span class="comment">//返回 true 表示被密封了，false 表示没有被密封</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person));</span><br></pre></td></tr></table></figure><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze()"></a>Object.freeze()</h3><p>描述：冻结的对象。一旦将对象进行了冻结，那么该对象不能做任何修改（不可新增属性或方法，已有属性的描述符的 <code>configurable</code>、<code>writable</code> 的值将变为 false）</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj); <span class="comment">//将 obj 设置成冻结的对象</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>; <span class="comment">//新增：静默失败</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;Bob&quot;</span>; <span class="comment">//修改：静默失败</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>; <span class="comment">//删除：静默失败</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123; name: &#x27;Tom&#x27; &#125;</span></span><br><span class="line"><span class="comment">//使用 Object.defineProperty() 或 Object.defineProperties() 新增属性或修改已属性时都会报错</span></span><br><span class="line"><span class="comment">//TypeError: Cannot redefine property</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;Bob&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//TypeError: Cannot define property age, object is not extensible</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;age&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 Object.isFrozen() 方法可以判断对象是否被冻结 */</span></span><br><span class="line"><span class="comment">//返回 true 表示被冻结了，false 表示没有被冻结</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (七) 面向对象</title>
    <link href="https://www.timeic.top/posts/23b66728.html"/>
    <id>https://www.timeic.top/posts/23b66728.html</id>
    <published>2023-06-20T07:45:52.000Z</published>
    <updated>2025-09-07T23:17:01.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JavaScript 支持面向对象的编程范式，面向对象是一种对现实世界理解和抽象的方法</p><p>所谓对象通常是指客观世界中的真实存在的事物，实物，实象。例如：一支笔、一本书、一只鸟</p><p><strong>面向对象编程的三大特征：</strong></p><ul><li><strong>封装</strong>：只关心入口和出口，而不关心过程</li><li><strong>继承</strong>：指类与类之间的关系。如果两个类都有相同的属性或方法，那么可以让一个类继承于另类，这样就不需要在前者再次定义同样的属性或方法</li><li><strong>多态</strong>：不同的对象可以定义具有相同名称的方法，方法是作用于所在的对象中。这种不同对象通过相同方法的调用实现各自行为的能力，被称之为多态</li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数又可称为对象模版或类型对象，通过构造函数我们可以创建特定<strong>类型</strong>的对象( 实例 )</p><p>构造函数和普通函数的定义方式是一样的，通常为了区分，构造函数的名称首字母要求大写</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 名称([形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N])&#123;</span><br><span class="line"><span class="comment">//constructor body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = <span class="keyword">new</span> 构造函数([实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">//方法需要添加到原型中以节省资源</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建实例 */</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaomei = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小美&quot;</span>, <span class="number">16</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"><span class="comment">/* 输出实例 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaoming, xiaomei) <span class="comment">//输出：Person&#123;name: &#x27;小明&#x27;, ...&#125; Person&#123;name: &#x27;小美&#x27;, ...&#125;</span></span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类是<strong>封装</strong>对象的属性和方法的<strong>载体</strong>。类定义了对象的特征，例如一辆汽车( 对象 )的名称、车型、重量、颜色等等都是这辆车的属性，而汽车的启动和停止则是这辆车的行为(方法)</p><p>类是面向对象编程中的一个基本的概念。实际上在 Js 中并没有类的概念❕，但 Js 通过构造函数和原型可以实现对类的支持</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><em>类是对象的抽象，而对象是类的具体实例</em></p><p>通过类所创建的对象称为该类的实例，例如上面案例中的对象<code>xiaoming</code>和<code>xiaomei</code>都是<code>Person</code>类的实例</p><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>this是Js引擎在执行时自动定义的变量，其值会指向一个对象</p><ul><li><p>在全局作用域中访问this时，其值指向全局对象<code>window</code>(默认值)</p></li><li><p>在函数作用域中访问this时，根据 <strong>函数调用方式</strong> 的不同，this会指向不同的对象</p></li></ul><ol><li><p>以方法调用时，this会指向该方法所在的对象</p></li><li><p>以构造函数调用( <code>new 构造函数</code> )时，this会指向其所创建的实例对象</p></li></ol><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">xiaoming.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;myName is &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">xiaoming.<span class="title function_">sayName</span>(); <span class="comment">//执行结果：myName is 小明</span></span><br></pre></td></tr></table></figure><h3 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h3><p>使用new运算符来进行<strong>对象实例化</strong>（根据类创建对象的过程）</p><p>实例化的过程：</p><ol start="3"><li><p>创建一个空对象（即<code>&#123;&#125;</code>）</p></li><li><p>执行构造函数，执行前会先</p><ul><li>将变量<code>this</code>的值指向步骤1中所创建的那个对象</li><li>并向对象中添加属性<code>__proto__</code>，将该属性的值指向构造函数的<strong>原型对象</strong>（<code>prototype</code>）</li></ul></li><li><p>构造函数执行完后，返回<strong>实例对象</strong>( 没有手动返回了一个对象的情况下，为步骤1中所创建的那个对象 )</p></li></ol><h2 id="call、apply、bind-方法"><a href="#call、apply、bind-方法" class="headerlink" title="call、apply、bind 方法"></a>call、apply、bind 方法</h2><p><code>call</code>、<code>apply</code>、<code>bind</code> 是 <strong>Function类型对象</strong>( 函数 )中的方法，通过 <code>call()</code>、<code>apply()</code>、<code>bind()</code> 方法可以改变函数作用域中 <code>this</code> 的值</p><p><code>call()</code>的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数.<span class="title function_">call</span>(<span class="variable language_">this</span>的值, 实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N)</span><br></pre></td></tr></table></figure><p><code>apply()</code>的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数.<span class="title function_">apply</span>(<span class="variable language_">this</span>的值, [实参列表])</span><br></pre></td></tr></table></figure><p><code>bind()</code>的语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数.<span class="title function_">bind</span>(<span class="variable language_">this</span>的值, 实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">number</span> = <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s1 = &#123;<span class="attr">number</span>: <span class="string">&#x27;tow&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">number</span>);</span><br><span class="line">&#125;</span><br><span class="line">change.<span class="title function_">apply</span>();         <span class="comment">//执行结果：one</span></span><br><span class="line">change.<span class="title function_">apply</span>(<span class="variable language_">window</span>);   <span class="comment">//执行结果：one</span></span><br><span class="line">change.<span class="title function_">apply</span>(<span class="variable language_">this</span>);     <span class="comment">//执行结果：one</span></span><br><span class="line">change.<span class="title function_">apply</span>(s1);       <span class="comment">//执行结果：tow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> reply = <span class="variable language_">this</span>.<span class="property">animal</span> + <span class="string">&#x27;通常只睡&#x27;</span> + <span class="variable language_">this</span>.<span class="property">sleepDuration</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reply);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">animal</span>: <span class="string">&#x27;猫&#x27;</span>,</span><br><span class="line">  <span class="attr">sleepDuration</span>: <span class="string">&#x27;12～16个小时&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">greet.<span class="title function_">call</span>(obj);</span><br></pre></td></tr></table></figure><h3 id="call、apply、bind-的区别"><a href="#call、apply、bind-的区别" class="headerlink" title="call、apply、bind 的区别"></a>call、apply、bind 的区别</h3><p><code>call</code>、<code>apply</code>、<code>bind</code> 方法都包含一个<strong>对象</strong>( 严格模式下除外 )作为该方法的第1个参数，其后的参数会作为函数的实参。但在传参时，<code>apply()</code> 方法需要将实参以数组的形式传递至函数</p><p><code>call</code> 和 <code>apply</code> 方法会以指定的 this 的值调用一次该函数，而 <code>bind()</code> 方法会将其所在函数返回，不会自动调用</p><p>如果以上传入的第一个参数为 null 或 undefined 则不会改变函数作用域中 this 的值( 严格模式除外 )</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">c, d</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span> + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add.<span class="title function_">call</span>(s, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">//输出：10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(add.<span class="title function_">apply</span>(s, [<span class="number">5</span>, <span class="number">6</span>])); <span class="comment">//输出：14</span></span><br></pre></td></tr></table></figure><h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><p>函数是一个包含属性和方法的 <strong>Function 类型</strong>的对象。而原型( <code>prototype</code> )就是 Function 类型对象的一个属性</p><p>js 中所有函数在定义时，js 引擎都会自动向函数中添加<code>prototype</code>属性，其值是一个 Object 类型的对象( <code>new Object()</code> )，称为原型对象( prototype对象 )，该对象有一个 constructor 属性指向该构造函数</p><p>当通过构造函数创建实例时，实例对象中会有一个隐藏的内部属性( <code>__proto__</code> )指向其构造函数的原型对象</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure><h3 id="原型链-Prototype-Chain"><a href="#原型链-Prototype-Chain" class="headerlink" title="原型链( Prototype Chain )"></a>原型链( Prototype Chain )</h3><p>每个实例对象都有一个私有属性（称之为<code>__proto__</code>）指向它的构造函数的原型对象（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的<code>__proto__</code>属性值为<code>null</code>为止。这种沿着<code>__proto__</code>属性的链式结构就称为原型链</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//this.xxx = xxx;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">a</span>, fun.<span class="property">b</span>); <span class="comment">//输出：123 undefined</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/image/20221112104157" alt="prototype"></p><p>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象</p><p>当从对象中访问一个属性时会先在自身对象中查找</p><ul><li>如果没找到，则沿着<code>__proto__</code>这条链向上查找</li><li>如果依然没找到，则返回 undefined</li></ul><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p>描述：获取指定对象的原型</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(对象)</span><br></pre></td></tr></table></figure><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p>描述：设置指定对象的原型</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(对象, 原型)</span><br></pre></td></tr></table></figure><h3 id="obj-hasOwnProperty"><a href="#obj-hasOwnProperty" class="headerlink" title="obj.hasOwnProperty()"></a>obj.hasOwnProperty()</h3><p>描述：检测对象中的属性是否存在( 不包括原型中的属性，检测原型中的属性可以用 in 运算符 )，存在则返回 true，反之则为 false</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="title function_">hasOwnProperty</span>(属性名) <span class="comment">//属性名为一个字符串</span></span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>JavaScript 是基于原型实现的继承，和其它传统的基于类的语言( 如 Java 或 C++ )相比，Js 显得比较独特</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>核心：将父类实例作为子类原型</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;My is a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ca</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">b</span> = <span class="string">&#x27;My is b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>(); <span class="comment">//子类的prototype指向父类的实例对象</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = B; <span class="comment">//修正构造函数指向</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>()</span><br></pre></td></tr></table></figure><p>Tips：原型链虽然很强大，用它可以实现 JavaScript 中的继承，但同时也存在着一些问题。原型链继承实际上是在多个构造函数或对象之间共享属性和方法，这种方法在创建子类的对象时，不能向父类的构造函数传递任何参数</p><h3 id="借用构造函数继承"><a href="#借用构造函数继承" class="headerlink" title="借用构造函数继承"></a>借用构造函数继承</h3><p>核心：借用父类构造函数来增强子类实例，等于复制父类实例的属性给子类</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ca</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">b</span>)&#123;</span><br><span class="line">    A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment">//调用父类构造函数，并绑定 this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Tips：借用构造函数继承就是通过 <code>apply()</code> 或 <code>call()</code> 方法在子类构造函数中调用父类的构造函数，并将父类和子类的 this 绑定在一起，这种方式可以向父类传递参数，但不能实现方法的复用</p><h3 id="组合式继承"><a href="#组合式继承" class="headerlink" title="组合式继承"></a>组合式继承</h3><p>核心：通过调用父类构造函数来实现向父类构造函数传递参数，然后通过将父类实例作为子类原型来实现方法复用</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cs</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">b</span>)&#123;</span><br><span class="line">    A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment">//调用父类构造函数，并绑定 this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> A; <span class="comment">//子类的prototype指向父类的实例对象</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = B; <span class="comment">//修正构造函数指向</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Tips：组合继承是将原型链继承和借用构造函数的技术组合在一起，发挥二者长处的一种继承方式，这样，既通过在原型上定义方法实现了方法的复用，又可以保证每个对象都有自己的专有属性，但这种方法，会调用2次父类的构造函数，因此会存在一份多余的实例属性</p><h3 id="组合寄生式继承"><a href="#组合寄生式继承" class="headerlink" title="组合寄生式继承"></a>组合寄生式继承</h3><p>核心：通过调用父类构造函数来实现向父类构造函数传递参数，然后通过将父类原型作为新对象的原型，并将新对象赋值给子类原型来实现方法复用，并且避免了多余的实例属性</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义A类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = a</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cs</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义B类 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">b</span>)&#123;</span><br><span class="line">    A.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment">//调用父类构造函数，并绑定 this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = b</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(A.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//将父类原型作为新对象的原型，并将新对象赋值给子类原型</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">cb</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">b</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建B类的实例 */</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="父类和子类"><a href="#父类和子类" class="headerlink" title="父类和子类"></a><span title="基类">父类</span>和子类</h3><p>继承的类称为子类，被继承的类称为父类，子类具有父类的全部属性和方法，但父类不能拥有子类的属性和方法</p><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p><strong><code>instanceof</code></strong> <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否在某个实例对象的原型链上，如果在，则返回 true，反之返回 false</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 构造函数</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">D</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">o <span class="keyword">instanceof</span> C; <span class="comment">//返回true</span></span><br><span class="line">o <span class="keyword">instanceof</span> D; <span class="comment">//返回false</span></span><br><span class="line">C.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">//返回true</span></span><br><span class="line">D.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">C</span>(); <span class="comment">//继承</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title function_">D</span>();</span><br><span class="line">o2 <span class="keyword">instanceof</span> D; <span class="comment">//返回true</span></span><br><span class="line">o2 <span class="keyword">instanceof</span> C; <span class="comment">//返回true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (六) 函数</title>
    <link href="https://www.timeic.top/posts/e8048261.html"/>
    <id>https://www.timeic.top/posts/e8048261.html</id>
    <published>2023-06-02T07:36:03.000Z</published>
    <updated>2025-09-07T23:17:01.067Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一个函数是可以通过外部代码<strong>调用</strong>的一个“子程序”。函数中可以封装一系列语句，在需要时直接调用该函数。在定义函数时可以将值传递至函数，同时在调用函数时也可以返回一个值</p><h2 id="创建与调用函数"><a href="#创建与调用函数" class="headerlink" title="创建与调用函数"></a>创建与调用函数</h2><p><strong>1、使用 函数表达式 来创建一个函数</strong></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line">变量名(实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N);</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">name</span>) <span class="comment">// fun</span></span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>2、使用 函数声明语句 来创建一个函数</strong></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N);</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建函数 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你调用了&quot;</span> + arg + <span class="string">&quot;函数&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="property">name</span>) <span class="comment">// fun</span></span><br><span class="line"><span class="comment">/* 调用函数 */</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&quot;fun&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><p>函数体为可执行的语句，只在调用函数时执行</p><h3 id="形参-与-实参"><a href="#形参-与-实参" class="headerlink" title="形参 与 实参"></a><span title="形式参数">形参</span> 与 <span title="实际参数">实参</span></h3><p>形参是一个未声明的局部变量，只在调用函数时被声明和赋值</p><p>而实参则是对应形参的实际值，可以是任何表达式</p><p>形参和实参是可选项可以为空</p><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>函数表达式会将该函数( Function类型对象 )作为值返回</p><p>在 JavaScript 中 <strong>函数表达式</strong> 和 <strong>函数声明语句</strong> 都使用了 function关键字</p><p>Js 引擎在解析一条语句时，如果 function关键字前有相关运算符，则会将其作为函数表达式执行，如果没有则会将其作为函数声明语句执行</p><h3 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h3><p>在 JavaScript 中函数是一个”Function类型对象”，因此函数和对象的使用是一样的</p><p>不同的是函数除了可以添加属性外，还可以<strong>封装</strong>和<strong>调用</strong></p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p><code>return</code>语句用来设置函数的返回值</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 表达式</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">sum</span>(<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>); <span class="comment">//result 的值为19</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">sey</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="title function_">fun</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">sey</span>());</span><br></pre></td></tr></table></figure><p>return 语句可以终止函数的执行( return 后的语句将不会执行 )，并返回一个指定的值给<strong>函数调用表达式</strong>( 默认返回 undefined )</p><p>函数的返回值可以是任何数据类型</p><h2 id="方法（methods）"><a href="#方法（methods）" class="headerlink" title="方法（methods）"></a>方法（<em>methods</em>）</h2><p>在对象中如果一个属性值是一个函数，则该属性可以称为该对象的方法</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1.通过对象字面量添加方法 */</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">  属性名: 函数表达式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.通过访问对象表达式添加方法 */</span></span><br><span class="line"><span class="keyword">var</span> 对象名 = &#123;&#125; <span class="comment">//初始化对象</span></span><br><span class="line">对象名.属性名 = 函数表达式</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法调用 */</span></span><br><span class="line">对象名.属性名()</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建对象 */</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">birth</span>: <span class="number">2002</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>(); <span class="comment">//返回当前年份到变量y</span></span><br><span class="line">        <span class="keyword">return</span> y - <span class="variable language_">this</span>.<span class="property">birth</span>; <span class="comment">//计算年龄并返回给方法调用表达式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 方法调用 */</span></span><br><span class="line">person.<span class="title function_">age</span>()</span><br></pre></td></tr></table></figure><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><p><code>toString</code> 方法是 Object 类型对象中的一个方法，任何对象都可以使用该方法。该方法用来将任意数据类型转换成字符串并返回</p><p>在使用 <code>console.log()</code> 输出对象到控制台时其输出值在不同<strong>运行环境</strong>( 如Chrome、FireFox、Node.js … )会略有不同，默认情况下输出一个对象的值，实际上是输出对象中 <code>toString</code> 方法的<strong>返回值</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;value&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun.<span class="title function_">toString</span>()); <span class="comment">// function fun()&#123;&#125;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;is Object&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(obj); <span class="comment">// is Object</span></span><br></pre></td></tr></table></figure><p>当两个对象做比较运算( 如 <code>&lt;</code> <code>&gt;</code> <code>==</code> 仅相等运算有意义 )时，则是比较对象的引用值( 内存地址 )，其它与对象有关的运算，默认情况下都是和对象的 <code>toString</code> 方法的返回值做运算</p><h2 id="立即调用函数表达式（IIFE）"><a href="#立即调用函数表达式（IIFE）" class="headerlink" title="立即调用函数表达式（IIFE）"></a>立即调用函数表达式（<em>IIFE</em>）</h2><p><strong>立即调用函数表达式</strong> 是一个在定义时就会立即执行的函数，也称立即执行函数</p><p>它由 <code>函数表达式+()</code> 组成</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>, 形参<span class="number">2.</span>..形参N]</span>)&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;)([实参<span class="number">1</span>, 实参<span class="number">2.</span>..实参N])</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;)(str)</span><br></pre></td></tr></table></figure><h2 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h2><p><strong><code>arguments</code></strong> 是 Js 引擎在执行时自动向函数中添加的<strong>局部变量</strong>，其值是一个保存了函数实参的<strong>类数组对象</strong>（类似数组，但不是数组）</p><p>属性：</p><ul><li><p><strong><code>.length</code> 获取实参的个数</strong></p></li><li><p><strong><code>.callee</code> 返回当前执行的函数</strong></p></li><li><p><strong><code>[下标]</code> 根据索引返回或修改实参的值</strong></p></li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">//执行结果：4</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">arguments</span>[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>], <span class="variable language_">arguments</span>[<span class="number">1</span>], <span class="variable language_">arguments</span>[<span class="number">2</span>]); <span class="comment">//输出：0 2 3</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="全局与局部变量"><a href="#全局与局部变量" class="headerlink" title="全局与局部变量"></a>全局与局部变量</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>通常函数内声明的变量都为局部变量，在调用函数时函数内声明的变量只在该函数内有效</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lv=<span class="string">&#x27;我是局部变量&#x27;</span>;</span><br><span class="line">  <span class="comment">/* 在函数内输出 */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(lv); <span class="comment">// 我是局部变量</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">/* 在函数外输出 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lv) <span class="comment">//报错：test is not defined</span></span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>默认情况下，不再函数内声明的变量都为全局变量，如果变量不声明(<del><code>var</code></del>)直接赋值，则该变量直接为全局变量</p><p>全局变量在函数内或函数外都可以访问</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> gv = <span class="string">&#x27;我是全局变量&#x27;</span>;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">/* 在函数内输出 */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(gv); <span class="comment">// 我是全局变量</span></span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">/* 在函数外输出 */</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gv) <span class="comment">// 我是全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">a = <span class="number">666</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">// 666 666</span></span><br></pre></td></tr></table></figure><h3 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h3><p>默认情况下，全局变量会作为在全局对象<code>window</code>的属性和方法存储</p><p>在 Js 中，访问一个全局变量，默认会从全局对象<code>window</code>中访问</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>, <span class="variable language_">window</span>.<span class="title function_">fun</span>()); <span class="comment">//输出：123 123</span></span><br></pre></td></tr></table></figure><h2 id="作用域（scope）"><a href="#作用域（scope）" class="headerlink" title="作用域（scope）"></a>作用域（<em>scope</em>）</h2><p>作用域是指一个变量作用的 <strong>范围</strong></p><p>分类：</p><ul><li>全局作用域</li><li>函数作用域</li></ul><p>全局作用域中的变量即全局变量，函数作用域中的变量即局部变量</p><p>在浏览器中，全局作用域其作用范围是整个页面。函数作用域其作用范围只在函数内</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>函数内可以嵌套多个函数，而作用域则是根据函数代码的层次进行分层，以使子作用域可以访问父级作用域中的变量，而不能从父作用域引用子级作用域中的变量</p><p>如果一个变量不 “在当前的作用域中”，则会从父级作用域中查找，即沿着链式的作用域链查找( 就近原则 )</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;<span class="comment">//外层函数</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;<span class="comment">//内层函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//输出结果: 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>();</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/image/20221112103929" alt="作用域"></p><p>当内层函数要访问一个变量时，会先在当前作用域中查找，若不存在，则向上一级作用域中查找，直到找到全局作用域，如果全局作用域中依然没有找到，则会报错 ReferenceError</p><h3 id="变量提升（Hoisting）"><a href="#变量提升（Hoisting）" class="headerlink" title="变量提升（Hoisting）"></a>变量提升（<em>Hoisting</em>）</h3><p><strong>使用var关键字声明，会在当前作用域中提前声明</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//输出：undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//报错：b is not defined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;<span class="comment">//这里发生变量提升</span></span><br><span class="line">b = <span class="number">2</span>;<span class="comment">//不使用var关键字声明，则不会发生变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">//输出：1 2</span></span><br></pre></td></tr></table></figure><p><strong>使用function关键字声明，会在当前作用域中提前声明</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="title function_">fun</span>(); <span class="comment">//错误：fun is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fun); <span class="comment">//输出：undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="comment">//function声明会将引用值一起提升</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="comment">//这里只提升声明</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is function&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>function</code>声明要比<code>var</code>声明的优先级更高</strong></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="title function_">toString</span>()); <span class="comment">// [Function: fn]</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is function&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips：JavaScript 中 var 关键字只会提升声明，不会提升其初始化的值，而 function 声明则会将其引用值提升</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (五) 对象与数组</title>
    <link href="https://www.timeic.top/posts/3c330ff4.html"/>
    <id>https://www.timeic.top/posts/3c330ff4.html</id>
    <published>2023-04-22T07:21:21.000Z</published>
    <updated>2025-09-07T23:17:01.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对象-（object）"><a href="#对象-（object）" class="headerlink" title="对象 （object）"></a>对象 （object）</h2><p>一个对象就是一系列属性的集合，一个属性包含一个名和一个值</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 对象字面量 */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: &#123;</span><br><span class="line">    <span class="attr">first</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">last</span>: <span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象是由一系列属性组成，每一个属性都有一个名字（如上面案例中的 name、age），和一个值（如上面案例中的 ‘zs’、18）。每一个名/值对之间用逗号( <code>,</code> )分隔，并且名和值之间由冒号( <code>:</code> )分隔</p><p>对象中的属性值可以是任何类型的数据( 包括对象 )</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p><strong>使用 对象字面量 创建一个对象</strong></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = 对象字面量</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;<span class="comment">//创建一个名为obj的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> obj); <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="comment">/* 创建一个名为obj2的对象，对象中包含两个属性 */</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问对象表达式"><a href="#访问对象表达式" class="headerlink" title="访问对象表达式"></a>访问对象表达式</h3><p><strong>1、点表示法</strong></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person;<span class="comment">//返回person对象</span></span><br><span class="line">person.<span class="property">name</span>;<span class="comment">//返回person对象中name属性的值</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">18</span>;<span class="comment">//向person对象中的name属性赋值</span></span><br></pre></td></tr></table></figure><p><strong>2、括号表示法</strong></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象[属性名]</span><br></pre></td></tr></table></figure><h3 id="属性与变量"><a href="#属性与变量" class="headerlink" title="属性与变量"></a>属性与变量</h3><p>对象中的属性和变量都可以用来存储任意类型的数据，并且它们的值都是可以更变的</p><ul><li>当向对象中的属性赋值时，如果对象中不包含该属性，则会自动添加该属性并赋值</li></ul><h3 id="点与括号"><a href="#点与括号" class="headerlink" title="点与括号"></a>点与括号</h3><p>点和括号都可以用来分隔对象的名称字段，在对象中，属性名可以是任何字符</p><ul><li>点表示法只能使用合法字符作为属性名，而括号表示法可以将任何表达式的值作为属性名</li><li>如果属性名为不合法( 与 Js 语法相冲突 )的标识符，则必须用括号表示法</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例1 */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  [<span class="string">&#x27;.+-*/&amp;|!&#x27;</span>]: <span class="number">1234</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;.+-*/&amp;|!&#x27;</span>])<span class="comment">//返回1234</span></span><br><span class="line"><span class="comment">/* 例2 */</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  [o1]: <span class="string">&#x27;Joy&#x27;</span><span class="comment">//将变量o1的值作为属性名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际开发中对象的属性名尽量按照标识符的规范命名</p><h3 id="delete-运算符"><a href="#delete-运算符" class="headerlink" title="delete 运算符"></a>delete 运算符</h3><p>当要删除一个对象中的属性时，可以使用 delete 运算符</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 对象.属性名</span><br><span class="line"> or</span><br><span class="line"><span class="keyword">delete</span> 对象[属性名]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">one</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">one</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//输出为 &#123;&#125; 空对象</span></span><br></pre></td></tr></table></figure><h2 id="数组（array）"><a href="#数组（array）" class="headerlink" title="数组（array）"></a>数组（array）</h2><p>数组是一个<strong>有序</strong>的数据集合，通常被描述为“像列表一样的对象”</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 数组字面量 */</span></span><br><span class="line">[</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;Joy&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>数组由一系列的值组成，每一个值被称作一个元素( 元素可以是任何类型的数据，包括对象 )，且值与值之间用( <code>,</code> )分隔</p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = 数组字面量</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];<span class="comment">//创建一个名为arr的数组</span></span><br><span class="line"><span class="comment">/* 创建一个名为arr2的数组，数组中包含3个元素 */</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br></pre></td></tr></table></figure><h3 id="访问数组表达式"><a href="#访问数组表达式" class="headerlink" title="访问数组表达式"></a>访问数组表达式</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组[索引]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list<span class="comment">//返回list数组</span></span><br><span class="line">list[<span class="number">0</span>];<span class="comment">//返回list数组中第1个元素的值</span></span><br><span class="line">list[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//向list数组中的第1个元素赋值</span></span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>数组中每一个元素都有一个数字编号称为索引，索引是从0开始的整数，通过索引可以访问数组元素的值</p><h3 id="数组也是对象"><a href="#数组也是对象" class="headerlink" title="数组也是对象"></a>数组也是对象</h3><p>数组用<code>[]</code>表示，对象用<code>&#123;&#125;</code>表示。数组和对象一样，都可以添加属性，区别是数组中如果属性名为整数字符，则会将其作为数组元素( 有序数据 )来表示</p><p>使用 typeof 检查数组数据类型时，返回 ‘object’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">typeof</span> arr <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数组的实例属性和方法"><a href="#数组的实例属性和方法" class="headerlink" title="数组的实例属性和方法"></a>数组的实例属性和方法</h3><p><strong>属性：</strong></p><ul><li><a href="https://www.w3school.com.cn/jsref/jsref_length_array.asp"><code>.length</code></a> 返回或更改数组的长度</li></ul><p><strong>方法：</strong></p><table><thead><tr><th>方法</th><th>描述</th><th>原数组</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_concat_array.asp">.concat()</a></td><td>将两个或多个数组连接合并为一个数组，并返回合并后的数组</td><td>不改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_join.asp">.join()</a></td><td>将一个数组的所有元素连接成一个字符串，并返回这个字符串</td><td>不改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_pop.asp">.pop()</a></td><td>删除并返回数组中最后一个元素</td><td>改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_shift.asp">.shift()</a></td><td>删除并返回数组中的第一个元素</td><td>改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_push.asp">.push()</a></td><td>将一个或多个元素添加到数组的末尾，并返回该数组的新长度(<code>.length</code>)</td><td>改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_unshift.asp">.unshift()</a></td><td>将一个或多个元素添加到数组的开头，并返回该数组的新长度(<code>.length</code>)</td><td>改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_sort.asp">.sort()</a></td><td>对数组的元素进行排序，并返回排列后的数组</td><td>改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_reverse.asp">.reverse()</a></td><td>颠倒数组中元素的顺序，并返回颠倒后的数组</td><td>改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_slice_array.asp">.slice()</a></td><td>提取数组中指定的元素，并将提取出的元素作为新的数组返回</td><td>不改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_splice.asp">.splice()</a></td><td>删除或替换数组中指定的元素，并将删除或替换后的数组返回</td><td>改变</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_indexof_array.asp">.indexOf()</a></td><td>查找数组中是否包含指定的元素，如果不包含则返回<code>-1</code>，包含则返回该元素的索引值</td><td>不改变</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3><p>in运算符可以检测一个属性是否在指定的对象中，如果在则返回 <code>true</code>，不在则返回 <code>false</code></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性 <span class="keyword">in</span> 对象名 <span class="comment">//属性可以是属性名( 字符串 ) 或 数组索引( 数字 )</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> obj, <span class="string">&#x27;x&#x27;</span> <span class="keyword">in</span> obj); <span class="comment">//输出：true false</span></span><br></pre></td></tr></table></figure><h3 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h3><p><code>for...in</code>语句用来迭代对象中所有<strong>可枚举</strong>的属性</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象名) &#123;</span><br><span class="line"><span class="comment">//循环体(语句)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;obj.&quot;</span> + prop + <span class="string">&quot; = &quot;</span> + obj[prop]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips：当 in运算符在 for语句中使用时，其作用就会增加( 增加了赋值和迭代的作用 )</p><p><strong>执行步骤：</strong></p><p>在 <code>for...in</code> 语句中，in运算符会先将对象中的第1个属性名赋值到左侧变量中，赋值完成后就会执行一次循环体，之后跳回赋值阶段赋值第2个属性名，并再次执行循环体，以此不断循环直至循环到最后一个属性名为止</p><h2 id="原始值和引用值"><a href="#原始值和引用值" class="headerlink" title="原始值和引用值"></a>原始值和引用值</h2><p>JavaScript 基本数据类型在语言最底层面表现为不可变值，这些值被称为原始值，如：数值，布尔值等…</p><p>JavaScript 中 像对象、数组和函数都被称为引用值，它在语言最底层面表现为可变值</p><p>这里的可变值是指无需创建新值即可更改的值，而不可变值是指如果不创建新的值，就无法更改其数据的值</p><p>ECMAScript 标准中指定原始值存储在栈内存中，而引用值存储在堆内存中。栈内存和堆内存代表了 2 种不同的存储方式</p><blockquote><h3 id="栈内存-stack-memory"><a href="#栈内存-stack-memory" class="headerlink" title="栈内存( stack memory )"></a>栈内存( stack memory )</h3><ul><li>栈内存是一个连续的内存空间，栈内存遵循 <em>FILO</em> 的原则，即 <em>后进先出</em> 的原则</li><li>栈内存用来存储大小固定的数据，这些数据在编译时大小就被确定</li><li>在 JavaScript 中，栈内存主要被用来存储函数执行上下文及其变量</li><li>栈内存的数据存取速度要高于堆内存</li></ul><h3 id="堆内存-heap-memory"><a href="#堆内存-heap-memory" class="headerlink" title="堆内存( heap memory )"></a>堆内存( heap memory )</h3><ul><li>堆内存是一种非连续的存储结构，通常采用链表或树形结构进行管理</li><li>堆内存中每个数据项都保存了指向其它数据项的地址信息，这使得堆内存的存取非常灵活</li><li>堆内存空间是在运行时动态分配的，用于存储一些大小不确定的数据</li><li>当堆内存中的某个数据不再被引用时，它所占用的内存会被 JavaScript 引擎中的垃圾回收器自动释放。垃圾回收器会根据一定的算法来判断哪些数据没有被引用，然后释放这些数据所占用的内存</li></ul></blockquote><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">456</span>;</span><br></pre></td></tr></table></figure><p>例图：</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/s/20230503105219" alt="img01"></p><p>当创建一个对象时，会先在堆内存中分配一块内存空间来存储对象，而栈内存则存储的是该对象所在堆内存的内存地址（引用值）</p><p>例图：</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/s/20230211111728" alt="img02"></p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>);<span class="comment">//输出：&#x27;李四&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">name</span>);<span class="comment">//输出：&#x27;李四&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (四) 流程控制</title>
    <link href="https://www.timeic.top/posts/fa1154a.html"/>
    <id>https://www.timeic.top/posts/fa1154a.html</id>
    <published>2023-02-11T07:14:26.000Z</published>
    <updated>2025-09-07T23:17:01.093Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>js 中默认是从上到下一行一行执行的，这种按照顺序执行在程序中就被称作顺序结构，流程控制就是指控制程序代码的执行顺序</p><p>三种基本程序结构：</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/image/20221112102610" alt="流程控制"></p><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>顺序结构是程序中最简单、最基本的程序结构，它没有特定的语法，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的</p><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>分支结构在执行代码的时候，可以根据条件进行选择，条件越多对应的结果越多，分支也就越多。在 Js 中通过 <span title="如果...否则..."><code>if...else...</code></span> 语句、<span title="切换、开关"><code>switch</code></span> 语句 来实现分支结构</p><h3 id="单路分支"><a href="#单路分支" class="headerlink" title="单路分支"></a>单路分支</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)</span><br><span class="line">  <span class="comment">//条件为 true 时执行此处语句;</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title function_">prompt</span>(<span class="string">&quot;请输入...&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">4</span>)</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;输入的数字大于4&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="块语句"><a href="#块语句" class="headerlink" title="块语句"></a>块语句</h3><p>如果 <strong>if(条件)</strong> 后的语句有多个( 默认只匹配第一条语句 )，需要使用<code>&#123;&#125;</code>来对代码进行分组，写在<code>&#123;&#125;</code>中的代码会作为一个整体一起执行，如果只有一条语句可以省略大括号<code>&#123;&#125;</code></p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//一组语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双路分支"><a href="#双路分支" class="headerlink" title="双路分支"></a>双路分支</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">//条件为 true 时执行此处语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//条件为 false 时执行此处语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pwd = <span class="title function_">prompt</span>(<span class="string">&quot;请输入密码&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pwd == <span class="number">123</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;密码正确&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS：if…else…语句可以根据 <strong>条件</strong> 来选择执行，而条件是一个返回值为<code>true</code>或<code>false</code>的表达式</p></blockquote><h3 id="多路分支"><a href="#多路分支" class="headerlink" title="多路分支"></a>多路分支</h3><p><code>if..else...</code>语句中要实现多路分支，可以使用<code>else if</code>从句</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//条件1为 true 时执行此处语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//条件2为 true 时执行此处语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//条件3为 true 时执行此处语句</span></span><br><span class="line">&#125; ... <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//上述所有条件都为 false 时执行此处语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="title function_">prompt</span>(<span class="string">&quot;请输入你的成绩&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (score &lt; <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt;= <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">70</span> &amp;&amp; score &lt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">80</span> &amp;&amp; score &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;人才&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tips：在多路分支中当执行到某个分支且该分支的条件成立时，则执行该分支中的语句，执行完成后会自动从所有分支中跳出，如果该分支不成立则继续判断下一分支( <code>else if</code> )是否成立，以此类推…</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>在 Js 中还可以使用switch语句来实现分支结构</p><p>语法1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    <span class="comment">//当 &quot;表达式&quot; 与 &quot;值1&quot; 全等时，执行此处语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    <span class="comment">//当 &quot;表达式&quot; 与 &quot;值2&quot; 全等时，执行此处语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">    <span class="comment">//当 &quot;表达式&quot; 与 &quot;值3&quot; 全等时，执行此处语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ......</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="comment">//当上述都不成立时执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="title function_">prompt</span>(<span class="string">&quot;请输入...&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">switch</span>(num) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;6&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&quot;7&quot;</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请输入1-7以内的数字&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>将switch后括号内的 <strong>表达式</strong> 与case后的 <strong>表达式</strong> 逐一进行全等(<code>===</code>)比较</p><ul><li>当比较结果为 true 时，则停止比较，并从当前 case处向下执行( 不会自动跳出switch语句 )</li><li>当比较结果为 false 时，则继续比较下一个 case后的表达式</li></ul><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><p>用于匹配<code>switch(表达式)</code>括号中表达式的子句</p><p>它会从第一个 case 子句开始匹配，直到匹配成立( 全等, === )，则匹配结束( 不再匹配 )，执行其后的相关语句</p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break 语句用于跳出 switch语句的执行( 结束switch语句 )</p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>default 后的语句无需比较，直接执行，因此要放到最后</p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环结构就是重复不断的做一件事，在 Js 中通过<code>for</code>语句、<code>while</code>语句、<code>do...while</code>语句 来实现循环结构</p><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 条件; 更新表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行步骤：</p><ol><li>执行初始化(初始化变量)，初始化只会执行一次</li><li>执行条件，如果条件为 true，则执行循环体，并继续步骤③，如果为 false，跳出循环(循环结束)</li><li>执行更新表达式，更新表达式执行完毕重复步骤②</li></ol><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出数字1-10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化只会在第一次循环执行，通常为一个赋值语句。典型地被用于初始化一个计数器( 初始化条件 )</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>条件被用于确定每一次循环是否能被执行。如果条件为 true，则执行循环体。如果条件为 false，则从循环体中跳出( 循环结束 )，如果条件为空，则每次循环条件都为 true，即无限循环</p><h3 id="更新表达式"><a href="#更新表达式" class="headerlink" title="更新表达式"></a>更新表达式</h3><p>每次循环体执行完后都会自动跳回更新表达式。更新表达式会在下一次<strong>条件</strong>执行前执行。通常被用于更新或者自增计数器变量( 更新条件 )</p><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件) &#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  n++;<span class="comment">//更新表达式</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x+=n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h3><p>当条件为 true 时执行循环体，执行完成后则自动跳回条件判断，直到当条件为 false 时则从循环体中跳出( 循环结束 )</p><p>按照顺序结构，while语句需要将更新表达式写在循环体中，初始化需要写在whlie语句前面</p><h3 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h3><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">   <span class="comment">//循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出数字1-10</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;  <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  i++;<span class="comment">//更新表达式</span></span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="执行流程-2"><a href="#执行流程-2" class="headerlink" title="执行流程"></a>执行流程</h3><p>先执行循环体，循环体执行完后，执行条件，如果条件为 true，则继续执行循环体，如果条件为 false 则停止循环向下执行</p><h2 id="break-与-continue"><a href="#break-与-continue" class="headerlink" title="break 与 continue"></a>break 与 continue</h2><p><strong>break 语句</strong>可以中止当前循环、<code>switch</code>语句或<code>label</code>语句</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> [label]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line"><span class="keyword">break</span><span class="comment">//终止当前循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>continue 语句</strong>可以终止当前循环或标记循环的当前迭代中的语句，并在下一次迭代时继续执行循环</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span> [label]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">//输出0 1 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="label（标记语句）"><a href="#label（标记语句）" class="headerlink" title="label（标记语句）"></a>label（标记语句）</h3><p><code>break</code> 和 <code>continue</code>语句包含一个可选的标签(label)，可允许程序跳出一个被标记的语句。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标签名: 被标记的语句</span><br><span class="line"><span class="comment">//标签名建议遵循标识符规范命名</span></span><br><span class="line"><span class="comment">//被标记的语句可以是一个循环语句、switch语句，也可以直接是一个块语句</span></span><br></pre></td></tr></table></figure><p>例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">outer</span>: <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@外层循环&quot;</span>+i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">break</span> outer <span class="comment">//终止外层循环(按照顺序结构，外层循环跳过，内层循环也不会执行)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@内层循环&quot;</span>+j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">outer</span>: <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@外层循环&quot;</span>+i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span> outer</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;@内层循环&quot;</span>+j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break-和-continue-的区别"><a href="#break-和-continue-的区别" class="headerlink" title="break 和 continue 的区别"></a>break 和 continue 的区别</h3><p>break语句可以在循环语句( 如for、while等 )、switch语句中使用，而 continue 只能在 循环语句 中使用</p><p><code>continue</code> 与 <code>break</code> 语句的区别在于，continue 并不会终止整个循环，而是：</p><ul><li><p>在 <code>while</code> 循环中，会跳回条件判断</p></li><li><p>在 <code>for</code> 循环中，会跳回更新表达式</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (三) 运算符与表达式</title>
    <link href="https://www.timeic.top/posts/ca7331ed.html"/>
    <id>https://www.timeic.top/posts/ca7331ed.html</id>
    <published>2022-12-19T07:05:15.000Z</published>
    <updated>2025-09-07T23:17:01.082Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>运算符又称为操作符，运算符就是用于对数据进行各种运算的符号，JavaScript 有算术运算符、赋值运算符、关系运算符等</p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>算数运算符包括 加(<code>+</code>) 减(<code>-</code>) 乘(<code>*</code>) 除(<code>/</code>)和 取模(<code>%</code>) 运算符，对于非Number类型的数据值进行算数运算时，会将这些值转换为Number类型然会在运算，其中任何数据类型的值和 NaN 做运算都得 NaN</p><ul><li><code>+</code>可以对两个值进行加法运算，并将结果返回</li><li><code>- </code>可以对两个值进行减法运算，并将结果返回</li><li><code>*</code>可以对两个值进行乘法运算，并将结果返回</li><li><code>/ </code>可以对两个值进行除法运算，并将结果返回</li><li><code>%</code>可以对两个值进行取模运算（取余数），并将结果返回</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>+<span class="number">100</span>); <span class="comment">//输出：200</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>-<span class="literal">true</span>); <span class="comment">//输出：1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>*<span class="title class_">NaN</span>); <span class="comment">//输出：NaN</span></span><br></pre></td></tr></table></figure><h3 id="字符串加法运算"><a href="#字符串加法运算" class="headerlink" title="字符串加法运算"></a>字符串加法运算</h3><p>运算关系：</p><ul><li>任何数据类型的值与字符串相加时会先将其转换为字符串，然后将两个字符串拼接成一个字符串( 拼串 )</li><li>我们可以让任意的数据类型<code>+&quot;&quot;</code>( 空串 )使其转换为字符串( 隐式转换 )</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span> + <span class="string">&quot;1&quot;</span>); <span class="comment">//输出：&quot;1231&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;年龄：&quot;</span> + <span class="string">&quot;20&quot;</span>); <span class="comment">//输出：&quot;年龄：20&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> + <span class="string">&quot; 20&quot;</span>); <span class="comment">//输出：&quot;NaN 20&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span> + <span class="string">&quot;&quot;</span>); <span class="comment">//输出：&quot;200&quot;</span></span><br></pre></td></tr></table></figure><ul><li>加号还可以用来连接下一行的表达式</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;锄禾日当午，&quot;</span> +</span><br><span class="line">  <span class="string">&quot;汗滴禾下土。&quot;</span> +</span><br><span class="line">  <span class="string">&quot;谁吃盘中餐，&quot;</span> +</span><br><span class="line">  <span class="string">&quot;粒粒皆辛苦。&quot;</span>);    <span class="comment">//输出：&quot;锄禾日当午，汗滴禾下土。谁吃盘中餐，粒粒皆辛苦。&quot;</span></span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符 ( = )"></a>赋值运算符 ( = )</h2><p>可以将等号右边的值赋值给等号左边的变量中，但要注意变量一定要先声明，在赋值</p><p><strong>语法：</strong> <code>变量名 = 5 * 10;</code></p><h3 id="复合运算："><a href="#复合运算：" class="headerlink" title="复合运算："></a>复合运算：</h3><p><code>a+=5</code> 等同于 <code>a = a + 5</code></p><p><code>a-=5</code> 等同于 <code>a = a - 5</code></p><p><code>a*=5 </code> 等同于 <code>a = a * 5</code></p><p><code>a/=5 </code> 等同于 <code>a = a / 5</code></p><p><code>a%=5 </code> 等同于 <code>a = a % 5</code></p><h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>上面的运算符中都有两个操作数，所以它们也叫二元运算符，如果只有一个操作数那它就是一元运算符</p><p>带 <code>+</code> 号的数即正数，带 <code>-</code> 号的数即负数，正号(<code>+</code>)不会对数字产生任何影响，如果在非Number数据类型的值前加上正号(<code>+</code>)即可将其转换为Number类型( 隐式转换 )</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a = +a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出：1</span></span><br></pre></td></tr></table></figure><h3 id="自增与自减运算符"><a href="#自增与自减运算符" class="headerlink" title="自增与自减运算符"></a>自增与自减运算符</h3><p>自增运算符( ++ )，自减运算符( – )，自增和自减运算符会使**<span title="仅对变量有效">变量</span>**的值自动 +1 或 -1</p><p>自增和自减分为两种，分别是前置自增和后置自增、前置自减和后置自减</p><p><strong>语法</strong>：<code>++变量</code> or <code>变量++</code> / <code>--变量</code> or <code>变量--</code></p><p>Tips：其中后置自减和后置自增返回的是自增和自减前的值，而前置自减和前置自增返回的是自增和自减后的值</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, a++, a, ++a, a) <span class="comment">//输出：5 5 6 7 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, a--, a, --a, a) <span class="comment">//输出：7 7 6 5 5</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="与运算符-amp-amp"><a href="#与运算符-amp-amp" class="headerlink" title="与运算符 ( &amp;&amp; )"></a>与运算符 ( &amp;&amp; )</h3><p>语法：<code>表达式 &amp;&amp; 表达式</code></p><ul><li>运算时会将符号左边的值转换成布尔型再运算</li><li>如果符号左边的表达式返回值为<code>true</code>，则结果为符号右边表达式的值，反之，如果符号左边的表达式返回值为<code>false</code>，则结果为符号左边表达式的值</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line">a = <span class="title class_">NaN</span> &amp;&amp; <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b = <span class="string">&quot;你好&quot;</span> &amp;&amp; ++a); <span class="comment">//输出：1</span></span><br></pre></td></tr></table></figure><h3 id="或运算符"><a href="#或运算符" class="headerlink" title="或运算符 ( || )"></a>或运算符 ( || )</h3><p>语法：<code>表达式 || 表达式</code></p><ul><li><p>运算时会将符号左边的值转换成布尔型再运算</p></li><li><p>如果符号左边的表达式返回值为<code>false</code>，则结果为符号右边表达式的值，反之，如果符号左边的表达式返回值为<code>true</code>，则结果为符号左边表达式的值</p></li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">55</span>-<span class="number">5</span> || <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出：50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b = <span class="literal">false</span> || ++a); <span class="comment">//输出：51</span></span><br></pre></td></tr></table></figure><h3 id="非运算符"><a href="#非运算符" class="headerlink" title="非运算符 ( ! )"></a>非运算符 ( ! )</h3><p>语法：<code>!表达式</code></p><ul><li>对布尔类型数据进行反向运算( 取反 )</li><li><code>!</code> 运算符只有一个操作数，所以属于一元运算符</li><li>非布尔类型数据取反会先将其转换为布尔型在运算</li></ul><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">a = !a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//输出false</span></span><br><span class="line"><span class="comment">//还可以多次取反 !!a</span></span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>通过关系运算符可以比较两个值关系，如果关系成立 则返回 true，如果不成立 则返回 false</p><p>关系型运算符包括：</p><ul><li><p><code>&gt;</code>(大于)、<code>&gt;=</code>(大于等于)、<code>!&gt;</code>(不大于)</p></li><li><p><code>&lt;</code>(小于)、<code>&lt;=</code>(小于等于)、<code>!&lt;</code>(不小于)</p></li></ul><p>以上的关系运算符在运算时会将符号左右的操作数转换成数值型再做运算，其中NaN不和任何值相等，包括它本身，所以任何数据类型的值在和NaN做关系运算时都会返回 false</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt; <span class="literal">true</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="string">&quot;1&quot;</span>); <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt;= <span class="literal">true</span>) <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt; <span class="string">&#x27;0&#x27;</span>) <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="literal">null</span>) <span class="comment">//输出：true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt;= <span class="string">&quot;hello&quot;</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1000000000</span> &gt; <span class="title class_">NaN</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &gt; <span class="literal">false</span>) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure><p>Tips：null 在做相等运算(<code>==</code>)时不会自动转换为数值型，由于 undefined 衍生自 null，所以这两个值做相等运算时，会返回 true</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure><p>Js中还有两个关系运算符，分别为：</p><ul><li><code>===</code>(全等)</li><li><code>!==</code>(不全等)</li></ul><p>全等和不全等运算符在做运算时，不会做自动数据类型转换，如果两个不同数据类型的值做全等(<code>===</code>)运算时，直接返回 false，同样的，如果两个不同数据类型的值做不全等(<code>!==</code>)运算时，直接返回 true</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> === <span class="string">&quot;1&quot;</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> !== <span class="number">1</span>) <span class="comment">//输出：false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> !== <span class="string">&quot;1&quot;</span>) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><p>通过<code>isNaN()</code>函数可以判断一个值是否为NaN，如果为 <code>NaN</code>则返回值为<code>true</code>，否则为<code>false</code>。</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">a = <span class="title class_">Number</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="built_in">isNaN</span>(a)) <span class="comment">//输出：NaN, true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)) <span class="comment">//输出：true</span></span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>条件运算符有3个操作数，所以也称为 <strong>三元运算符</strong></p><p>语法：<code>条件 ? 表达式1 : 表达式2</code></p><ul><li><p>如果条件值为 true(非布尔值自动转换) 则执行表达式1，并返回其值，反之亦然.</p></li><li><p>三元运算符是对if……else语句的一种简化写法</p></li></ul><p>下面的范例中，如果变量 age 中的值小于 18，则向变量 voteable 赋值 “年龄太小”，否则赋值 “年龄已达到”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">voteable = (age &lt; <span class="number">18</span>) ? <span class="string">&quot;年龄太小&quot;</span> : <span class="string">&quot;年龄已达到&quot;</span>;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否年满18岁</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="built_in">parseInt</span>(<span class="title function_">prompt</span>(<span class="string">&quot;请您输入年龄&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> s = (age &gt;= <span class="number">18</span>) ? <span class="string">&#x27;18岁了&#x27;</span> : <span class="string">&#x27;未满18岁&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式是指可以进行运算，且必须返回一个确定的值的式子，一般由常量、变量、运算符、子表达式构成，最简单的表达式可以是一个简单的值( 常量 or 变量 )</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 值表达式 */</span></span><br><span class="line"><span class="number">1</span><span class="comment">//数字表达式</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span><span class="comment">//字符串表达式</span></span><br><span class="line"><span class="literal">true</span><span class="comment">//布尔值表达式</span></span><br><span class="line">a<span class="comment">//变量表达式</span></span><br></pre></td></tr></table></figure><p>在实际编程中，可以使用运算符建立复杂的表达式</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> + <span class="number">3</span> - <span class="number">2</span></span><br><span class="line">a = b * <span class="number">3</span> <span class="comment">// 赋值表达式 返回赋值结果</span></span><br><span class="line">a + <span class="number">3</span> &gt; b + <span class="number">3</span></span><br></pre></td></tr></table></figure><p>运算符一般由一些符号组成，如 “+” “/” “=” “%” 等，也有些运算符使用关键字表示，如 typeof</p><blockquote><h3 id="词（token）"><a href="#词（token）" class="headerlink" title="词（token）"></a>词（token）</h3><p>词是 JavaScript 中的最小语义单元，包括常量、变量、运算符、表达式、指令等</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 变量声明语句 */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="comment">/* 组成 */</span></span><br><span class="line"><span class="keyword">var</span><span class="comment">//指令(语句标识符)</span></span><br><span class="line">a<span class="comment">//变量名(标识符)</span></span><br><span class="line">=<span class="comment">//赋值运算符</span></span><br><span class="line"><span class="number">123</span><span class="comment">//值(数字)</span></span><br><span class="line">;<span class="comment">//运算符</span></span><br></pre></td></tr></table></figure><h3 id="语句（statement）"><a href="#语句（statement）" class="headerlink" title="语句（statement）"></a>语句（statement）</h3><p>在高级语言中，语句是一个能够对计算机下达<strong>指令</strong>的程序代码</p><p>JavaScript 语句通常以一个语句标识符为开始，并执行该语句。语句标识符用来标识程序要执行的动作，语句标识符为保留关键字不能作为任何自定义的标识符使用</p><p>多条语句之间用分号( <code>;</code> )分隔</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (二) 变量与数据类型</title>
    <link href="https://www.timeic.top/posts/9babe0a3.html"/>
    <id>https://www.timeic.top/posts/9babe0a3.html</id>
    <published>2022-09-19T06:10:37.000Z</published>
    <updated>2025-09-07T23:17:01.097Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>字面量(literal)又称直接量，是指程序中能够<strong>直接使用</strong>的值，如 3.1415926</p><p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="number">1001</span></span><br><span class="line"><span class="number">123e5</span></span><br></pre></td></tr></table></figure><p><strong>字符串（String）字面量</strong> 可以使用单引号或双引号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;John Doe&quot;</span></span><br><span class="line"><span class="string">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>表达式字面量</strong> 用于计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="number">6</span></span><br><span class="line"><span class="number">5</span> * <span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>数组（Array）字面量</strong> 用于定义一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p><strong>对象（Object）字面量</strong> 用于定义一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h2><p>变量是程序中数据的临时存放场所。在代码中可以只使用一个变量，也可以使用多个变量</p><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>JavaScript 使用 <strong>var</strong> 关键字来声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname; <span class="comment">// 变量声明</span></span><br></pre></td></tr></table></figure><p>变量声明之后，该变量默认值为<code>undefined</code></p><p>如需向变量赋值，请使用等号( = )</p><p><code>carname=&quot;Volvo&quot;;</code></p><p>我们也可以在声明变量时对其赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname = <span class="string">&quot;Volvo&quot;</span>; <span class="comment">// 定义一个变量</span></span><br></pre></td></tr></table></figure><p>下面的代码定义了一个名为 <strong>carname</strong> 的变量，并向其赋值 <code>&quot;Volvo&quot;</code>，然后把它放入 <code>id=&quot;demo&quot;</code> 的 HTML 段落中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> carname = <span class="string">&quot;Volvo&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = carname;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果一个访问一个不存在( 未声明 + 未定义 )的变量就会提示以下错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line"><span class="comment">//提示错误：message is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>默认情况下</strong> 不写声明关键字 <code>var</code> 直接赋值也可以使用变量，例如：<code>a = 123</code></p></blockquote><h3 id="一条语句，多个变量"><a href="#一条语句，多个变量" class="headerlink" title="一条语句，多个变量"></a>一条语句，多个变量</h3><p>我们可以在一条语句中声明很多变量</p><p>该语句以 var 开头，并使用逗号 ( , ) 分隔变量即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Doe&quot;</span>, age=<span class="number">30</span>, job=<span class="string">&quot;carpenter&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="标识符（identifier）"><a href="#标识符（identifier）" class="headerlink" title="标识符（identifier）"></a>标识符（identifier）</h2><p>所谓标识符，就是指变量、函数、属性的名字，或函数的参数</p><p>JavaScript 使用 Unicode 字符集，理论上标识符可以是任何字符( 包括中文 )，但考虑到兼容性和安全性问题，建议遵循规范命名</p><p>标识符需要按照以下规范命名：</p><ul><li>标识符可以是字母(A-Z.a-z)、数字(0-9)、下划线 _ 和 $，但第一个字符不能为数字(0-9)</li><li>标识符还不能以 JavaScript <strong>保留关键字</strong> 命名</li></ul><p><img src="https://cdn1.tianli0.top/gh/k34869/images/image/20221112102250" alt="keywords"></p><h3 id="字母大小写"><a href="#字母大小写" class="headerlink" title="字母大小写"></a>字母大小写</h3><p>JavaScript 是区分字母大小写的</p><p>函数 <strong>getElementById</strong> 与 <strong>getElementbyID</strong> 是不同的</p><p>同样，变量 <strong>myVariable</strong> 与 <strong>MyVariable</strong> 也是不同的</p><p>JavaScript 中，常见的是驼峰法的命名规则，如 lastName (而不是lastname)</p><h2 id="数据类型（dataType）"><a href="#数据类型（dataType）" class="headerlink" title="数据类型（dataType）"></a>数据类型（dataType）</h2><p>JavaScript 中有 5 种基本的数据类型和 1 种引用数据类型：</p><p>基本数据类型( Primitive Data Type )：</p><ol><li>字符串 ( <strong>String</strong> )</li><li>数字 ( <strong>Number</strong> )</li><li>布尔值 ( <strong>Boolean</strong> )</li><li>空 ( <strong>null</strong> )</li><li>未定义 ( <strong>undefined</strong> )</li></ol><p>引用数据类型( Reference Data Type )：</p><ul><li>对象( <strong>Object</strong> )</li></ul><h3 id="动态数据类型"><a href="#动态数据类型" class="headerlink" title="动态数据类型"></a>动态数据类型</h3><p>JavaScript 声明变量是无需指定数据类型的，js 运行时会根据变量的值确定数据类型，这意味着相同的变量可存储不同的数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;      <span class="comment">// x 为 undefined </span></span><br><span class="line">x = <span class="number">5</span>;      <span class="comment">// 现在 x 为数字</span></span><br><span class="line">x = <span class="string">&quot;John&quot;</span>; <span class="comment">// 现在 x 为字符串</span></span><br></pre></td></tr></table></figure><h2 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h2><p>多个字符连在一起就叫做字符串，字符串用引号包裹，引号可以是单引号也可以是双引号</p><p>字符串可以是引号中的任意文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname = <span class="string">&quot;Volvo XC60&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> carname = <span class="string">&#x27;Volvo XC60&#x27;</span>;</span><br></pre></td></tr></table></figure><p>字符串中可以包含引号，只要不和包围字符串的引号相同就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;It&#x27;s alright&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;He is called &#x27;Johnny&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&#x27;He is called &quot;Johnny&quot;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> answer=<span class="string">&quot;He is called &quot;</span><span class="title class_">Johnny</span><span class="string">&quot;&quot;</span>; <span class="comment">// 错误 Johnny会被当做变量</span></span><br></pre></td></tr></table></figure><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>字符串中一些特殊符号是无法直接使用的，这时就需要使用转义字符了</p><table><caption>JavaScript 转义字符</caption><tbody><tr><th>序列</th><th>代表字符</th></tr><tr><td>\0</td><td>Null字符（\u0000）</td></tr><tr><td>\b</td><td>退格符（\u0008）</td></tr><tr><td>\t</td><td>水平制表符（\u0009）</td></tr><tr><td>\n</td><td>换行符（\u000A）</td></tr><tr><td>\v</td><td>垂直制表符（\u000B）</td></tr><tr><td>\f</td><td>换页符（\u000C）</td></tr><tr><td>\r</td><td>回车符（\u000D）</td></tr><tr><td>\"</td><td>双引号（\u0022）</td></tr><tr><td>\'</td><td>撇号或单引号（\u0027）</td></tr><tr><td>\\</td><td>反斜杠（\u005C）</td></tr><tr><td>\uXXXX</td><td>由 4 位十六进制数值 XXXX 指定的 Unicode 字符 <a href="https://www.unicode.org/Public/13.0.0/charts/CodeCharts.pdf" title="CodeCharts">Unicode编码表参考书</a></td></tr></tbody></table>## 数字（Number）<p>数字 主要用于算数运算</p><p>数字可以是整数还可以是小数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">13</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">13.00</span>;</span><br></pre></td></tr></table></figure><p>对于极大或极小的数字可以通过科学 ( 指数 ) 计数法来表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></table></figure><h3 id="±infinity"><a href="#±infinity" class="headerlink" title="±infinity"></a>±infinity</h3><p>Number型的数字大小是有限的，通过输出常量<code>Number.MAX_VALUE</code>和<code>Number.MIN_VALUE</code>即可获取 js 的最大数和最小数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);</span><br><span class="line"><span class="comment">// Number.MAX_VALUE 为Js所能表示的最大正数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>);</span><br><span class="line"><span class="comment">// -Number.MAX_VALUE 为Js所能表示的最大负数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>);</span><br><span class="line"><span class="comment">// Number.MIN_VALUE 为Js所能表示的最接近0的数，即大于0的最小数值</span></span><br></pre></td></tr></table></figure><p>如果超过了<code>Number.MAX_VALUE</code>的范围，则返回<code>infinity</code>( 正无穷 )或<code>-infinity</code>( 负无穷 )</p><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>NaN（Not a Number）是一个特殊的数值，js 中如果数值计算没有结果，则返回NaN</p><h3 id="其他进制数"><a href="#其他进制数" class="headerlink" title="其他进制数"></a>其他进制数</h3><ul><li>16进制：以0x开头</li><li>8进制：以0开头</li><li>2进制：以0b开头</li></ul><h2 id="布尔值（Boolean）"><a href="#布尔值（Boolean）" class="headerlink" title="布尔值（Boolean）"></a>布尔值（Boolean）</h2><p>布尔值主要用在条件判断中</p><p>它只有两个值 true( 真 ) 或 false( 假 )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="typeof（检测数据类型）"><a href="#typeof（检测数据类型）" class="headerlink" title="typeof（检测数据类型）"></a>typeof（检测数据类型）</h2><p>功能描述：typeof 是 JavaScript 中的运算符，用来查看变量的数据类型，并返回类型字符串</p><p>语法：<code>typeof &lt;值&gt;</code></p><p>输出：</p><ul><li><p>typeof %数值%（返回值：number）</p></li><li><p>typeof %字符串%（返回值：string）</p></li><li><p>typeof %布尔值%（返回值：boolean）</p></li><li><p>typeof undefined（返回值：undefined）</p></li><li><p>typeof null（返回值：object）</p></li></ul><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>使用<code>String()</code>函数 可以将其它数据类型转换为字符串</p><p><strong>转换关系：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello_你好&quot;</span> =&gt; <span class="string">&quot;Hello_你好&quot;</span>;</span><br><span class="line"><span class="number">123</span> =&gt; <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="function"><span class="params">true</span> =&gt;</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="function"><span class="params">NaN</span> =&gt;</span> <span class="string">&quot;NaN&quot;</span>;</span><br><span class="line"><span class="function"><span class="params">undefined</span> =&gt;</span> <span class="string">&quot;undefined&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用<code>Number()</code>函数 可以将其它数据类型转换为数值型</p><p><strong>转换关系：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> =&gt; <span class="number">123</span>;</span><br><span class="line"><span class="string">&quot;Hello_你好&quot;</span> =&gt; <span class="title class_">NaN</span>;</span><br><span class="line"><span class="function"><span class="params">true</span> =&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="params">false</span> =&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="params">null</span> =&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="params">undefined</span> =&gt;</span> <span class="title class_">NaN</span>;</span><br></pre></td></tr></table></figure><p>使用<code>parseInt()</code>函数可以把一个字符串转换为一个整数（取整）</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;123a123&#x27;</span>)) <span class="comment">//输出为 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;a123&#x27;</span>)) <span class="comment">//输出为 NaN</span></span><br></pre></td></tr></table></figure><p>使用<code>parseFloat()</code>函数可以把一个字符串转换为一个浮点数（小数）</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">parseFloat</span>(<span class="string">&#x27;123.5px&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">//输出为 123.5</span></span><br></pre></td></tr></table></figure><p>使用<code>Boolean()</code>函数 可以将其它数据类型转换为布尔型</p><p><strong>转换关系：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">±<span class="number">123</span> =&gt; <span class="literal">true</span>;</span><br><span class="line"><span class="number">0</span> =&gt; <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="params">NaN</span> =&gt;</span> <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="params">undefined</span> =&gt;</span> <span class="literal">false</span>;</span><br><span class="line"><span class="string">&quot;Hello_你好&quot;</span> =&gt; <span class="literal">true</span>;</span><br><span class="line"><span class="string">&quot;&quot;</span> =&gt; <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="params">null</span> =&gt;</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript (一) 发展与使用</title>
    <link href="https://www.timeic.top/posts/72fcc0e1.html"/>
    <id>https://www.timeic.top/posts/72fcc0e1.html</id>
    <published>2022-08-19T05:52:45.000Z</published>
    <updated>2025-09-07T23:17:01.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JavaScript 是一种具有<strong>函数优先</strong>特性的轻量级、<strong>解释型</strong>( 无需手动编译，运行时边解释边执行 )的编程语言，它是运行在 Web浏览器中的一种脚本语言，当然，也还可被运行在一些非浏览器环境中，如：Node.js</p><p>进一步说，JavaScript 是一种基于原型、多范式、单线程的<strong>动态类型语言</strong>( 无需指定类型，运行时确定类型 )，并且支持面向对象、命令式和声明式( 如函数式编程 )风格</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><blockquote><ul><li>JavaScript 最初由 Netscape( 网景公司 )的一位工程师，名叫( <a href="https://baike.baidu.com/item/Brendan%20Eich/561441">Brendan Eich</a> )设计的，起初命名为 LiveScript，后来由于 Netscape公司在与 Sun公司合作之后将其改名为 JavaScript</li></ul></blockquote><blockquote><ul><li>JavaScript 最初受 Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自 Java。但 JavaScript 的主要设计原则源自 Self 和 Scheme。JavaScript 与 Java名称上的近似，是当时 Netscape 为了营销考虑与 Sun微系统达成协议的结果。为了取得技术优势，微软推出了 JScript 来迎战 JavaScript 的脚本语言</li></ul></blockquote><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/image/20221206161239" alt="三大公司"></p><blockquote><ul><li>后来，为了互用性，Netscape 公司将 JavaScript 提交给欧洲计算机制造商协会( ECMA )，制定了 ECMA-262标准（ECMAScript）</li></ul></blockquote><blockquote><ul><li>发展初期，JavaScript 的标准并未确定，同期有 Netscape 的 JavaScript，微软的 JScript 和 CEnvi 的 ScriptEase 三足鼎立。1997年，在ECMA（欧洲计算机制造商协会）的协调下，由 Netscape、Sun、微软、Borland 组成的工作组确定统一标准：ECMA-262</li></ul></blockquote><h3 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h3><table><thead><tr><th>年份</th><th>事件</th></tr></thead><tbody><tr><td>1995</td><td>网景公司开发了 JavaScript 语言</td></tr><tr><td>1996</td><td>微软发布了和 JavaScript 兼容的 JScript</td></tr><tr><td>1997</td><td>ECMAScript 1.0 版（ECMA-262）发布</td></tr><tr><td>1998</td><td>ECMAScript 2.0 版 发布</td></tr><tr><td>1998</td><td>DOM Level1 的制定</td></tr><tr><td>1998</td><td>新技术 DHTML 登场</td></tr><tr><td>1999</td><td>ECMAScript 3.0 版 发布</td></tr><tr><td>2000</td><td>DOM Level2 的制定</td></tr><tr><td>2002</td><td>ISO/IEC 16262:2002 的确立</td></tr><tr><td>2004</td><td>DOM Level3 的制定</td></tr><tr><td>2005</td><td>新技术 AJAX 登场</td></tr><tr><td>2009</td><td>ECMAScript 5.0 版 发布</td></tr><tr><td>2009</td><td>新技术 HTML5 登场</td></tr><tr><td>2011</td><td>ISO/IEC 16262:2011 的确立</td></tr><tr><td>2013</td><td>ECMAScript 6.0 版 发布</td></tr></tbody></table><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><blockquote><p>ECMAScript 是一个标准而这个标准需要由各个浏览器厂商去实现</p><p>不同浏览器厂商对该标准有不同的实现</p></blockquote><table><thead><tr><th>浏览器</th><th>JavaScript 引擎( 实现 )</th></tr></thead><tbody><tr><td>FireFox</td><td>SpiderMonkey</td></tr><tr><td>Internet Explorer</td><td>JScript/Chakra</td></tr><tr><td>Safari</td><td>JavaScriptCore</td></tr><tr><td>Chrome</td><td>V8</td></tr><tr><td>Opera</td><td>Carakan</td></tr></tbody></table><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>ECMAScript 是 JavaScript的标准，所以一般情况下这两个词我们认为是一个意思，但实际上 JavaScript 的含义却要更大一些。一个完整的浏览器 JavaScript 实现由以下三部分组成：</p><ul><li>ECMAScript（描述了该语言的语法和基本对象）</li><li>文档对象模型（DOM）描述处理网页内容的方法和接口</li><li>浏览器对象模型（BOM）描述与浏览器进行交互的方法和接口</li></ul><h2 id="代码编写位置"><a href="#代码编写位置" class="headerlink" title="代码编写位置"></a>代码编写位置</h2><h3 id="1、内部JS代码"><a href="#1、内部JS代码" class="headerlink" title="1、内部JS代码"></a>1、内部JS代码</h3><p>直接将 js 代码写在<code>&lt;script&gt;&lt;/script&gt;</code>标签内，浏览器检索到<code>&lt;script&gt;</code>标签时会自动调用 <strong>JavaScript引擎</strong> 来执行 js 代码</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//第一个Js程序</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性：</strong></p><ul><li><code>type</code>：默认值<code>text/javascript</code>可省略，默认还是这个值</li></ul><h3 id="2、外部JS代码"><a href="#2、外部JS代码" class="headerlink" title="2、外部JS代码"></a>2、外部JS代码</h3><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hello.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过&lt;script&gt;标签的src属性来引入外部js文件 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> hello.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="comment">//在外部js文件编写js代码</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>//..</code> 行注释</li><li><code>/* ..注释内容.. */</code> 块注释</li><li>注释的内容则会被 <strong>js引擎</strong> 忽略不执行</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="https://www.timeic.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Adaptation &amp; Responsive Web Design</title>
    <link href="https://www.timeic.top/posts/a528d8db.html"/>
    <id>https://www.timeic.top/posts/a528d8db.html</id>
    <published>2022-05-22T16:00:00.000Z</published>
    <updated>2025-09-07T23:17:01.158Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Device-Pixels-（设备像素）"><a href="#Device-Pixels-（设备像素）" class="headerlink" title="_Device Pixels_（设备像素）"></a>_Device Pixels_（设备像素）</h3><p>屏幕上显示的任何画面，都是由一个个能够产生不同颜色的点构成，这些点叫做像素（<em>Pixel</em>）</p><p>我们将屏幕上的物理像素称为 “设备像素”，即设备屏幕上的<strong>实际</strong>像素点，数量固定</p><p>与设备物理像素相关的另一个概念是 _Pixels Per Inch_（每英寸像素数, <em>PPI</em>），它代表屏幕对角线的物理像素个数除以对角线英寸数，用于表示<strong>屏幕密度</strong></p><h3 id="CSS-Pixels-（CSS-像素）"><a href="#CSS-Pixels-（CSS-像素）" class="headerlink" title="_CSS Pixels_（CSS 像素）"></a>_CSS Pixels_（CSS 像素）</h3><p>CSS 像素是网页设计中常用的长度单位( px )，用于定义元素的尺寸、边距、字体大小等。 它是一种抽象的逻辑像素单位，数量可以根据设备的 <em>DPR</em> 进行缩放，因此数量与设备物理像素不一一对应</p><h3 id="Device-Pixel-Ratio-（设备像素比）"><a href="#Device-Pixel-Ratio-（设备像素比）" class="headerlink" title="_Device Pixel Ratio_（设备像素比）"></a>_Device Pixel Ratio_（设备像素比）</h3><p><em>DPR</em> 指的是设备物理像素数和 CSS 像素数的比例( <code>DPR = 物理像素数 / CSS 像素数</code> )。在<strong>屏幕密度</strong>( <em>PPI</em> )高的设备上，为了保持元素的可读性和可点击性，浏览器会将多个物理像素映射为一个 CSS 像素。 这使得网页在不同设备上看起来大小一致</p><p>设备像素比( <em>DPR</em> )可以通过 <code>window.devicePixelRatio</code> API 来获取</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/1000006205.4cl4xhn5xu.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/1000006205.4cl4xhn5xu.webp"></p><h3 id="viewport-（视口）"><a href="#viewport-（视口）" class="headerlink" title="_viewport_（视口）"></a>_viewport_（视口）</h3><p>在桌面端，视口通常指代浏览器的窗口，但不包括浏览器的 UI，菜单栏等</p><p>视口通常被细分为布局视口、视觉视口和理想视口</p><h3 id="布局视口（Layout-Viewport）"><a href="#布局视口（Layout-Viewport）" class="headerlink" title="布局视口（Layout Viewport）"></a>布局视口（<em>Layout Viewport</em>）</h3><p>在没有手动设置布局视口的宽度下，移动端浏览器通常会默认设置一个较大的布局视口宽度，通常为 980px。这样做的目的是为了确保 PC 端的页面能够在移动端浏览器中完整显示，所以移动端浏览器在网页刚打开时会“缩放”，让整个页面塞进屏幕中</p><p> <code>布局视口的宽度 ≈ document.documentElement.clinetWidth</code><br> <code>布局视口的高度 ≈ document.documentElement.clinetHeight</code></p><p>其中 CSS 中 <code>vw/vh</code> 单位就是相对于布局视口</p><h3 id="视觉视口（Visual-Viewport）"><a href="#视觉视口（Visual-Viewport）" class="headerlink" title="视觉视口（Visual Viewport）"></a>视觉视口（<em>Visual Viewport</em>）</h3><p>视觉视口是用户真实可见的区域，当用户用手势放大网页时，视觉视口变小（显示的是局部放大），因此视觉视口的尺寸会随着用户手势放大/缩小实时变化，但布局视口大小不会发生变化</p><p>视觉视口的尺寸可以通过 <code>window.visualViewport</code> API 来获取，它会返回一个对象，其中包含了视觉视口的宽高、缩放比等参数。详细参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/VisualViewport">https://developer.mozilla.org/zh-CN/docs/Web/API/VisualViewport</a></p><h3 id="理想视口（Ideal-Viewport）"><a href="#理想视口（Ideal-Viewport）" class="headerlink" title="理想视口（Ideal Viewport）"></a>理想视口（<em>Ideal Viewport</em>）</h3><p>移动端浏览器推荐的适配宽度（用来达到最佳显示效果），通常为设备的<strong>逻辑像素</strong>( CSS 像素 )宽度</p><p>一般我们用 <code>meta viewport</code> 来设置它</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置后，布局视口 = 视觉视口 ≈ 设备的<strong>逻辑像素</strong>( CSS 像素 )宽度</p><p><code>width</code> 用来设置布局视口的宽度，<code>device-width</code> 代表使用设备的逻辑像素宽度作为布局视口宽度，也可以指定一个具体的数值( 单位 CSS 像素 )作为布局视口的宽度</p><p><code>initial-scale</code> 用来设置初始缩放比，它会改变视觉视口的大小，1 代表网页刚打开时不缩放，取值范围 <code>0.0-10.0</code></p><p><code>user-scalable</code> 用来设置是否允许用户手势放大或缩小网页，值为 <code>no</code> 则不允许，值为 <code>yes</code> 则允许</p><h3 id="移动设备与传统-PC-的差异"><a href="#移动设备与传统-PC-的差异" class="headerlink" title="移动设备与传统 PC 的差异"></a>移动设备与传统 PC 的差异</h3><p>移动设备和传统 PC 在屏幕尺寸、交互方式方面存在根本差异，用户界面需要适应用户的设备以提供良好的用户体验</p><ul><li>屏幕尺寸<ul><li>移动设备通常在 3~7 英寸( 手机 )</li><li>传统 PC 通常在 13~32 英寸</li></ul></li><li>屏幕密度<ul><li>移动设备屏幕密度( <em>PPI</em> )高，DPR 通常 ≥2</li><li>传统 PC 屏幕密度略低，DPR 一般为 1</li></ul></li><li>视口宽度<ul><li>移动设备常见为 360~430px</li><li>传统 PC 通常为 1024px 以上</li></ul></li><li>交互方式<ul><li>移动设备为手指触摸操作</li><li>传统 PC 主要以鼠标和键盘操作</li></ul></li></ul><h3 id="rem-移动端自适应布局"><a href="#rem-移动端自适应布局" class="headerlink" title="rem 移动端自适应布局"></a>rem 移动端自适应布局</h3><p>rem 是 CSS 中的相对单位</p><ul><li>rem 相对于根元素 html 的 <code>font-size</code>，如根元素 <code>font-size</code> 为 16px，则 2rem 等于 2 倍的 16px</li></ul><p>rem 移动端适配方案的原理是通过动态设置 <code>&lt;html&gt;</code> 的 <code>font-size</code>，让整个页面的 <code>rem</code> 单位和屏幕宽度绑定，从而实现<strong>不同屏幕宽度下的等比例缩放布局</strong></p><ol><li>设置 <code>meta viewport</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">设置视口宽度 = device-width, 即设备逻辑像素宽度, 该值是一个动态值, 它是移动端设备最理想的视口宽度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 JavaScript 动态设置 <code>html</code> 的 <code>font-size</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 html 元素</span></span><br><span class="line"><span class="keyword">const</span> rootElement = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setRam 函数, 用来动态设置 html font-size</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setRem</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">clientWidth / 10</span></span><br><span class="line"><span class="comment">将当前设备的逻辑像素宽度 除于 10</span></span><br><span class="line"><span class="comment">假设设计稿宽度为375px, 则 1rem 等于 375 / 10 = 37.5px</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> rem = rootElement.<span class="property">clientWidth</span> / <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将计算获取的动态值设置为 html 的 font-size</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">rootElement.<span class="property">style</span>.<span class="property">fontSize</span> = rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 resize 事件监听, 当窗口尺寸发生变化时执行 setRem 函数, 以更新 html font-size</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, setRem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面刚打开时, 执行一次 setRem 函数, 初始化 html font-size</span></span><br><span class="line"><span class="title function_">setRem</span>();</span><br></pre></td></tr></table></figure><ol start="3"><li>写 CSS 时使用 <code>rem</code> 单位</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2rem</span>; <span class="comment">/* 假设设计稿的宽度为375px, 则 2rem = 2 * 37.5 = 75px */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.28rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可优化项：</strong></p><ul><li>使用构建工具的 <code>postcss-pxtorem</code> 插件自动将 px 转为 rem</li><li>使用媒体查询控制最大最小宽度，避免过大/过小设备出问题</li></ul><p><strong>Tips：</strong></p><ul><li>rem 搭配 meta viewport 实现页面的等比例缩放，它的本质是一种缩放式的静态布局，它可以做到适配不同手机屏幕宽度/分辨率</li><li>这种布局方式还可以通过 vw 单位实现，vw 是直接相对于视口宽度，因此它不需要额外编写 js 代码</li></ul><h2 id="响应式网页设计"><a href="#响应式网页设计" class="headerlink" title="响应式网页设计"></a>响应式网页设计</h2><p>响应式网页设计（Responsive Web Design，简称 RWD）是一种网页开发技术，旨在使网页在不同设备（如手机、平板、桌面电脑）上都具有良好的显示效果和用户体验。其核心目标是“一次开发，多端适配”</p><p><img src="https://github.com/k34869/picx-images-hosting/raw/master/image.2rvf9onq2c.webp" alt="https://github.com/k34869/picx-images-hosting/raw/master/image.2rvf9onq2c.webp"></p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>使用相对单位（如 <code>%</code>、<code>em</code>、<code>rem</code>）替代固定单位（如 <code>px</code>），使网页元素根据屏幕宽度自动伸缩</li><li>通过 CSS 的 <code>@media</code> 规则，根据不同设备的特性（屏幕宽度、方向等）应用不同样式</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例子 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 CSS Grid / Flex，实现 页面元素的弹性拉伸 或 多列排布自动换行…</li><li>移动端要在 <code>&lt;head&gt;</code> 中设置 <code>meta viewport</code>，使移动设备正确渲染网页</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体查询（Media-Queries）"><a href="#媒体查询（Media-Queries）" class="headerlink" title="媒体查询（Media Queries）"></a>媒体查询（<em>Media Queries</em>）</h3><p>CSS 媒体查询允许开发者根据设备的特性（如屏幕宽度、分辨率、方向等）来应用不同的 CSS 样式。它是实现响应式网页设计的核心工具之一</p><p>基本语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> 条件 &#123;</span><br><span class="line">  <span class="comment">/* 适用于符合上述条件的样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>媒体特性( 常用 )：</p><ul><li><code>max-width</code>：最大宽度，适用于屏幕宽度小于等于某个值的情况</li><li><code>min-width</code>：最小宽度，适用于屏幕宽度大于等于某个值的情况</li><li><code>max-height</code>：最大高度，适用于屏幕高度小于等于某个值的情况</li><li><code>min-height</code>：最小高度，适用于屏幕高度大于等于某个值的情况</li><li><code>orientation</code>：设备的方向，可以是 <code>portrait</code>（竖屏）或 <code>landscape</code>（横屏）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 屏幕宽度小于等于768px时，应用此样式 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 屏幕宽度大于等于768px时，应用此样式 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>媒体类型：</p><ul><li><code>all</code>：适用于所有媒体类型</li><li><code>print</code>：用于打印设备</li><li><code>screen</code>：用于计算机屏幕（如 平板电脑和智能手机等）</li><li><code>speech</code>： 用于大声“朗读”页面的屏幕阅读器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 屏幕宽度小于等于480px, 同时为计算机屏幕设备时应用此样式 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断点（Break-Point）"><a href="#断点（Break-Point）" class="headerlink" title="断点（Break Point）"></a>断点（<em>Break Point</em>）</h3><p>断点是控制何时可以在特定的屏幕或设备大小下更改布局</p><p>常见断点：</p><table><thead><tr><th>设备类型</th><th>宽度范围</th></tr></thead><tbody><tr><td>手机（小屏）</td><td>0 - 576px</td></tr><tr><td>平板电脑</td><td>577px - 768px</td></tr><tr><td>小型桌面，如笔记本电脑</td><td>769px - 992px</td></tr><tr><td>中大型桌面，如台式机</td><td>993px - 1200px</td></tr><tr><td>超大屏幕，如电视</td><td>1201px 以上</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CSS" scheme="https://www.timeic.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>DOS命令</title>
    <link href="https://www.timeic.top/posts/ba611fe6.html"/>
    <id>https://www.timeic.top/posts/ba611fe6.html</id>
    <published>2021-10-02T07:48:09.000Z</published>
    <updated>2025-09-07T23:17:01.141Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>DOS是<strong>Disk Operating System</strong>(磁盘操作系统)的缩写，常见的DOS有两种：IBM公司的<a href="https://baike.baidu.com/item/PC-DOS">PC-DOS</a>和微软公司的<a href="https://baike.baidu.com/item/MS-DOS">MS-DOS</a></p><p><strong>MS-DOS</strong> 它是由美国微软公司发展的操作系统，运行在<strong>Intel x86</strong>个人电脑上。自微软图形界面操作系统<a href="https://baike.baidu.com/item/Windows%20NT">Windows NT</a>问世以来，DOS就作为一个后台程序的形式出现，我们可以通过键盘快捷键<kbd>Win</kbd> + <kbd>R</kbd> 打开运行窗口-在里面输入 <code>cmd</code> 回车即可进入DOS界面。</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/images/image/20220728132900" alt="cmd"></p><blockquote><p><em>DOS命令，计算机术语，是指DOS操作系统(单任务的操作系统)的命令，是一种面向磁盘的操作命令，主要包括目录操作类命令、磁盘操作类命令、文件操作类命令和其它命令。</em></p></blockquote><h2 id="内部命令与外部命令"><a href="#内部命令与外部命令" class="headerlink" title="内部命令与外部命令"></a>内部命令与外部命令</h2><p>内部命令，是指在DOS启动之后，自动通过<code>command.com</code>文件导入内存的命令。在执行这些命令的时候，直接从内存进行调用。<code>command.com</code>文件是DOS的核心程序，也就是说内部命令是由DOS自身提供。而外部命令是一条单独的<strong>可执行文件</strong>。</p><p>外部命令需要保证程序的可执行文件(.exe或.com)在当前的目录中，或在环境变量<code>PATH</code>中。</p><p>DOS的外部命令就是一些应用程序，这些外部命令都是以文件的形式存在。</p><p>内部命令相比于外部命令其特点就是执行速度快且无需额外安装在任何时候都可以使用。</p><h2 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">calc</td><td align="center">启动计算器</td><td align="center">diskmgmt.msc</td><td align="center">磁盘管理实用程序</td></tr><tr><td align="center">certmgr.msc</td><td align="center">证书管理实用程序</td><td align="center">dvdplay</td><td align="center">DVD播放器</td></tr><tr><td align="center">charmap</td><td align="center">启动字符映射表</td><td align="center">dxdiag</td><td align="center">检查DirectX信息</td></tr><tr><td align="center">chkdsk.exe</td><td align="center">Chkdsk磁盘检查</td><td align="center">eudcedit</td><td align="center">造字程序</td></tr><tr><td align="center">cmd.exe</td><td align="center">CMD命令提示符</td><td align="center">eventvwr</td><td align="center">事件查看器</td></tr><tr><td align="center">compmgmt.msc</td><td align="center">打开计算机管理</td><td align="center">explorer</td><td align="center">打开资源管理器</td></tr><tr><td align="center">cliconfg</td><td align="center">SQL SERVER 客户端网络实用程序</td><td align="center">fsmgmt.msc</td><td align="center">共享文件夹管理器</td></tr><tr><td align="center">dcomcnfg</td><td align="center">打开系统组件服务</td><td align="center">gpedit.msc</td><td align="center">组策略</td></tr><tr><td align="center">devmgmt.msc</td><td align="center">设备管理器</td><td align="center">netplwiz</td><td align="center">用户账户</td></tr><tr><td align="center">logoff</td><td align="center">注销命令</td><td align="center">ntmsmgr.msc</td><td align="center">移动存储管理器</td></tr><tr><td align="center">lusrmgr.msc</td><td align="center">本机用户和组</td><td align="center">ntmsoprq.msc</td><td align="center">移动存储管理员操作请求</td></tr><tr><td align="center">magnify</td><td align="center">放大镜实用程序</td><td align="center">odbcad32</td><td align="center">ODBC数据源管理器</td></tr><tr><td align="center">mmc</td><td align="center">打开控制台</td><td align="center">osk</td><td align="center">打开屏幕键盘</td></tr><tr><td align="center">mobsync</td><td align="center">同步命令</td><td align="center">perfmon.msc</td><td align="center">计算机性能监测程序</td></tr><tr><td align="center">Msconfig.exe</td><td align="center">系统配置实用程序</td><td align="center">regedit.exe</td><td align="center">注册表</td></tr><tr><td align="center">mspaint</td><td align="center">画图板</td><td align="center">regedt32</td><td align="center">注册表编辑器</td></tr><tr><td align="center">mstsc</td><td align="center">远程桌面连接</td><td align="center">rononce -p</td><td align="center">15秒关机</td></tr><tr><td align="center">narrator</td><td align="center">屏幕“讲述人”</td><td align="center">regsvr32 /u zipfldr.dll</td><td align="center">取消ZIP支持</td></tr><tr><td align="center">netstat -an</td><td align="center">(TC)命令检查接口</td><td align="center">regsvr32 /u *.dll</td><td align="center">停止dll文件运行</td></tr><tr><td align="center">notepad</td><td align="center">打开记事本</td><td align="center">rsop.msc</td><td align="center">组策略结果集</td></tr><tr><td align="center">Nslookup</td><td align="center">IP地址侦测器</td><td align="center">secpol.msc</td><td align="center">本地安全策略</td></tr><tr><td align="center">ntbackup</td><td align="center">系统备份和还原</td><td align="center">services.msc</td><td align="center">本地服务设置</td></tr><tr><td align="center">sfc /scannow</td><td align="center">windows文件保护</td><td align="center">taskmgr</td><td align="center">任务管理器</td></tr><tr><td align="center">sysdm.cpl</td><td align="center">系统属性</td><td align="center">msinfo32</td><td align="center">系统信息</td></tr><tr><td align="center">sfc.exe</td><td align="center">系统文件检查器</td><td align="center">tsshutdn</td><td align="center">60秒倒计时关机命令</td></tr><tr><td align="center">shrpubw</td><td align="center">创建共享文件夹</td><td align="center">utilman</td><td align="center">辅助工具管理器</td></tr><tr><td align="center">sigverif</td><td align="center">文件签名验证程序</td><td align="center">wiaacmgr</td><td align="center">扫描仪和照相机向导</td></tr>    <tr><td align="center">winver</td><td align="center">检查Windows版本</td><td align="center">wmimgmt.msc</td><td align="center">打开windows管理体系结构(WMI)</td></tr><tr><td align="center">write</td><td align="center">写字板</td><td align="center">wscript</td><td align="center">windows脚本宿主设置</td></tr></tbody></table><h2 id="内部命令"><a href="#内部命令" class="headerlink" title="内部命令"></a>内部命令</h2><table><thead><tr><th align="center">命令</th><th align="center">描述</th><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">assoc</td><td align="center">显示或修改文件扩展名关联。</td><td align="center">attrib</td><td align="center">显示或更改文件属性。</td></tr><tr><td align="center">break</td><td align="center">设置或清除扩展式CTRL+C检查。</td><td align="center">bootcfg</td><td align="center">设置boot.ini文件的属性以便控制启动加载。</td></tr><tr><td align="center">cacls</td><td align="center">显示或修改文件的访问控制列表(ACL)。</td><td align="center">call</td><td align="center">从另一个批处理程序调用这一个。</td></tr><tr><td align="center">cd</td><td align="center">显示当前目录的名称或将其更改。</td><td align="center">chcp</td><td align="center">显示或设置活动代码页数。</td></tr><tr><td align="center">chdir</td><td align="center">显示当前目录的名称或将其更改。</td><td align="center">color</td><td align="center">设置默认控制台前景和背景颜色。</td></tr><tr><td align="center">chkdsk</td><td align="center">检查磁盘并显示状态报告。</td><td align="center">comp</td><td align="center">比较两个或两套文件的内容。</td></tr><tr><td align="center">chkntfs</td><td align="center">显示或修改启动时间磁盘检查。</td><td align="center">compact</td><td align="center">显示或更改NTFS分区上文件的压缩。</td></tr><tr><td align="center">cls</td><td align="center">清除屏幕。</td><td align="center">convert</td><td align="center">将FAT卷转换成NTFS。您不能转换当前驱动器。</td></tr><tr><td align="center">cmd</td><td align="center">打开另一个Windows命令解释程序窗口。</td><td align="center">copy</td><td align="center">将至少一个文件复制到另一个位置。</td></tr><tr><td align="center">date</td><td align="center">显示或设置日期。</td><td align="center">MOVE</td><td align="center">将一个或多个文件从一个目录移动到另一个目录。</td></tr><tr><td align="center">del</td><td align="center">删除至少一个文件。</td><td align="center">OPENFILES</td><td align="center">显示远程用户为了文件共享而打开的文件。</td></tr><tr><td align="center">dir</td><td align="center">显示一个目录中的文件和子目录。</td><td align="center">PAGEFILECONFIG</td><td align="center">显示或配置页面文件的属性。</td></tr><tr><td align="center">DISKCOMP</td><td align="center">比较两个软盘的内容。</td><td align="center">path</td><td align="center">为可执行文件显示或设置搜索路径。</td></tr><tr><td align="center">DISKCOPY</td><td align="center">将一个软盘的内容复制到另一个软盘。</td><td align="center">pause</td><td align="center">停止批处理文件的处理并显示信息。</td></tr><tr><td align="center">DISKPART</td><td align="center">显示或配置磁盘分区属性。</td><td align="center">POPD</td><td align="center">还原由PUSHD保存的当前目录上一次的值。</td></tr><tr><td align="center">DOSKEY</td><td align="center">编辑命令行、调用Windows命令并创建宏。</td><td align="center">PRINT</td><td align="center">打印一个文本文件。</td></tr><tr><td align="center">DRIVERQUERY</td><td align="center">显示当前设备驱动程序状态和属性。</td><td align="center">PROMPT</td><td align="center">改变Windows命令提示。</td></tr><tr><td align="center">echo</td><td align="center">显示消息，或将命令回显打开或关上。</td><td align="center">PUSHD</td><td align="center">保存当前目录，然后对其进行更改。</td></tr><tr><td align="center">ENDLOCAL</td><td align="center">结束批文件中环境更改的本地化。</td><td align="center">rd</td><td align="center">删除目录。</td></tr><tr><td align="center">ERASE</td><td align="center">删除一个或多个文件。</td><td align="center">RECOVER</td><td align="center">从损坏的磁盘中恢复可读取的信息。</td></tr><tr><td align="center">EVENTQUERY</td><td align="center">显示指定准则的事件日志项目。</td><td align="center">rem</td><td align="center">记录批处理文件或CONFIG.SYS中的注释。</td></tr><tr><td align="center">exit</td><td align="center">退出CMD.EXE程序(命令解释程序)。</td><td align="center">ren</td><td align="center">重新命名文件。</td></tr><tr><td align="center">fc</td><td align="center">比较两个文件或两个文件集并显示它们之间的不同。</td><td align="center">rename</td><td align="center">重新命名文件。</td></tr><tr><td align="center">find</td><td align="center">在一个或多个文件中搜索一个文字字符串。</td><td align="center">REPLACE</td><td align="center">替换文件。</td></tr><tr><td align="center">FINDSTR</td><td align="center">在多个文件中搜索字符串。</td><td align="center">rmdir</td><td align="center">删除目录。</td></tr><tr><td align="center">for</td><td align="center">为一套文件中的每个文件运行一个指定的命令。</td><td align="center">set</td><td align="center">显示、设置或删除Windows环境变量。</td></tr><tr><td align="center">FORMAT</td><td align="center">格式化磁盘，以便跟Windows使用。</td><td align="center">SETLOCAL</td><td align="center">开始用批文件改变环境的本地化。</td></tr><tr><td align="center">FSUTIL</td><td align="center">显示或配置文件系统的属性。</td><td align="center">sc</td><td align="center">显示或配置服务(后台处理)。</td></tr><tr><td align="center">ftype</td><td align="center">显示或修改用在文件扩展名关联的文件类型。</td><td align="center">SCHTASKS</td><td align="center">安排命令和程序在一部计算机上按计划运行。</td></tr><tr><td align="center">goto</td><td align="center">将Windows命令解释程序指向批处理程序</td><td align="center">SHIFT</td><td align="center">调整批处理文件中可替换参数的位置。</td></tr><tr><td align="center">GPRESULT</td><td align="center">显示机器或用户的组策略信息。</td><td align="center">SHUTDOWN</td><td align="center">让机器在本地或远程正确关闭。</td></tr><tr><td align="center">GRAFTABL</td><td align="center">启用Windows在图形模式显示扩展字符集。</td><td align="center">sort</td><td align="center">将输入排序。</td></tr><tr><td align="center">help</td><td align="center">提供Windows命令的帮助信息。</td><td align="center">start</td><td align="center">打开单独视窗运行指定程序或命令。</td></tr><tr><td align="center">if</td><td align="center">在批处理程序中执行有条件的处理过程。</td><td align="center">subst</td><td align="center">将驱动器号与路径关联。</td></tr><tr><td align="center">label</td><td align="center">创建、更改或删除磁盘的卷标。</td><td align="center">SYSTEMINFO</td><td align="center">显示机器的具体的属性和配置。</td></tr><tr><td align="center">md</td><td align="center">创建一个目录。</td><td align="center">tasklist</td><td align="center">显示包括服务的所有当前运行的任务。</td></tr><tr><td align="center">mkdir</td><td align="center">创建一个目录。</td><td align="center">taskkill</td><td align="center">终止正在运行的进程或应用程序。</td></tr><tr><td align="center">mode</td><td align="center">配置系统设备。</td><td align="center">time</td><td align="center">显示或设置系统时间。</td></tr><tr><td align="center">more</td><td align="center">逐屏显示输出。</td><td align="center">title</td><td align="center">设置CMD.EXE会话的窗口标题。</td></tr><tr><td align="center">wmic</td><td align="center">在交互命令外壳里显示WMI信息。</td><td align="center">verify</td><td align="center">告诉Windows验证文件是否正确写入磁盘。</td></tr><tr><td align="center">xcopy</td><td align="center">复制文件和目录树。</td><td align="center">ver</td><td align="center">显示Windows的版本。</td></tr><tr><td align="center">vol</td><td align="center">显示磁盘卷标和序列号。</td><td align="center">type</td><td align="center">显示文本文件的内容。</td></tr><tr><td align="center">tree</td><td align="center">以图形显示启动器或路径的目录结构。</td><td align="center">ping</td><td align="center">网络命令</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Windows" scheme="https://www.timeic.top/categories/Windows/"/>
    
    
    <category term="命令行" scheme="https://www.timeic.top/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>CSS Transition &amp; Animation &amp; Transfrom</title>
    <link href="https://www.timeic.top/posts/78c3a8c8.html"/>
    <id>https://www.timeic.top/posts/78c3a8c8.html</id>
    <published>2021-09-22T16:00:00.000Z</published>
    <updated>2025-09-07T23:17:01.164Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="过渡（transition）"><a href="#过渡（transition）" class="headerlink" title="过渡（transition）"></a>过渡（transition）</h2><p>CSS transition 提供了一种在更改 CSS 属性时控制动画速度的方法。它可以让属性变化成为一个持续一段时间的过程，而不是立即生效的。比如，将一个元素的颜色从白色改为黑色，通常这个改变是立即生效的，使用 CSS transition 后该元素的颜色将逐渐从白色变为黑色，按照一定的曲线速率变化</p><p>过渡相关属性：</p><ul><li><p><code>transition-property</code> 指定过渡效果中的样式属性名称，默认值：all（所有属性）</p></li><li><p><code>transition-duration</code> 属性以秒( s )或毫秒( ms )为单位，用于指定过渡动画所需的时间，默认值：0s</p></li><li><p><code>transition-timing-function</code> 用于定义过渡效果的时序计算函数</p><p>关键字：</p><ul><li><code>ease</code>：默认值，元素样式从初始状态过渡到终止状态时速由快到慢。</li><li><code>linear</code>：元素样式从初始状态过渡到终止状态时速是匀速。</li><li><code>ease-in</code>：元素样式从初始状态过渡到终止状态时速由慢到快。</li><li><code>ease-out</code>：元素样式从初始状态过渡到终止状态时速由快到慢。</li><li><code>ease-in-out</code>：元素样式从初始状态过渡到终止状态时，先加速再减速。</li></ul><p>函数：</p><ul><li><code>steps()</code>：将整个过渡过程划分成相同大小的间隔，每个间隔是相等的</li><li><a href="https://cubic-bezier.com/"><code>cubic-bezier()</code></a>：贝塞尔曲线函数</li></ul></li><li><p><code>transition-delay</code> 单位s或ms，用于指定过渡效果开始的延迟时间，默认值：0s</p></li></ul><p>过渡简写属性：</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;delay&gt; &lt;timing-function&gt;, +</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;property&gt; 过渡中应用的CSS属性名</span></span><br><span class="line"><span class="comment">&lt;duration&gt; 过渡动画所需的时间 &lt;-</span></span><br><span class="line"><span class="comment">&lt;delay&gt; 过渡效果开始的延迟时间 -&gt;</span></span><br><span class="line"><span class="comment">&lt;timing-function&gt; 过渡效果的时序计算函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: width <span class="number">2s</span>, height <span class="number">2s</span>, background <span class="number">1s</span>; <span class="comment">/* 同时设置3个属性的过渡时长 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="触发过渡"><a href="#触发过渡" class="headerlink" title="触发过渡"></a>触发过渡</h3><p>过渡效果必须在指定元素的指定属性值发生变化时才会产生（从原值到过渡值），因此需要通过一些行为来触发过渡（如：点击、鼠标移入等），可以通过CSS伪类选择器来触发过渡，或是通过 js 的事件来触发过渡</p><p>通常要产生过渡效果，还要满足从原值到过渡值之间必须能产生一个发生变化的中间值</p><h2 id="动画（animation）"><a href="#动画（animation）" class="headerlink" title="动画（animation）"></a>动画（animation）</h2><p>CSS animation 可以将从一组 CSS 样式过渡到另一组 CSS 样式。动画包括两个部分：描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p><p>动画的使用需要先定义动画序列</p><p><strong>使用 <code>@keyframes</code>(关键帧) 来定义动画序列</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line"><span class="number">0%</span>&#123;</span><br><span class="line"><span class="comment">/* 样式声明 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">100%</span>&#123;</span><br><span class="line"><span class="comment">/* 样式声明 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@keyframes</code> 规则中包含多个关键帧(子声明块)，每个关键帧都以一个百分比值(%)开头，其后跟一个样式声明块</li><li>百分比值是指在指定时间中的时间点，动画(animation)会将指定的样式从一个时间点过渡到另一个时间点</li><li>关键帧还可以以2个关键字开头：<code>form</code>(等同于0%)、<code>to</code>(等同于100%)</li></ul><p><strong>使用动画：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> animate&#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">from</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">to</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation-name</span>: animate;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>动画相关属性：</strong></p><ul><li><code>animation-name</code>  执行动画的名称 与@keyframes 之后的名称相同。该属性必须指定</li><li><code>animation-duration</code>  动画执行的时间，同 transition-duration，默认值为0s。该属性必须指定</li><li><code>animation-delay</code> 动画执行的延迟时间，同 transition-delay，默认值为0s</li><li><code>animation-timing-function</code> 同 transition-timing-function</li><li><code>animation-iteration-count</code> 动画执行次数，默认值为1<ul><li>数值</li><li><code>infinite</code> 无限循环播放动画</li></ul></li><li><code>animation-direction</code> 动画执行的方向，默认值为<code>normal</code>(动画从前往后播放)<ul><li><code>reverse</code> 反向播放动画，即从后往前播放动画</li><li><code>alternate</code> 交替反向播放动画，在重复执行动画时，动画会从前往后播放，结束时在从结束点交替反向播放</li><li><code>alternate-reverse</code> 反向交替播放动画，在重复执行动画时，动画会从后往前播放，结束时在从结束点交替反向播放</li></ul></li><li><code>animation-play-state</code> 动画执行的状态<ul><li><code>running</code> 运行</li><li><code>paused</code> 暂停</li></ul></li><li><code>animation-fill-mode</code> 动画执行结束的目标样式，默认值为none（动画执行结束时，其样式会还原动画执行前的样式）<ul><li><code>forwards</code> 动画执行结束时，其目标样式为最后一个关键帧中的样式</li><li><code>backwards</code> 动画执行结束时，其目标样式为第一个关键帧中的样式</li></ul></li></ul><p><strong>动画的简写属性：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: &lt;name&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt; &lt;iteration-count&gt; &lt;direction&gt; &lt;play-state&gt; &lt;fill-mode&gt;, +</span><br></pre></td></tr></table></figure><h2 id="变形（transform）"><a href="#变形（transform）" class="headerlink" title="变形（transform）"></a>变形（transform）</h2><p>CSS transform 属性可以在<strong>不影响文档流( <em>normal flow</em> )的情况下</strong>改变作用内容的位置。通过 transform 属性可以实现包括旋转，倾斜，缩放以及位移等，这些变形同时适用于平面与三维空间。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: transform-list;</span><br></pre></td></tr></table></figure><p>transform-list：</p><ul><li><p><code>translate()</code> 平移，相对于自身位置移动</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">translate</span>(tX, tY); <span class="comment">/* tX 为水平移动，tY垂直移动，值可以为任何长度值 */</span></span><br><span class="line">translateX(tX); <span class="comment">/* 设置水平移动 */</span></span><br><span class="line">translateY(tY); <span class="comment">/* 设置垂直移动 */</span></span><br><span class="line">translateZ(tZ); <span class="comment">/* 设置Z轴移动 */</span></span><br><span class="line">translate3d(tX, tY, tZ); <span class="comment">/* 同时设置x, y, z轴的移动 */</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/timeic/translates.jpg" alt="translates"></p></li><li><p><code>scale()</code> 缩放</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scale</span>(sX, sY); <span class="comment">/* sX 为水平缩放，sY 为垂直缩放，值为数字值(缩放倍数) */</span></span><br><span class="line">scaleX(sX); <span class="comment">/* 设置水平缩放 */</span></span><br><span class="line">scaleY(sY); <span class="comment">/* 设置垂直缩放 */</span></span><br><span class="line">scaleZ(sZ); <span class="comment">/* 设置Z轴缩放 */</span></span><br><span class="line">scale3d(sX, sY, sZ); <span class="comment">/* 同时设置x, y, z轴的缩放 */</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/timeic/scales.png" alt="scales"></p></li><li><p><code>rotate()</code> 旋转</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rotate</span>(aZ); <span class="comment">/* aZ 为Z轴旋转度数，如45deg */</span></span><br><span class="line">rotateX(aX); <span class="comment">/* 设置水平旋转 */</span></span><br><span class="line">rotateY(aY); <span class="comment">/* 设置垂直旋转 */</span></span><br><span class="line">rotateZ(aZ); <span class="comment">/* 设置Z轴旋转 */</span></span><br><span class="line">rotate3d(aX, aY, aZ); <span class="comment">/* 同时设置x, y, z轴的旋转 */</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/timeic/rotates.png" alt="rotates"></p></li><li><p><code>skew()</code> 斜切</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">skew(aX, aY); <span class="comment">/* aX 为水平方向的扭曲角度，aY 为垂直方向的扭曲角度 */</span></span><br><span class="line">skewX(tX); <span class="comment">/* 设置水平扭曲 */</span></span><br><span class="line">skewY(tY); <span class="comment">/* 设置垂直扭曲 */</span></span><br><span class="line">skewZ(tZ); <span class="comment">/* 设置Z轴扭曲 */</span></span><br><span class="line">skew3d(tX, tY, tZ); <span class="comment">/* 同时设置x, y, z轴的扭曲 */</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/timeic/skews.png" alt="skews"></p></li></ul><h3 id="transform-origin（变形原点）"><a href="#transform-origin（变形原点）" class="headerlink" title="transform-origin（变形原点）"></a>transform-origin（变形原点）</h3><p>描述：更改元素变形的原点</p><p>默认值：<code>center</code>（元素中心点）</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>(pX, pY); <span class="comment">/* pX 为水平偏移量，pY为垂直偏移量，偏移原点(0, 0点)为盒子左上角 */</span></span><br></pre></td></tr></table></figure><p>可选值：</p><p>​    关键字：</p><ul><li><p><code>top</code>、<code>left</code>、<code>bottom</code>、<code>right</code>、<code>center</code></p><p>如：<code>bottom center</code> 沿着盒子底边中心位置旋转</p></li><li><p><code>长度值</code></p><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/timeic/transform-origin.png" alt="transform-origin"></p></li></ul><h3 id="三维变形（3d-transform）"><a href="#三维变形（3d-transform）" class="headerlink" title="三维变形（3d transform）"></a>三维变形（3d transform）</h3><p>CSS 变形包含3个纬度（即x, y, z）。x轴和y轴代表屏幕的水平方向和垂直方向，而z轴代表屏幕到用户视线的方向，如果要表现3维空间感，则需要使用<code>perspective</code>属性</p><h3 id="perspective（视距）"><a href="#perspective（视距）" class="headerlink" title="perspective（视距）"></a>perspective（视距）</h3><p>描述：该属性指定了观察者到z轴平面的距离，使子级中具有三维位置变换的元素产生透视效果</p><p>继承性：No</p><p>默认值：<code>none</code>（无透视效果）</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/public/timeic/perspective.png" alt="perspective"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CSS" scheme="https://www.timeic.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS Flex &amp; Grid Layout</title>
    <link href="https://www.timeic.top/posts/375f66e0.html"/>
    <id>https://www.timeic.top/posts/375f66e0.html</id>
    <published>2021-08-15T16:00:00.000Z</published>
    <updated>2025-09-07T23:17:01.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="弹性盒子布局（Flex-Box-Layout）"><a href="#弹性盒子布局（Flex-Box-Layout）" class="headerlink" title="弹性盒子布局（Flex Box Layout）"></a>弹性盒子布局（<em>Flex Box Layout</em>）</h2><p>弹性盒子是一种基于父容器的布局机制，它通过 <code>display: flex</code> 来激活，激活后容器中的子元素可以在水平或垂直方向上膨胀以填充额外的空间，或收缩以适应更小的空间</p><p>弹性盒子布局的基本概念：</p><p><strong>Flex Container（弹性容器, 伸缩容器）</strong>：<br>    <code>display</code> 的值设置为 <code>flex</code> 或 <code>inline-flex</code> 的元素为弹性容器</p><p><strong>Flex Item（弹性项目, 伸缩项目）</strong>：<br>    弹性容器( <em>Flex Container</em> ) 的每个子元素称为弹性项目</p><p><strong>main axis（主轴）</strong>：<br>    所有弹性项目( <em>Flex Item</em> )沿其一侧排列的轴称为主轴</p><p><strong>cross axis（交叉轴）</strong>：<br>    垂直于主轴的轴称为交叉轴</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/IMG_20250614_225117.5q7o7xqedm.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/IMG_20250614_225117.5q7o7xqedm.webp"></p><p>样例 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgray&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightgreen&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightpink&quot;</span>&gt;</span>盒子3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightsalmon&quot;</span>&gt;</span>盒子4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightskyblue&quot;</span>&gt;</span>盒子5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="弹性容器属性"><a href="#弹性容器属性" class="headerlink" title="弹性容器属性"></a>弹性容器属性</h2><h3 id="flex-direction（主轴方向）"><a href="#flex-direction（主轴方向）" class="headerlink" title="flex-direction（主轴方向）"></a><em>flex-direction</em>（主轴方向）</h3><p><code>flex-direction</code> 用来<strong>设置弹性容器中子元素沿主轴的排列方向</strong></p><p>CSS 基础样式（基于样例 HTML）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid black;  </span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">row 水平从左到右( 默认 )</button></li><li class="tab"><button type="button" data-href="#events-2">row-reverse 水平从右到左</button></li><li class="tab"><button type="button" data-href="#events-3">column 垂直从上到下</button></li><li class="tab"><button type="button" data-href="#events-4">column-reverse 垂直从下到上</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><p><code>row</code>：设置主轴为水平方向</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/37389c5581f1b1e0f393d0be40e6c469.6ikjpp0twa.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/37389c5581f1b1e0f393d0be40e6c469.6ikjpp0twa.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">flex-direction</span>: row;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><p><code>row-reverse</code>：与 row 的排列方向相反</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/803603266f73491749545ce23448476f.5mo2a8tboy.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/803603266f73491749545ce23448476f.5mo2a8tboy.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-3"><p><code>column</code>：设置主轴为垂直方向</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/54aa34ebb2e75870d64dca6df7f3dabe.51eeny0nqy.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/54aa34ebb2e75870d64dca6df7f3dabe.51eeny0nqy.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">flex-direction</span>: column;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-4"><p><code>column-reverse</code>：与 column 的排列方向相反</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/590a72e8867f83e75d7962b9f75a767c.3gonoh59p9.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/590a72e8867f83e75d7962b9f75a767c.3gonoh59p9.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>容器内子元素的排列方向：</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/88f718156e75ca09a7b07cbb3bc0af39.7axf7fbdsh.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/88f718156e75ca09a7b07cbb3bc0af39.7axf7fbdsh.webp"></p><h3 id="justify-content（主轴对齐方式）"><a href="#justify-content（主轴对齐方式）" class="headerlink" title="justify-content（主轴对齐方式）"></a><em>justify-content</em>（主轴对齐方式）</h3><p><code>justify-content</code> <strong>用于控制主轴上弹性项目的对齐方式</strong></p><p>CSS 基础样式（基于样例 HTML）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid black;  </span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">center 居中对齐</button></li><li class="tab"><button type="button" data-href="#events-2">flex-start 起始对齐</button></li><li class="tab"><button type="button" data-href="#events-3">flex-end 末尾对齐</button></li><li class="tab"><button type="button" data-href="#events-4">space-between 两端对齐</button></li><li class="tab"><button type="button" data-href="#events-5">space-around 均等环绕</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><p><code>center</code>：弹性项目向第一行的中间位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/3ca45a48c335c9f0acd94adc0d12a288.3nrvjx52h0.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/3ca45a48c335c9f0acd94adc0d12a288.3nrvjx52h0.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">justify-content</span>: center;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><p><code>flex-start</code>：伸缩项目向第一行的开始位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/ab29192583e9110496601b63929eb8af.lvzip5ly0.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/ab29192583e9110496601b63929eb8af.lvzip5ly0.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-3"><p><code>flex-end</code>：伸缩项目向第一行的结束位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/9b46ff363f323af3ef75ffd21a9b54f6.77dt9qb6ya.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/9b46ff363f323af3ef75ffd21a9b54f6.77dt9qb6ya.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-4"><p><code>space-between</code>：伸缩项目会平均分布在一行中</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/a9a0f85b87fd467e48a29f4bd552f02a.4xusq8s0ce.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/a9a0f85b87fd467e48a29f4bd552f02a.4xusq8s0ce.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-5"><p><code>space-around</code>：伸缩项目会平均分布在一行中，两端保留一半的空间</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/848efdf5bcf7c9c876e5e2bcebfccaa7.102f9kj4f7.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/848efdf5bcf7c9c876e5e2bcebfccaa7.102f9kj4f7.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/08d9bd85aa3da08e92df855455ac420c.8vn66x6edb.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/08d9bd85aa3da08e92df855455ac420c.8vn66x6edb.webp"></p><h3 id="align-items（交叉轴对齐方式）"><a href="#align-items（交叉轴对齐方式）" class="headerlink" title="align-items（交叉轴对齐方式）"></a><em>align-items</em>（交叉轴对齐方式）</h3><p><code>align-items</code> 用于<strong>设置弹性项目在交叉轴（cross axis）上的对齐方式</strong></p><p>CSS 基础样式（基于样例 HTML）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid black;  </span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">  <span class="comment">/* 主轴对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">stretch 拉伸填满交叉轴( 默认 )</button></li><li class="tab"><button type="button" data-href="#events-2">center 居中对齐</button></li><li class="tab"><button type="button" data-href="#events-3">flex-start 起始对齐</button></li><li class="tab"><button type="button" data-href="#events-4">flex-end 末尾对齐</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><p><code>stretch</code>：默认值，伸缩项目拉伸填充整个伸缩容器</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/45063f087bcef0f2da756137e27bed0d.26lqi6xx3t.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/45063f087bcef0f2da756137e27bed0d.26lqi6xx3t.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* 交叉轴对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><p><code>center</code>：伸缩项目向侧轴的中间位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/624fbce6d802f1d792af745771ab51a9.8hgqg2p345.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/624fbce6d802f1d792af745771ab51a9.8hgqg2p345.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* 侧轴对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-items</span>: center;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-3"><p><code>flex-start</code>：伸缩项目向侧轴的起点位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/45063f087bcef0f2da756137e27bed0d.26lqi6xx3t.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/45063f087bcef0f2da756137e27bed0d.26lqi6xx3t.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* 侧轴对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-4"><p><code>flex-end</code>：伸缩项目向侧轴的终点位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/ee182a22b02e5b71410343411fe9a013.8adiknddof.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/ee182a22b02e5b71410343411fe9a013.8adiknddof.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* 侧轴对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/1cffb7d71df4c341267517e04e634d94.3yepd5plzh.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/1cffb7d71df4c341267517e04e634d94.3yepd5plzh.webp"></p><h3 id="flex-wrap（单行-多行显示）"><a href="#flex-wrap（单行-多行显示）" class="headerlink" title="flex-wrap（单行/多行显示）"></a><em>flex-wrap</em>（单行/多行显示）</h3><p><code>flex-wrap</code> 用于控制<strong>当弹性项目在主轴方向上超出容器空间时，是否换行</strong></p><p>CSS 基础样式（基于样例 HTML）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid black;  </span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">  <span class="comment">/* 主轴对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">nowrap</button></li><li class="tab"><button type="button" data-href="#events-2">wrap</button></li><li class="tab"><button type="button" data-href="#events-3">wrap-reverse</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><p><code>nowrap</code>：设置伸缩项目单行显示。这种方式可能导致溢出伸缩容器</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/f44c75285737bc115ce759d8da66c29a.8dx4ievlaq.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/f44c75285737bc115ce759d8da66c29a.8dx4ievlaq.webp"></p><p>可见，容器宽度 900px，容器内一共 9 个子元素，每个 120px，他们紧紧的排列在一起</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><p><code>wrap</code>：设置伸缩项目多行显示</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/6a7a66335ef131c61852a1da4ea223e0.6bhbucyw1n.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/6a7a66335ef131c61852a1da4ea223e0.6bhbucyw1n.webp"></p><p>当多行显示时，第一行放不下的元素会被放到<strong>下一行</strong>（第二行），因为设置了主轴对齐方式为 <code>space-between</code>，所以多出来的两个元素分别到了两端</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-3"><p><code>wrap-reverse</code>：与 wrap 相反</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/68f3e9345e97d6168e135a0a57b72767.5xaw3hs662.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/68f3e9345e97d6168e135a0a57b72767.5xaw3hs662.webp"></p><p>当多行显示时，第一行放不下的元素会被放到<strong>上一行</strong>（第二行），因为设置了主轴对齐方式为 <code>space-between</code>，所以多出来的两个元素分别到了两端</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap-reverse;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="align-content（交叉轴多行对齐方式）"><a href="#align-content（交叉轴多行对齐方式）" class="headerlink" title="align-content（交叉轴多行对齐方式）"></a><em>align-content</em>（交叉轴多行对齐方式）</h3><p><code>align-content</code> 用于控制<strong>多行弹性项目</strong>在交叉轴（cross axis）方向上的对齐方式</p><p>CSS 基础样式（基于样例 HTML）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid black;  </span><br><span class="line">  <span class="comment">/* 将当前元素设置为弹性盒子模型的伸缩容器 */</span>  </span><br><span class="line">  <span class="attribute">display</span>: flex;  </span><br><span class="line">  <span class="comment">/* justify-content属性表示项目在主轴的对其方式 */</span>  </span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;  </span><br><span class="line">  <span class="comment">/* 设置伸缩项目是单行显示还是多行显示 */</span>  </span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">stretch</button></li><li class="tab"><button type="button" data-href="#events-2">center</button></li><li class="tab"><button type="button" data-href="#events-3">flex-start</button></li><li class="tab"><button type="button" data-href="#events-4">flex-end</button></li><li class="tab"><button type="button" data-href="#events-5">space-between</button></li><li class="tab"><button type="button" data-href="#events-6">space-around</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><p><code>stretch</code>：默认值，各行将会伸展以占用额外的空间</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/3c1090dbd41ba0eba17c7898c87e998a.1e8v1e9f5j.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/3c1090dbd41ba0eba17c7898c87e998a.1e8v1e9f5j.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* align-content属性设置伸缩项目所在行的对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-content</span>: stretch;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><p><code>center</code>：各行向伸缩容器的中间位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/805a28e03655fbd3119c4afdcb9c4ed1.7lk91k6rsr.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/805a28e03655fbd3119c4afdcb9c4ed1.7lk91k6rsr.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* align-content属性设置伸缩项目所在行的对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-content</span>: center;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-3"><p><code>flex-start</code>：各行向伸缩容器的起点位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/d30affd9e07a03e34346a8edaaa7a003.2324lf042o.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/d30affd9e07a03e34346a8edaaa7a003.2324lf042o.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* align-content属性设置伸缩项目所在行的对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-content</span>: flex-start;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-4"><p><code>flex-end</code>：各行向伸缩容器的终点位置对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/0e35ad282dcd38703964d990508fe8cc.39lfu0qabc.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/0e35ad282dcd38703964d990508fe8cc.39lfu0qabc.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* align-content属性设置伸缩项目所在行的对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-content</span>: flex-end;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-5"><p><code>space-between</code>：各行会平均分布在一行中。第一项与起始点齐平，最后一项与终止点齐平</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/dfdf45e4d48810985cc5931aa556b6f2.7w72upqdqz.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/dfdf45e4d48810985cc5931aa556b6f2.7w72upqdqz.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* align-content属性设置伸缩项目所在行的对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-content</span>: space-between;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-6"><p><code>space-around</code>：各行会平均分布在一行中，两端保留一半的空间</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/a0b03d2eca5689738240e2dbc22175a3.5mo2b87h2v.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/a0b03d2eca5689738240e2dbc22175a3.5mo2b87h2v.webp"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* align-content属性设置伸缩项目所在行的对齐方式 */</span>  </span><br><span class="line">  <span class="attribute">align-content</span>: space-around;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a><em>flex-flow</em></h3><p>flex-flow 属性适用于伸缩容器元素，该属性是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写。</p><p>其语法：<code>flex-flow: &lt;&#39;flex-direction&#39;&gt; || &lt;&#39;flex-wrap&#39;&gt;</code>，示例：<code>flex-flow: row wrap</code></p><h2 id="弹性项目属性"><a href="#弹性项目属性" class="headerlink" title="弹性项目属性"></a>弹性项目属性</h2><h3 id="flex-grow（伸展比例）"><a href="#flex-grow（伸展比例）" class="headerlink" title="flex-grow（伸展比例）"></a><em>flex-grow</em>（伸展比例）</h3><p><code>flex-grow</code> 属性用来控制弹性项目在主轴上的放大比例 (<strong>剩余空间按比例分配</strong>)。默认为 0，即如果容器存在剩余空间，也不放大</p><p>其属性的取值为数字</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/c2e4f379f5fe91245eee27eabc7c67b2.8l0ceqoh5l.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/c2e4f379f5fe91245eee27eabc7c67b2.8l0ceqoh5l.webp"></p><h3 id="flex-shrink（收缩比例）"><a href="#flex-shrink（收缩比例）" class="headerlink" title="flex-shrink（收缩比例）"></a><em>flex-shrink</em>（收缩比例）</h3><p><code>flex-shrink</code> 属性定义了<strong>弹性项目的在主轴上的缩小比例</strong>，默认为 1，即如果空间不足，该项目将缩小</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/ae80f26c2897a68994540eb38de25f3a.92qe3c2dcx.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/ae80f26c2897a68994540eb38de25f3a.92qe3c2dcx.webp"></p><ul><li>如果所有弹性项目的 flex-shrink 属性都为 1 (默认)，当空间不足时，都将等比例缩小</li><li>如果一个弹性项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小</li><li>负值对该属性无效</li></ul><h3 id="flex-basis（初始大小）"><a href="#flex-basis（初始大小）" class="headerlink" title="flex-basis（初始大小）"></a><em>flex-basis</em>（初始大小）</h3><p><code>flex-basis</code> 属性定义了在还没计算 <code>flex-grow</code> 或 <code>flex-shrink</code> 之前，<strong>弹性项目的主轴大小</strong>( 初始大小 )是多少，默认值 auto，根据内容推算初始大小</p><p>大部分情况下 <code>flex-basis</code> 属性和 <code>width</code> 或 <code>height</code> 表现一致，如果两者同时使用 <code>flex-basis</code> 优先级会高一些</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 表示这个元素在主轴方向上「初始是 200px」，然后再参与伸展 (flex-grow) 或收缩 (flex-shrink) 的计算 */</span></span><br></pre></td></tr></table></figure><h3 id="order（顺序）"><a href="#order（顺序）" class="headerlink" title="order（顺序）"></a><em>order</em>（顺序）</h3><p><code>order</code> 属性用于设置弹性项目在布局时的顺序。默认为 0，值越大越靠后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;  </span><br><span class="line">  <span class="selector-class">.container</span> &#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">900px</span>;  </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;  </span><br><span class="line">    <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span><br><span class="line">    <span class="attribute">display</span>: flex;  </span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;  </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;  </span><br><span class="line">    <span class="attribute">order</span>: <span class="number">2</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;  </span><br><span class="line">    <span class="attribute">order</span>: <span class="number">3</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="selector-class">.container</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;  </span><br><span class="line">    <span class="attribute">order</span>: <span class="number">1</span>;  </span><br><span class="line">  &#125;  </span><br><span class="line">&lt;/style&gt;  </span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;container&quot;&gt;  </span><br><span class="line">  &lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">background-color</span>: lightgray<span class="string">&quot;&gt;盒子1 - order:2&lt;/div&gt;  </span></span><br><span class="line"><span class="string">  &lt;div style=&quot;</span>background-color: lightgreen<span class="string">&quot;&gt;盒子2 - order:3&lt;/div&gt;  </span></span><br><span class="line"><span class="string">  &lt;div style=&quot;</span>background-color: lightpink<span class="string">&quot;&gt;盒子3 - order:1&lt;/div&gt;  </span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.32i8z7pnp4.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.32i8z7pnp4.webp"></p><h2 id="网格布局（Grid-Layout）"><a href="#网格布局（Grid-Layout）" class="headerlink" title="网格布局（Grid Layout）"></a>网格布局（Grid Layout）</h2><p>Grid Layout 是一种允许你以网格（rows 和 columns）来对网页内容进行布局的模块，相比 Flex Box 布局，网格布局可以在行和列两个维度上同时进行布局( 二维布局 )</p><p>它可以非常轻松地把页面分割成主要区域，还可以在小部件内定义更复杂的布局</p><p>网格布局与弹性盒子布局有一些相同的概念：</p><p><strong>Grid Container（网格容器）</strong>：<br>    <code>display</code> 的值设置为 <code>grid</code> 或 <code>inline-grid</code> 的元素为网格容器</p><p><strong>Grid Item（网格项目）</strong>：<br>    网格容器( <em>Grid Container</em> )的直接子元素为网格项目</p><p>样例 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: green&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blue&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: violet&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: pink&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: purple&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: orange&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: sienna&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: bisque&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格容器属性"><a href="#网格容器属性" class="headerlink" title="网格容器属性"></a>网格容器属性</h2><h3 id="grid-template-columns-amp-grid-template-rows（列宽与行高）"><a href="#grid-template-columns-amp-grid-template-rows（列宽与行高）" class="headerlink" title="grid-template-columns &amp; grid-template-rows（列宽与行高）"></a><em>grid-template-columns</em> &amp; <em>grid-template-rows</em>（列宽与行高）</h3><p><code>grid-template-columns</code> &amp; <code>grid-template-rows</code> 用于定义<strong>列的宽度</strong>和<strong>行的高度</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* 定义网格布局 */</span>  </span><br><span class="line">  <span class="attribute">display</span>: grid;  </span><br><span class="line">  <span class="comment">/* 定义三列网格，宽度为200px */</span>  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">200px</span> <span class="number">200px</span>;  </span><br><span class="line">  <span class="comment">/* 定义三行网格，高度为60px */</span>  </span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/634abbb85ba0e.2doz0wvql5.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/634abbb85ba0e.2doz0wvql5.webp"></p><p><code>grid-template</code> 的其它值：</p><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">repeat 函数</button></li><li class="tab"><button type="button" data-href="#events-2">minmax 函数</button></li><li class="tab"><button type="button" data-href="#events-3">auto-fill auto-fit 关键字</button></li><li class="tab"><button type="button" data-href="#events-4">fr 空间分配比例单位</button></li><li class="tab"><button type="button" data-href="#events-5">auto 关键字</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><p><code>repeat</code> 函数用于重复一个值或模式，其接受两个参数：</p><ul><li>重复的次数</li><li>重复的值或模式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 三列网格，每列宽为 33.33% */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">  <span class="comment">/* 三行网格，每行高为 33.33% */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义六列，第一列和第四列的宽度为 <code>40px</code>，第二列和第五列为 <code>60px</code>，第三列和第六列为 <code>80px</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;  </span><br><span class="line">  <span class="comment">/* 以下定义相当于 grid-template-columns: 40px 60px 80px 40px 60px 80px; */</span>  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">40px</span> <span class="number">60px</span> <span class="number">80px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><p>该函数用于产生一个长度范围，其接受两个参数：</p><ul><li>最小值</li><li>最大值</li></ul><p><code>grid-template-columns: 1fr 1fr minmax(100px, 1fr);</code> 表示第三列宽度最小为 100 像素，最大为 1 个单位</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-3"><p>当单元格大小固定，但容器大小不确定时，希望每一行或每一列都尽可能的容纳多个单元格，此时则可以使用关键字 <code>auto-fill</code> 或 <code>auto-fit</code> 关键词</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 定义多列网格(数量取决于父容器宽度)，每列宽度200px */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">200px</span>);</span><br><span class="line">  <span class="comment">/* 定义 3 行网格，每行高度60px */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">60px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 定义多列网格，每列宽度最小为 200px, 容器剩余空间自动均分, 如果是 auto-fill 就不会利用剩余空间 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fit, <span class="built_in">minmax</span>(<span class="number">200px</span>, <span class="number">1</span>fr));</span><br><span class="line">  <span class="comment">/* 定义 3 行网格，每行高度60px */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">60px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-4"><p><code>fr</code> 是 Grid 中用于表示空间分配比例的单位，例如 <code>grid-template-columns: 1fr 2fr;</code> 则表示前者为宽度为 1 个单位，则后者为前者的两倍：2 个单位</p><p><code>fr</code> 单位也可以与绝对单位相配合：<code>grid-template-columns: 150px 1fr 2fr;</code>，此时则表示：第一列为 200px，剩余宽度分配成 1:2 的比例并分配给第二列和第三列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="comment">/* 定义网格布局 */</span>  </span><br><span class="line">  <span class="attribute">display</span>: grid;  </span><br><span class="line">  <span class="comment">/* 定义三列网格，第一列宽度为200px，剩余宽度分配成1:2的比例并分配给第二列和第三列 */</span>  </span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">2</span>fr;  </span><br><span class="line">  <span class="comment">/* 定义三行网格，高度为60px */</span>  </span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">60px</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-5"><p><code>auto</code> 关键字表示由浏览器分配剩余可用长度。例如：<code>grid-template-columns: 100px auto 100px;</code> 表示第一列与第三列宽度为 100 像素，第二列则占用全部剩余宽度</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="row-gap-amp-column-gap（间距）"><a href="#row-gap-amp-column-gap（间距）" class="headerlink" title="row-gap &amp; column-gap（间距）"></a><em>row-gap</em> &amp; <em>column-gap</em>（间距）</h3><ul><li><code>row-gap</code> 属性设置行与行的间隔（行间距）</li><li><code>column-gap</code> 属性设置列与列的间隔（列间距）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">200px</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">60px</span>);</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">20px</span>; <span class="comment">/* 20像素行间距 */</span></span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">30px</span>; <span class="comment">/* 30像素列间距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/PowerToys_Paste_20250703202708.7snhmzv5z4.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/PowerToys_Paste_20250703202708.7snhmzv5z4.webp"></p><p><code>gap</code> 属性是 <code>column-gap</code> 和 <code>row-gap</code> 的合并简写形式，语法如下</p><ul><li><code>gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</code></li></ul><h3 id="grid-template-areas-amp-grid-area（区域）"><a href="#grid-template-areas-amp-grid-area（区域）" class="headerlink" title="grid-template-areas &amp; grid-area（区域）"></a><em>grid-template-areas</em> &amp; <em>grid-area</em>（区域）</h3><p>网格布局允许指定 “区域”（area），一个区域由单个或多个单元格组成</p><p><code>grid-template-areas</code> 属性用于定义区域，<code>grid-area</code> 属性（网格项目属性）指定项目放在哪一个区域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">252</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">0.7</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">grid-area</span>: header;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">aside</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">254</span>, <span class="number">172</span>, <span class="number">21</span>, <span class="number">0.7</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">grid-area</span>: sidebar;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">98</span>, <span class="number">255</span>, <span class="number">0.7</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">grid-area</span>: content;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">3</span>, <span class="number">157</span>, <span class="number">3</span>, <span class="number">0.7</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">grid-area</span>: footer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 容器内部居中 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">gap</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 列宽 第 1 列宽度会自动计算为剩余宽度(800 - 300 - 300 = 200), 第 2 列宽度为 300px, 第 3 列宽度为 300px */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">300px</span> <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 行高 第 1 行高 50px, 第 2 行高 250px, 第 3 行高 80px */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">grid-template-rows</span>: <span class="number">50px</span> <span class="number">250px</span> <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 根据文本模板定义三行三列网格 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">grid-template-areas</span>:</span></span><br><span class="line"><span class="language-css">                <span class="string">&quot;header header header&quot;</span> <span class="comment">/* 第一行为 header 区域 */</span></span></span><br><span class="line"><span class="language-css">                <span class="string">&quot;sidebar content content&quot;</span> <span class="comment">/* 第二行 左边 sidebar 区域占 1 个单元格, 右边 content 区域占 2 个单元格 */</span></span></span><br><span class="line"><span class="language-css">                <span class="string">&quot;footer footer footer&quot;</span>; <span class="comment">/* 第三行为 footer 区域 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">main</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.7pksvjpkz.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.7pksvjpkz.webp"></p><h3 id="justify-items-amp-align-items（单元格对齐方式）"><a href="#justify-items-amp-align-items（单元格对齐方式）" class="headerlink" title="justify-items &amp; align-items（单元格对齐方式）"></a><em>justify-items</em> &amp; <em>align-items</em>（单元格对齐方式）</h3><ul><li><code>justify-items</code>：控制 <em>每个格子里的内容</em> 在 <strong>水平方向</strong> 的对齐方式</li><li><code>align-items</code>：控制 <em>每个格子里的内容</em> 在 <strong>垂直方向</strong> 的对齐方式</li></ul><p><code>justify-items</code> 和 <code>align-items</code> 属性的取值和写法完全一样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">justify-items</span>: start | end | center | stretch;  </span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：对齐单元格的起始边缘</li><li><code>end</code>：对齐单元格的结束边缘</li><li><code>center</code>：单元格内部居中</li><li><code>stretch</code>：拉伸，占满单元格的整个宽度（默认值）</li></ul><p>例如：<code>justify-items: start;</code> 属性表示该单元格内容左对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.mcxgnez4.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.mcxgnez4.webp"></p><p>简写属性 <code>place-items</code>：</p><ul><li><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code></li></ul><h3 id="justify-content-amp-align-content（网格整体对齐方式）"><a href="#justify-content-amp-align-content（网格整体对齐方式）" class="headerlink" title="justify-content &amp; align-content（网格整体对齐方式）"></a><em>justify-content</em> &amp; <em>align-content</em>（网格整体对齐方式）</h3><ul><li><code>justify-content</code>：<strong>水平方向上</strong>对齐<strong>整个 grid 容器</strong></li><li><code>align-content</code>：<strong>垂直方向上</strong>对齐<strong>整个 grid 容器</strong></li></ul><p>Tips：它们只在 <strong>网格总尺寸小于容器尺寸</strong>时起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;  </span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="events"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#events-1">start 起始对齐</button></li><li class="tab"><button type="button" data-href="#events-2">end 末尾对齐</button></li><li class="tab"><button type="button" data-href="#events-3">center 居中</button></li><li class="tab"><button type="button" data-href="#events-4">stretch 拉伸填满</button></li><li class="tab"><button type="button" data-href="#events-5">space-around 均等环绕</button></li><li class="tab"><button type="button" data-href="#events-6">space-between 两端对齐</button></li><li class="tab"><button type="button" data-href="#events-7">space-evenly 等分间隔</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="events-1"><p>靠容器起始边对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5fkvfwiugf.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5fkvfwiugf.webp"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-2"><p>靠容器末端对齐</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5q7p91zlb8.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5q7p91zlb8.webp"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-3"><p>容器内部居中</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5c19i6s7vh.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5c19i6s7vh.webp"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-4"><p>项目大小没有指定时，拉伸占据整个网格容器</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.8dx5jeumjo.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.8dx5jeumjo.webp"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-5"><p>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.3d52ruotyy.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.3d52ruotyy.webp"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-6"><p>首尾贴边，中间均分空间</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5mo3bcalm3.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.5mo3bcalm3.webp"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="events-7"><p>项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</p><p><img src="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.32i8ypbl1s.webp" alt="https://cdn.jsdmirror.com/gh/k34869/picx-images-hosting@master/image.32i8ypbl1s.webp"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>简写属性 <code>place-content</code>：</p><ul><li><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;;</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web开发" scheme="https://www.timeic.top/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CSS" scheme="https://www.timeic.top/tags/CSS/"/>
    
  </entry>
  
</feed>
